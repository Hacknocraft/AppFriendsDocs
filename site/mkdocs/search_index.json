{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to AppFriends\n\n\nThe AppFriends plugin integrates public chat channels, private messaging, and social graphs into any app to increase user interaction and engagement. AppFriends supports multiple platforms.\n\n\nAppFriends supports a number of features:\n\n\n\nopen channel, group and one on one chats\n\n\nsocial features such as following and making friends\n\n\nprivacy features such as blocking/reporting an user\n\n\ndialog conversation settings such as muting, changing dialog name\n\n\ntyping indicator\n\n\nmessage receipts\n\n\nvideo and image messages\n\n\n...\n\n\n\n\nIf you are interested in our product or have ideas on how we can improve it, please send emails to \nsupport@hacknocraft.com\n; we would love to hear from you.\n\n\nMobile\n\n\nAppFriends has native SDKs that make integration for iOS and Android much easier.\n\n\niOS\n\n\nThe iOS SDK can be integrated into existing Xcode iOS projects. There are two SDK frameworks for you to use. If you don't want to use our provided UI, you can integrate the \nAppFriendsCore\n framework, which has no UI components but helps you communicate with the AppFriends platform. There is also the \nAppFriendsUI\n framework, which contains a lot of convenient UI components for you to quickly implement chat in your app. For details, please read the \niOS SDK guide\n.\n\n\nAndroid\n\n\nThe Android SDK can be integrated into existing Android projects. For details,\nplease read \nAndroid SDK guide\n.\n\n\nServer API\n\n\nAppFriends has comprehensive REST APIs for you to use. There are two types of APIs: \nApplication API\n and \nAdmin API\n.\n\n\nAdmin Portal\n\n\nYou can control the widget by logging into the \nadmin portal\n with your AppFriends account.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-appfriends", 
            "text": "The AppFriends plugin integrates public chat channels, private messaging, and social graphs into any app to increase user interaction and engagement. AppFriends supports multiple platforms.  AppFriends supports a number of features:  open channel, group and one on one chats  social features such as following and making friends  privacy features such as blocking/reporting an user  dialog conversation settings such as muting, changing dialog name  typing indicator  message receipts  video and image messages  ...   If you are interested in our product or have ideas on how we can improve it, please send emails to  support@hacknocraft.com ; we would love to hear from you.", 
            "title": "Welcome to AppFriends"
        }, 
        {
            "location": "/#mobile", 
            "text": "AppFriends has native SDKs that make integration for iOS and Android much easier.", 
            "title": "Mobile"
        }, 
        {
            "location": "/#ios", 
            "text": "The iOS SDK can be integrated into existing Xcode iOS projects. There are two SDK frameworks for you to use. If you don't want to use our provided UI, you can integrate the  AppFriendsCore  framework, which has no UI components but helps you communicate with the AppFriends platform. There is also the  AppFriendsUI  framework, which contains a lot of convenient UI components for you to quickly implement chat in your app. For details, please read the  iOS SDK guide .", 
            "title": "iOS"
        }, 
        {
            "location": "/#android", 
            "text": "The Android SDK can be integrated into existing Android projects. For details,\nplease read  Android SDK guide .", 
            "title": "Android"
        }, 
        {
            "location": "/#server-api", 
            "text": "AppFriends has comprehensive REST APIs for you to use. There are two types of APIs:  Application API  and  Admin API .", 
            "title": "Server API"
        }, 
        {
            "location": "/#admin-portal", 
            "text": "You can control the widget by logging into the  admin portal  with your AppFriends account.", 
            "title": "Admin Portal"
        }, 
        {
            "location": "/ios/quick_start/", 
            "text": "Quick Start\n\n\n1. Create an AppFriends Application\n\n\nBefore start using AppFriends, you need to create an application on the \ndashboard\n Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\n\n\n2. Integrate AppFriends SDK\n\n\nUsing Cocoapods\n\n\nTo integrate AppFriends iOS SDK to your Xcode iOS project, add this line in your \nPodfile\n\n\npod\n \nAppFriendsUI\n,\n \n~\n 2.0.1\n\n\npod\n \nAppFriendsCore\n,\n \n~\n 2.0.1\n\n\n\n\n\n\nAlso, add \nuse_frameworks!\n to the top of file. eg.\n\n\nsource\n \nhttps://github.com/CocoaPods/Specs.git\n\n\nsource\n \nhttps://github.com/Hacknocraft/hacknocraft-cocoapods-spec.git\n\n\nuse_frameworks!\n\n\n...\n\n\n\n\n\n\nYou might need to run \npod repo update\n after this step before calling \npod install\n\n\nTo see an sample app of how to use AppFriendsUI, please checkout our repo:\n\n\n\n\nGithub iOS Sample App\n\n\n\n\nIf you don't want any of the UI components we provide, you can directly interact with the platform API, and we have a core framework to use for that purpose:\n\n\npod\n \nAppFriendsCore\n,\n \n~\n 2.0.1\n\n\n\n\n\n\n3. Import Header\n\n\nThe next step is import the headers.\n\n\nExample\n\n\nSwift\n\n\n#\nimport\n \nAppFriendsCore\n\n\n#\nimport\n \nAppFriendsUI\n\n\n\n\n\n\nObjective-C\n\n\n#import \nAppFriendsCore/AppFriendsCore-Swift.h\n\n\n#import \nAppFriendsUI/AppFriendsUI-Swift.h\n\n\n\n\n\n\n4. Initialization\n\n\nNow, we can use the AppFriends key and secret to initialize the SDK. Key and secret can be found in your AppFriends dashboard. If you are using the \nAppFriendsUI\n SDK, you can initialize by:\n\n\nAppFriendsUI Initialization\n\n\nSwift\n\n\nAppFriendsUI\n.\nsharedInstance\n.\ninitialize\n(\n[appfriends key]\n,\n \nsecret\n:\n \n[appfriends secret]\n)\n \n{\n \n(\nsuccess\n,\n \nerror\n)\n \nin\n\n        \nif\n \n!\nsuccess\n \n{\n\n                \nNSLog\n(\nAppFriends initialization error:\n\\(\nerror\n?.\nlocalizedDescription\n)\n)\n\n        \n}\nelse\n \n{\n\n             \n// initialization is successful\n\n        \n}\n\n\n}\n\n\n\n\n\n\nObjective-C\n\n\nimport\n \nAppFriendsCore\n\n\nimport\n \nAppFriendsUI\n\n\n\n\n\n\nAppFriendsCore Initialization\n\n\nSkip\n this step if you are using the \nAppFriendsUI\n SDK. If you are using \nAppFriendsCore\n SDK, you can initialize by:\n\n\nSwift\n\n\nHCSDKCore\n.\nsharedInstance\n.\ninitialize\n(\nkey\n:\n \n[appfriends key]\n,\n \nsecret\n:\n \n[appfriends secret]\n)\n \n{\n \n(\nsuccess\n,\n \nerror\n)\n \nin\n\n        \nif\n \n!\nsuccess\n \n{\n\n                \nNSLog\n(\nAppFriends initialization error:\n\\(\nerror\n?.\nlocalizedDescription\n)\n)\n\n        \n}\nelse\n \n{\n\n             \n// initialization is successful\n\n        \n}\n\n\n}\n\n\n\n\n\n\nObjective-C\n\n\nimport\n \nAppFriendsCore\n\n\nimport\n \nAppFriendsUI\n\n\n\n\n\n\n5. Login\n\n\nAfter initialization, you want to login your user to AppFriends, so he can start chatting with other users. Please see \nsessions\n for detail", 
            "title": "Quick Start"
        }, 
        {
            "location": "/ios/quick_start/#quick-start", 
            "text": "", 
            "title": "Quick Start"
        }, 
        {
            "location": "/ios/quick_start/#1-create-an-appfriends-application", 
            "text": "Before start using AppFriends, you need to create an application on the  dashboard  Users in the same application can talk to each other and you only need one application for all the platforms you want to support.", 
            "title": "1. Create an AppFriends Application"
        }, 
        {
            "location": "/ios/quick_start/#2-integrate-appfriends-sdk", 
            "text": "", 
            "title": "2. Integrate AppFriends SDK"
        }, 
        {
            "location": "/ios/quick_start/#using-cocoapods", 
            "text": "To integrate AppFriends iOS SDK to your Xcode iOS project, add this line in your  Podfile  pod   AppFriendsUI ,   ~  2.0.1  pod   AppFriendsCore ,   ~  2.0.1   Also, add  use_frameworks!  to the top of file. eg.  source   https://github.com/CocoaPods/Specs.git  source   https://github.com/Hacknocraft/hacknocraft-cocoapods-spec.git  use_frameworks!  ...   You might need to run  pod repo update  after this step before calling  pod install  To see an sample app of how to use AppFriendsUI, please checkout our repo:   Github iOS Sample App   If you don't want any of the UI components we provide, you can directly interact with the platform API, and we have a core framework to use for that purpose:  pod   AppFriendsCore ,   ~  2.0.1", 
            "title": "Using Cocoapods"
        }, 
        {
            "location": "/ios/quick_start/#3-import-header", 
            "text": "The next step is import the headers.", 
            "title": "3. Import Header"
        }, 
        {
            "location": "/ios/quick_start/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/ios/quick_start/#swift", 
            "text": "# import   AppFriendsCore  # import   AppFriendsUI", 
            "title": "Swift"
        }, 
        {
            "location": "/ios/quick_start/#objective-c", 
            "text": "#import  AppFriendsCore/AppFriendsCore-Swift.h  #import  AppFriendsUI/AppFriendsUI-Swift.h", 
            "title": "Objective-C"
        }, 
        {
            "location": "/ios/quick_start/#4-initialization", 
            "text": "Now, we can use the AppFriends key and secret to initialize the SDK. Key and secret can be found in your AppFriends dashboard. If you are using the  AppFriendsUI  SDK, you can initialize by:", 
            "title": "4. Initialization"
        }, 
        {
            "location": "/ios/quick_start/#appfriendsui-initialization", 
            "text": "", 
            "title": "AppFriendsUI Initialization"
        }, 
        {
            "location": "/ios/quick_start/#swift_1", 
            "text": "AppFriendsUI . sharedInstance . initialize ( [appfriends key] ,   secret :   [appfriends secret] )   {   ( success ,   error )   in \n         if   ! success   { \n                 NSLog ( AppFriends initialization error: \\( error ?. localizedDescription ) ) \n         } else   { \n              // initialization is successful \n         }  }", 
            "title": "Swift"
        }, 
        {
            "location": "/ios/quick_start/#objective-c_1", 
            "text": "import   AppFriendsCore  import   AppFriendsUI", 
            "title": "Objective-C"
        }, 
        {
            "location": "/ios/quick_start/#appfriendscore-initialization", 
            "text": "Skip  this step if you are using the  AppFriendsUI  SDK. If you are using  AppFriendsCore  SDK, you can initialize by:", 
            "title": "AppFriendsCore Initialization"
        }, 
        {
            "location": "/ios/quick_start/#swift_2", 
            "text": "HCSDKCore . sharedInstance . initialize ( key :   [appfriends key] ,   secret :   [appfriends secret] )   {   ( success ,   error )   in \n         if   ! success   { \n                 NSLog ( AppFriends initialization error: \\( error ?. localizedDescription ) ) \n         } else   { \n              // initialization is successful \n         }  }", 
            "title": "Swift"
        }, 
        {
            "location": "/ios/quick_start/#objective-c_2", 
            "text": "import   AppFriendsCore  import   AppFriendsUI", 
            "title": "Objective-C"
        }, 
        {
            "location": "/ios/quick_start/#5-login", 
            "text": "After initialization, you want to login your user to AppFriends, so he can start chatting with other users. Please see  sessions  for detail", 
            "title": "5. Login"
        }, 
        {
            "location": "/ios/sessions/", 
            "text": "Session API can be access using \nAFSession\n class.\n\n\nLogin\n\n\nBefore an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require\n\n\n\n\nan unique username\n\n\nan unique user ID\n, this should be the same user id that you use in your app to identify the user\n\n\n\n\nAFSession\n.\nlogin\n(\nusername\n:\n \nusername\n,\n \nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\ntoken\n,\n \nerror\n)\n \nin\n\n  \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n    \n// login failed\n\n  \n}\n \nelse\n \n{\n\n    \n// login is successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nYou can check if a user has logged in to AppFriends or not by using:\n\n\nif\n \nAFSession\n.\nisLoggedIn\n()\n \n{\n\n  \n// user has logged in to AppFriends\n\n\n}\n\n\n\n\n\n\nLogout\n\n\nWhen an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:\n\n\nAFSession\n.\nlogout\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n    \n// logout failed\n\n  \n}\n \nelse\n \n{\n\n    \n// logout is successful\n\n  \n}\n\n\n}", 
            "title": "Sessions"
        }, 
        {
            "location": "/ios/sessions/#login", 
            "text": "Before an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require   an unique username  an unique user ID , this should be the same user id that you use in your app to identify the user   AFSession . login ( username :   username ,   userID :   userID ,   completion :   {   ( token ,   error )   in \n   if   let   err   =   error   { \n     // login failed \n   }   else   { \n     // login is successful \n   }  })   You can check if a user has logged in to AppFriends or not by using:  if   AFSession . isLoggedIn ()   { \n   // user has logged in to AppFriends  }", 
            "title": "Login"
        }, 
        {
            "location": "/ios/sessions/#logout", 
            "text": "When an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:  AFSession . logout   {   ( error )   in \n   if   let   err   =   error   { \n     // logout failed \n   }   else   { \n     // logout is successful \n   }  }", 
            "title": "Logout"
        }, 
        {
            "location": "/ios/users/", 
            "text": "Users\n\n\nThe users API interface is in data model class \nAFUser\n. In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via \nadmin API\n, and AppFriends SDK also provides a lot of convenient interface for you to work with.\n\n\nUser Update\n\n\nWhen user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.\n\n\nUpdate Username:\n\n\nlet\n \nusername\n \n=\n \na new username\n\n\nAFUser\n.\nupdateUserName\n(\nusername\n:\n \nusername\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n//update failed\n\n  \n}\n \nelse\n \n{\n\n    \n//update successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nUpdate User Avatar:\n\n\nlet\n \navatarURL\n \n=\n \nhttps://someavatar.jpg\n\n\nAFUser\n.\nupdateUserAvatar\n(\navatar\n:\n \navatarURL\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n//update failed\n\n  \n}\n \nelse\n \n{\n\n    \n//update successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nFetch Information of an User\n\n\nYou can fetch the information of an user.\n\n\nAFUser\n.\ngetUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nuser\n,\n \nerror\n)\n \nin\n\n               \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n                   \n// get user failed\n\n               \n}\n \nelse\n \n{\n\n                   \n// fetch successful, you can now use the returned user object\n\n               \n}\n\n           \n})\n\n\n\n\n\n\nBlock/Unblock\n\n\nAn user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:\n\n\nAFUser\n.\nblockUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                        \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n                            \n// block user failed\n\n                        \n}\n\n                        \nelse\n \n{\n\n                            \n// block user successful\n\n                        \n}\n\n                    \n})\n\n\n\n\n\n\nUnblock a user:\n\n\nAFUser\n.\nunblockUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                        \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n                            \n// unblock user failed\n\n                        \n}\n\n                        \nelse\n \n{\n\n                            \n// unblock user successful\n\n                        \n}\n\n                    \n})", 
            "title": "Users"
        }, 
        {
            "location": "/ios/users/#users", 
            "text": "The users API interface is in data model class  AFUser . In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via  admin API , and AppFriends SDK also provides a lot of convenient interface for you to work with.", 
            "title": "Users"
        }, 
        {
            "location": "/ios/users/#user-update", 
            "text": "When user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.  Update Username:  let   username   =   a new username  AFUser . updateUserName ( username :   username ,   completion :   {   ( error )   in \n   if   error   !=   nil   { \n     //update failed \n   }   else   { \n     //update successful \n   }  })   Update User Avatar:  let   avatarURL   =   https://someavatar.jpg  AFUser . updateUserAvatar ( avatar :   avatarURL ,   completion :   {   ( error )   in \n   if   error   !=   nil   { \n     //update failed \n   }   else   { \n     //update successful \n   }  })", 
            "title": "User Update"
        }, 
        {
            "location": "/ios/users/#fetch-information-of-an-user", 
            "text": "You can fetch the information of an user.  AFUser . getUser ( userID :   userID ,   completion :   {   ( user ,   error )   in \n                if   error   !=   nil   { \n                    // get user failed \n                }   else   { \n                    // fetch successful, you can now use the returned user object \n                } \n            })", 
            "title": "Fetch Information of an User"
        }, 
        {
            "location": "/ios/users/#blockunblock", 
            "text": "An user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:  AFUser . blockUser ( userID :   userID ,   completion :   {   ( error )   in \n                         if   let   err   =   error   { \n                             // block user failed \n                         } \n                         else   { \n                             // block user successful \n                         } \n                     })   Unblock a user:  AFUser . unblockUser ( userID :   userID ,   completion :   {   ( error )   in \n                         if   let   err   =   error   { \n                             // unblock user failed \n                         } \n                         else   { \n                             // unblock user successful \n                         } \n                     })", 
            "title": "Block/Unblock"
        }, 
        {
            "location": "/ios/dialogs/", 
            "text": "There are three types of dialogs. Depending on your use case, please choose the appropriate type to use:\n\n\n\n\nPrivate one on one dialog. This is a conversation between two users. You can't add more users to private one on one dialog. This type of dialog is only visible to the two users.\n\n\nPrivate group dialog. This is a conversation between multiple users. You can add up to a few hundred users to a private group chat. This type of dialog is only visible to users in the group.\n\n\nOpen channel dialog. This is an open conversation. It is visible to everyone. You can add up to a few thousand users to an open channel. Each user can only be in one channel at a time.\n\n\n\n\n\n\n\n\n\n\nFeature Type\n\n\nOpen Channels\n\n\nPrivate Group Chat\n\n\nOne on One Private Chat\n\n\n\n\n\n\n\n\n\n\nTyping Indicator\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMessage Delivery Receipts\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMessage Read Receipts\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nVideo and Image\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nCreate in app\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nCreate in control panel\n\n\n\u2714\n\n\n\u2718\n\n\n\u2718\n\n\n\n\n\n\nMute\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nBlocks user\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nPush notifications\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMembers limit\n\n\n5000\n\n\n100\n\n\n2\n\n\n\n\n\n\n\n\nOpen Channels\n\n\nOpen channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with \nGET /channels\n API. A user can only be inside one channel at a time.\n\n\nList all channels:\n\n\nAFDialog\n.\ngetChannels\n \n{\n \n(\ndialogs\n,\n \nerror\n)\n \nin\n\n\n}\n\n\n\n\n\n\nThe easiest way to use open channel is by using \nHCChannelChatViewController\n.\n\n\nlet\n \nchannelChatVC\n \n=\n \nHCChannelChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n\n\n\n\n\nPrivate Dialogs\n\n\nListing All Private Dialogs\n\n\nAppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:\n\n\nAFDialog\n.\ngetDialogs\n \n{\n \n(\ndialogs\n,\n \nerror\n)\n \nin\n\n    \n// this returns an array of all the private dialogs of type AFDialog\n\n\n}\n\n\n\n\n\n\nGroup Dialog\n\n\nA group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:\n\n\nAFDialog\n.\ncreateGroupDialog\n(\ndialogID\n:\n \nid\n,\n \nmembers\n:\n \nusers\n,\n \ncustomData\n:\n \ndata\n,\n \npushData\n:\n \npushData\n,\n \ntitle\n:\n \ndialogTitle\n,\n \ncompletion\n:\n \n{\n \n(\nid\n,\n \nerror\n)\n \nin\n\n      \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n        \nself\n.\nshowErrorWithMessage\n(\nerror\n?.\nlocalizedDescription\n)\n\n      \n}\n \nelse\n \nif\n \nlet\n \ndialogID\n \n=\n \nid\n \n{\n\n        \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n        \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n      \n}\n\n\n})\n\n\n\n\n\n\nPlease note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app.\n\n\nIndividual Dialog\n\n\nAn individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:\n\n\nAFDialog\n.\ncreateIndividualDialog\n(\nwithUser\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\ndialogID\n,\n \nerror\n)\n \nin\n\n    \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n      \nself\n.\nshowErrorWithMessage\n(\nerror\n?.\nlocalizedDescription\n)\n\n    \n}\n \nelse\n \nif\n \nlet\n \ndialogID\n \n=\n \nid\n \n{\n\n      \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n      \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\nMute/Unmute\n\n\nYou can mute/unmute a dialog by:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nmute\n()\n\n\ndialog\n.\nunmute\n()\n\n\n\n\n\n\nBadge/Unread Messages\n\n\nThe total number of unread messages by the current user can be found by:\n\n\nlet\n \ntotalUnreadCount\n \n=\n \nAFDialog\n.\ntotalUnreadMessageCount\n()\n\n\n\n\n\n\nFor each dialog, the unread message can be found by using \nAFDialog: unreadMessageCount\n.\nWhen unread message count has updated, there will be notification \nAppFriendsUI.kTotalUnreadMessageCountChangedNotification\n. You can monitor the notification and update the badge on the app icon. eg.\n\n\n// register for notification\n\n\nNotificationCenter\n.\ndefault\n.\naddObserver\n(\nself\n,\n\n  \nselector\n:\n \n#selector\n(\nupdateBadge\n),\n\n  \nname\n:\n \nNSNotification\n.\nName\n(\nrawValue\n:\n \nAppFriendsUI\n.\nkTotalUnreadMessageCountChangedNotification\n),\n\n  \nobject\n:\n \nnil\n)\n\n\n\n// handle notification\n\n\nfunc\n \nupdateTabBarBadge\n(\n_\n \nnotification\n:\n \nNotification\n?)\n\n\n{\n\n  \nDispatchQueue\n.\nmain\n.\nasync\n(\nexecute\n:\n \n{\n\n\n      \nif\n \nlet\n \ncount\n \n=\n \nnotification\n?.\nobject\n \nas\n?\n \nInt\n \n{\n\n          \nUIApplication\n.\nshared\n.\napplicationIconBadgeNumber\n \n=\n \ncount\n\n      \n}\n\n  \n})\n\n\n}\n\n\n\n\n\n\nSending Messages\n\n\nSending text:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendText\n(\ntext\n:\n \ntext\n,\n \nrequireReceipt\n:\n \ntrue\n,\n \nmentionedUsers\n:\n \nmentionedIDs\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n      \nself\n.\ndidSendTextMessage\n()\n\n    \n}\n\n\n})\n\n\n\n\n\n\nSending an image:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendImage\n(\nimage\n:\n \nimage\n,\n \nrequireReceipt\n:\n \nfalse\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n},\n \nprogress\n:\n \n{\n \n(\npercentage\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nSending a video:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendVideo\n(\nvideoData\n:\n \nvideoData\n,\n \nrequireReceipt\n:\n \nself\n.\n_requireReceipt\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n},\n \nprogress\n:\n \n{\n \n(\npercentage\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nSending a gif\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendGif\n(\nurl\n:\n \nurl\n,\n \nrequireReceipt\n:\n \nfalse\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nMessage Receipts\n\n\nYou can check the receipts of a message by using \"AFMessage\" class:\n\n\n// message is an AFMessage object\n\n\nmessage\n.\ngetReceipts\n \n{\n \n(\nreceivedUserIDs\n,\n \nreadUserIDs\n,\n \nerror\n)\n \nin\n\n    \n// receivedUserIDs contains id\ns of the users who received message\n\n    \n// readUserIDs contains id\ns of the users who have read the message\n\n\n}\n\n\n\n\n\n\nSending Receipts:\n\n\n// message is an AFMessage object\n\n\nmessage\n.\nmarkAsRead\n()\n      \n// post read receipt\n\n\nmessage\n.\nmarkAsReceived\n()\n  \n// post received receipt", 
            "title": "Dialogs and Messaging"
        }, 
        {
            "location": "/ios/dialogs/#open-channels", 
            "text": "Open channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with  GET /channels  API. A user can only be inside one channel at a time.  List all channels:  AFDialog . getChannels   {   ( dialogs ,   error )   in  }   The easiest way to use open channel is by using  HCChannelChatViewController .  let   channelChatVC   =   HCChannelChatViewController ( dialogID :   dialogID )", 
            "title": "Open Channels"
        }, 
        {
            "location": "/ios/dialogs/#private-dialogs", 
            "text": "", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/ios/dialogs/#listing-all-private-dialogs", 
            "text": "AppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:  AFDialog . getDialogs   {   ( dialogs ,   error )   in \n     // this returns an array of all the private dialogs of type AFDialog  }", 
            "title": "Listing All Private Dialogs"
        }, 
        {
            "location": "/ios/dialogs/#group-dialog", 
            "text": "A group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:  AFDialog . createGroupDialog ( dialogID :   id ,   members :   users ,   customData :   data ,   pushData :   pushData ,   title :   dialogTitle ,   completion :   {   ( id ,   error )   in \n       if   error   !=   nil   { \n         self . showErrorWithMessage ( error ?. localizedDescription ) \n       }   else   if   let   dialogID   =   id   { \n         let   dialogVC   =   HCDialogChatViewController ( dialogID :   dialogID ) \n         self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n       }  })   Please note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app.", 
            "title": "Group Dialog"
        }, 
        {
            "location": "/ios/dialogs/#individual-dialog", 
            "text": "An individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:  AFDialog . createIndividualDialog ( withUser :   userID ,   completion :   {   ( dialogID ,   error )   in \n     if   error   !=   nil   { \n       self . showErrorWithMessage ( error ?. localizedDescription ) \n     }   else   if   let   dialogID   =   id   { \n       let   dialogVC   =   HCDialogChatViewController ( dialogID :   dialogID ) \n       self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n     }  })", 
            "title": "Individual Dialog"
        }, 
        {
            "location": "/ios/dialogs/#muteunmute", 
            "text": "You can mute/unmute a dialog by:  // dialog is an AFDialog instance  dialog . mute ()  dialog . unmute ()", 
            "title": "Mute/Unmute"
        }, 
        {
            "location": "/ios/dialogs/#badgeunread-messages", 
            "text": "The total number of unread messages by the current user can be found by:  let   totalUnreadCount   =   AFDialog . totalUnreadMessageCount ()   For each dialog, the unread message can be found by using  AFDialog: unreadMessageCount .\nWhen unread message count has updated, there will be notification  AppFriendsUI.kTotalUnreadMessageCountChangedNotification . You can monitor the notification and update the badge on the app icon. eg.  // register for notification  NotificationCenter . default . addObserver ( self , \n   selector :   #selector ( updateBadge ), \n   name :   NSNotification . Name ( rawValue :   AppFriendsUI . kTotalUnreadMessageCountChangedNotification ), \n   object :   nil )  // handle notification  func   updateTabBarBadge ( _   notification :   Notification ?)  { \n   DispatchQueue . main . async ( execute :   { \n\n       if   let   count   =   notification ?. object   as ?   Int   { \n           UIApplication . shared . applicationIconBadgeNumber   =   count \n       } \n   })  }", 
            "title": "Badge/Unread Messages"
        }, 
        {
            "location": "/ios/dialogs/#sending-messages", 
            "text": "Sending text:  // dialog is an AFDialog instance  dialog . sendText ( text :   text ,   requireReceipt :   true ,   mentionedUsers :   mentionedIDs ,   completion :   {   ( error )   in \n\n     if   error   ==   nil   { \n       self . didSendTextMessage () \n     }  })   Sending an image:  // dialog is an AFDialog instance  dialog . sendImage ( image :   image ,   requireReceipt :   false ,   completion :   {   ( error )   in  },   progress :   {   ( percentage )   in  })   Sending a video:  // dialog is an AFDialog instance  dialog . sendVideo ( videoData :   videoData ,   requireReceipt :   self . _requireReceipt ,   completion :   {   ( error )   in  },   progress :   {   ( percentage )   in  })   Sending a gif  // dialog is an AFDialog instance  dialog . sendGif ( url :   url ,   requireReceipt :   false ,   completion :   {   ( error )   in  })", 
            "title": "Sending Messages"
        }, 
        {
            "location": "/ios/dialogs/#message-receipts", 
            "text": "You can check the receipts of a message by using \"AFMessage\" class:  // message is an AFMessage object  message . getReceipts   {   ( receivedUserIDs ,   readUserIDs ,   error )   in \n     // receivedUserIDs contains id s of the users who received message \n     // readUserIDs contains id s of the users who have read the message  }   Sending Receipts:  // message is an AFMessage object  message . markAsRead ()        // post read receipt  message . markAsReceived ()    // post received receipt", 
            "title": "Message Receipts"
        }, 
        {
            "location": "/ios/push_notification/", 
            "text": "AppFriends can send push notification to the device when there's a new message for a user or if the user is mentioned in a channel chat. Push notification API is accessible via \nAFPushNotification\n class.\n\n\nRegister for Push\n\n\nTo enable push notification, you need to first register the push token with AppFriends:\n\n\nAFPushNotification\n.\nregisterDeviceForPushNotification\n(\npushToken\n:\n \npushToken\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n})\n\n\n\n\n\n\nUnregister for Push\n\n\nTo unregister push notification:\n\n\nAFPushNotification\n.\nunregisterDeviceForPushNotification\n(\npushToken\n:\n \npushToken\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n})\n\n\n\n\n\n\nProcess Push\n\n\nAfter you received remote push notification, please pass it to the SDK for better user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.\n\n\n// true if AppFriends SDK used the push notification\n\n\nlet\n \npushHandled\n \n=\n \nAFPushNotification\n.\nprocessPushNotification\n(\nnotificationUserInfo\n:\n \nuserInfo\n)", 
            "title": "Push Notification"
        }, 
        {
            "location": "/ios/push_notification/#register-for-push", 
            "text": "To enable push notification, you need to first register the push token with AppFriends:  AFPushNotification . registerDeviceForPushNotification ( pushToken :   pushToken ,   completion :   {   ( error )   in  })", 
            "title": "Register for Push"
        }, 
        {
            "location": "/ios/push_notification/#unregister-for-push", 
            "text": "To unregister push notification:  AFPushNotification . unregisterDeviceForPushNotification ( pushToken :   pushToken ,   completion :   {   ( error )   in  })", 
            "title": "Unregister for Push"
        }, 
        {
            "location": "/ios/push_notification/#process-push", 
            "text": "After you received remote push notification, please pass it to the SDK for better user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.  // true if AppFriends SDK used the push notification  let   pushHandled   =   AFPushNotification . processPushNotification ( notificationUserInfo :   userInfo )", 
            "title": "Process Push"
        }, 
        {
            "location": "/ios/events/", 
            "text": "Events\n\n\nYour app can subscribe to events from AppFriends using \nAFEvent\n class and its API. Objects that implement \nAFEventSubscriber\n protocol can subscribe to AppFriends events.\n\n\nSubscribe to AppFriends Events\n\n\nTo get notified by AppFriends about events, you can subscribe to the event postings by:\n\n\n// subscribe, we will only hold a weak reference to subscriber\n\n\nAFEvent\n.\nsubscribe\n(\nsubscriber\n:\n \nself\n)\n\n\n\n// unsubscribe\n\n\nAFEvent\n.\nunsubscribe\n(\nsubscriber\n:\n \nself\n)\n\n\n\n\n\n\nProcess Event\n\n\nTo process posted events, please implement\n\n\nfunc\n \nemitEvent\n(\n_\n \nevent\n:\n \nAFEvent\n)\n \n{\n\n  \nif\n \neventName\n \n==\n \n.\neventTypingStatusUpdated\n \n{\n\n    \nlet\n \ntypingStatus\n \n=\n \nevent\n.\ndata\n \nas\n?\n \nAFTypingStatus\n \n{\n\n      \n// process typing event\n\n    \n}\n\n  \n}\n \nelse\n \nif\n\n    \n...\n\n\n}\n\n\n\n\n\n\nEach \nAFEvent\n object contains an event name and a data object. The type of the data object depends on the type of event. For example, an \nAFEventName.eventDialogUpdated\n event will contain an \nAFDialog\n\n\nEvent List\n\n\n\n\n\n\n\n\nEvent name\n\n\nData\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n.eventDialogCreated\n\n\nAFDialog\n object\n\n\ndialog created, the newly created dialog will be the data\n\n\n\n\n\n\n.eventDialogLeft\n\n\nAFDialog\n object\n\n\nthe current user has left the dialog\n\n\n\n\n\n\n.eventDialogUpdated\n\n\nAFDialog\n object\n\n\ndialog updated, the dialog that is updated will be the data\n\n\n\n\n\n\n.eventTypingStatusUpdated\n\n\nAFTypingStatus\n object\n\n\ntyping status updated, the \nAFTypingStatus\n object will be the data\n\n\n\n\n\n\n.eventMessageReceived\n\n\nAFMessage\n object\n\n\nnew message received, the new \nAFMessage\n object will be the data\n\n\n\n\n\n\n.eventUserSelected\n\n\nString\n userID\n\n\nuser selected by the user from within the AppFriends UI. You can use this event to open user profile in your app.", 
            "title": "Events"
        }, 
        {
            "location": "/ios/events/#events", 
            "text": "Your app can subscribe to events from AppFriends using  AFEvent  class and its API. Objects that implement  AFEventSubscriber  protocol can subscribe to AppFriends events.", 
            "title": "Events"
        }, 
        {
            "location": "/ios/events/#subscribe-to-appfriends-events", 
            "text": "To get notified by AppFriends about events, you can subscribe to the event postings by:  // subscribe, we will only hold a weak reference to subscriber  AFEvent . subscribe ( subscriber :   self )  // unsubscribe  AFEvent . unsubscribe ( subscriber :   self )", 
            "title": "Subscribe to AppFriends Events"
        }, 
        {
            "location": "/ios/events/#process-event", 
            "text": "To process posted events, please implement  func   emitEvent ( _   event :   AFEvent )   { \n   if   eventName   ==   . eventTypingStatusUpdated   { \n     let   typingStatus   =   event . data   as ?   AFTypingStatus   { \n       // process typing event \n     } \n   }   else   if \n     ...  }   Each  AFEvent  object contains an event name and a data object. The type of the data object depends on the type of event. For example, an  AFEventName.eventDialogUpdated  event will contain an  AFDialog", 
            "title": "Process Event"
        }, 
        {
            "location": "/ios/events/#event-list", 
            "text": "Event name  Data  Description      .eventDialogCreated  AFDialog  object  dialog created, the newly created dialog will be the data    .eventDialogLeft  AFDialog  object  the current user has left the dialog    .eventDialogUpdated  AFDialog  object  dialog updated, the dialog that is updated will be the data    .eventTypingStatusUpdated  AFTypingStatus  object  typing status updated, the  AFTypingStatus  object will be the data    .eventMessageReceived  AFMessage  object  new message received, the new  AFMessage  object will be the data    .eventUserSelected  String  userID  user selected by the user from within the AppFriends UI. You can use this event to open user profile in your app.", 
            "title": "Event List"
        }, 
        {
            "location": "/ios/ui_components/", 
            "text": "UI Components and Customization\n\n\nAppFriendsUI\n provides a lot of useful and convenient UI components for you to use. It can save a lot of your time developing the app. Our \ndemo app\n takes full advantage of the \nAppFriendsUI\n. You could clone the demo app repo from github to see how it uses, interact and customizes the UI components provided by \nAppFriendsUI\n.\n\n\nBasic Customization\n\n\nHCUIConfiguration\n gives you easy access to customize AppFriends UI components. For example, if you want to change the background color of the chat view, you can simply do it by changing the value of \nHCColorPalette.chatBackgroundColor\n\n\nList of Customizable Values\n\n\n\n\n\n\n\n\nHCSettingsConfiguation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nbadgeDisplayIfMuted\n\n\nBoolean\n\n\nfalse\n\n\nturn this to true if you want to keep badge for a conversation after it's muted.\n\n\n\n\n\n\nshowNewMessageLine\n\n\nBoolean\n\n\ntrue\n\n\nswitch for new message line display on private dialogs\n\n\n\n\n\n\nsupportedMessageTypes\n\n\nChatSupportedMessageDataTypes\n\n\n.all\n\n\nThe types of messages you want to support in your chat. This value will apply to all chat. You can also change the types of messages you want to support for each dialog when you initialize the chat view\n\n\n\n\n\n\ngifContentRating\n\n\nAFGifContentRating\n\n\n.parentalGuide13\n\n\nchange this value to control the gif\n\n\n\n\n\n\nshowDialogAlbum\n\n\nBoolean\n\n\ntrue\n\n\nchange to false if you don't want to show the dialog album\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHCFont\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nsegmentSelectorFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nsegmented control button title font\n\n\n\n\n\n\nchatCellContentFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat message content text font\n\n\n\n\n\n\nchatCellSystemMessageFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat system message content text font\n\n\n\n\n\n\nboldButtonFont\n\n\nUIFont\n\n\nUIFont.boldSystemFont(ofSize: 16)\n\n\nbutton bold font\n\n\n\n\n\n\ndialogSettingFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\ndialog setting UI text font\n\n\n\n\n\n\nnavigationBarTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 17)\n\n\nnavigation bar title font\n\n\n\n\n\n\nchatDialogListSectionTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\ndialog list section title font\n\n\n\n\n\n\nchatTimestampFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 13)\n\n\nchat message time label\n\n\n\n\n\n\nchatDateLabelFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat system date label\n\n\n\n\n\n\nlocationTitleFont\n\n\nUIFont\n\n\nUIFont.boldSystemFont(ofSize: 16)\n\n\nlocation message title font\n\n\n\n\n\n\nlocationSubtitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nlocation message description label font\n\n\n\n\n\n\nemptyTableLabelFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nthe font for the label to use when the table is empty\n\n\n\n\n\n\nalbumSectionTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nalbum date title label font\n\n\n\n\n\n\n\n\nAlbum\n\n\nAlbum is a feature including UI components which group all the images and videos sent inside a dialog in chronological order.\nTo display the album UI, simply use the HCAlbumViewController:\n\n\nlet\n \nalbumVC\n \n=\n \nHCAlbumViewController\n(\ndialogID\n:\n \n[\ndialog\n \nid\n]])\n\n\nself\n.\nnavigationController\n?.\npushViewController\n(\nalbumVC\n,\n \nanimated\n:\n \ntrue\n)\n\n\n\n\n\n\nThere are some UI configuration you can do on the \nHCAlbumViewController\n:\n\n\n\n\n\n\n\n\nHCColorPalette\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nalbumBackgroundColor\n\n\nUIColor\n\n\n#252326 alpha:0.5\n\n\nalbum view background color\n\n\n\n\n\n\nalbumSectionBackgroundColor\n\n\nUIColor\n\n\n#252326\n\n\nalbum section background color\n\n\n\n\n\n\nalbumNavigationBarIconColor\n\n\nUIColor\n\n\n#ffffff alpha:0.9\n\n\nalbum navigationbar icon color\n\n\n\n\n\n\nalbumNavigationBarTitleColor\n\n\nUIColor\n\n\nwhite\n\n\nalbum navigationbar title color\n\n\n\n\n\n\nalbumNavigationBackgroundColor\n\n\nUIColor\n\n\n#252326\n\n\nalbum navigation background color\n\n\n\n\n\n\nalbumSectionTitleColor\n\n\nUIColor\n\n\nwhite\n\n\nalbum section view background color", 
            "title": "UI Components & Customization"
        }, 
        {
            "location": "/ios/ui_components/#ui-components-and-customization", 
            "text": "AppFriendsUI  provides a lot of useful and convenient UI components for you to use. It can save a lot of your time developing the app. Our  demo app  takes full advantage of the  AppFriendsUI . You could clone the demo app repo from github to see how it uses, interact and customizes the UI components provided by  AppFriendsUI .", 
            "title": "UI Components and Customization"
        }, 
        {
            "location": "/ios/ui_components/#basic-customization", 
            "text": "HCUIConfiguration  gives you easy access to customize AppFriends UI components. For example, if you want to change the background color of the chat view, you can simply do it by changing the value of  HCColorPalette.chatBackgroundColor", 
            "title": "Basic Customization"
        }, 
        {
            "location": "/ios/ui_components/#list-of-customizable-values", 
            "text": "HCSettingsConfiguation         Variable Name  Type  Default Value  Description    badgeDisplayIfMuted  Boolean  false  turn this to true if you want to keep badge for a conversation after it's muted.    showNewMessageLine  Boolean  true  switch for new message line display on private dialogs    supportedMessageTypes  ChatSupportedMessageDataTypes  .all  The types of messages you want to support in your chat. This value will apply to all chat. You can also change the types of messages you want to support for each dialog when you initialize the chat view    gifContentRating  AFGifContentRating  .parentalGuide13  change this value to control the gif    showDialogAlbum  Boolean  true  change to false if you don't want to show the dialog album        HCFont         Variable Name  Type  Default Value  Description    segmentSelectorFont  UIFont  UIFont.systemFont(ofSize: 15)  segmented control button title font    chatCellContentFont  UIFont  UIFont.systemFont(ofSize: 15)  chat message content text font    chatCellSystemMessageFont  UIFont  UIFont.systemFont(ofSize: 15)  chat system message content text font    boldButtonFont  UIFont  UIFont.boldSystemFont(ofSize: 16)  button bold font    dialogSettingFont  UIFont  UIFont.systemFont(ofSize: 15)  dialog setting UI text font    navigationBarTitleFont  UIFont  UIFont.systemFont(ofSize: 17)  navigation bar title font    chatDialogListSectionTitleFont  UIFont  UIFont.systemFont(ofSize: 15)  dialog list section title font    chatTimestampFont  UIFont  UIFont.systemFont(ofSize: 13)  chat message time label    chatDateLabelFont  UIFont  UIFont.systemFont(ofSize: 15)  chat system date label    locationTitleFont  UIFont  UIFont.boldSystemFont(ofSize: 16)  location message title font    locationSubtitleFont  UIFont  UIFont.systemFont(ofSize: 15)  location message description label font    emptyTableLabelFont  UIFont  UIFont.systemFont(ofSize: 15)  the font for the label to use when the table is empty    albumSectionTitleFont  UIFont  UIFont.systemFont(ofSize: 15)  album date title label font", 
            "title": "List of Customizable Values"
        }, 
        {
            "location": "/ios/ui_components/#album", 
            "text": "Album is a feature including UI components which group all the images and videos sent inside a dialog in chronological order.\nTo display the album UI, simply use the HCAlbumViewController:  let   albumVC   =   HCAlbumViewController ( dialogID :   [ dialog   id ]])  self . navigationController ?. pushViewController ( albumVC ,   animated :   true )   There are some UI configuration you can do on the  HCAlbumViewController :     HCColorPalette         Variable Name  Type  Default Value  Description    albumBackgroundColor  UIColor  #252326 alpha:0.5  album view background color    albumSectionBackgroundColor  UIColor  #252326  album section background color    albumNavigationBarIconColor  UIColor  #ffffff alpha:0.9  album navigationbar icon color    albumNavigationBarTitleColor  UIColor  white  album navigationbar title color    albumNavigationBackgroundColor  UIColor  #252326  album navigation background color    albumSectionTitleColor  UIColor  white  album section view background color", 
            "title": "Album"
        }, 
        {
            "location": "/ios/dependencies/", 
            "text": "Dependencies List\n\n\nAppFriends SDKs have several external dependencies with open source libraries. We are committed to always update our SDK to be compatible the latest version of the dependencies\n\n\n\n\n\n\n\n\nDependencies\n\n\nLicense Type\n\n\nAppFriendsCore\n\n\nAppFriendsUI\n\n\nVersion (swift3.0)\n\n\nVersion (swift3.1)\n\n\n\n\n\n\n\n\n\n\nAlamofire\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 4.0.1\n\n\n~\n 4.0.1\n\n\n\n\n\n\nJWT\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 2.1.0\n\n\n~\n 2.1.0\n\n\n\n\n\n\nCoreStore\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 2.1.3\n\n\n~\n 2.1.3\n\n\n\n\n\n\nCloudinary\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 1.0.15\n\n\n~\n 1.0.15\n\n\n\n\n\n\nSocket.IO-Client-Swift\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 8.1.1\n\n\n~\n 8.1.1\n\n\n\n\n\n\nSlackTextViewController\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 1.9.5\n\n\n~\n 1.9.5\n\n\n\n\n\n\nCLTokenInputView\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 2.3.0\n\n\n~\n 2.3.0\n\n\n\n\n\n\nSESlideTableViewCell\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 0.7.1\n\n\n~\n 0.7.1\n\n\n\n\n\n\nAFDateHelper\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 3.5.3\n\n\n~\n 3.5.3\n\n\n\n\n\n\nAlamofireImage\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 3.1.0\n\n\n~\n 3.1.0", 
            "title": "External Dependencies"
        }, 
        {
            "location": "/ios/dependencies/#dependencies-list", 
            "text": "AppFriends SDKs have several external dependencies with open source libraries. We are committed to always update our SDK to be compatible the latest version of the dependencies     Dependencies  License Type  AppFriendsCore  AppFriendsUI  Version (swift3.0)  Version (swift3.1)      Alamofire  MIT  \u2714  \u2714  ~  4.0.1  ~  4.0.1    JWT  MIT  \u2714  \u2714  ~  2.1.0  ~  2.1.0    CoreStore  MIT  \u2714  \u2714  ~  2.1.3  ~  2.1.3    Cloudinary  MIT  \u2714  \u2714  ~  1.0.15  ~  1.0.15    Socket.IO-Client-Swift  MIT  \u2714  \u2714  ~  8.1.1  ~  8.1.1    SlackTextViewController  MIT  \u2718  \u2714  ~  1.9.5  ~  1.9.5    CLTokenInputView  MIT  \u2718  \u2714  ~  2.3.0  ~  2.3.0    SESlideTableViewCell  MIT  \u2718  \u2714  ~  0.7.1  ~  0.7.1    AFDateHelper  MIT  \u2718  \u2714  ~  3.5.3  ~  3.5.3    AlamofireImage  MIT  \u2718  \u2714  ~  3.1.0  ~  3.1.0", 
            "title": "Dependencies List"
        }, 
        {
            "location": "/ios/error/", 
            "text": "Errors\n\n\nAppFriends errors are managed with \nAFError\n class and API.\n\n\n\n\n\n\n\n\nError Code\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n90000\n\n\n.unknownError\n\n\nAn unknown error has occurred\n\n\n\n\n\n\n90001\n\n\n.invalidParams\n\n\nInvalid parameters supplied\n\n\n\n\n\n\n90002\n\n\n.sdkNotInitialized\n\n\nSDK is not initialized properly\n\n\n\n\n\n\n90003\n\n\n.userNotLoggedIn\n\n\nNeed to login first\n\n\n\n\n\n\n20005\n\n\n.dialogNotFound\n\n\nDialog is not found\n\n\n\n\n\n\n90007\n\n\n.userAlreadyLoggedIn\n\n\nTrying to login while there's already an user logged in\n\n\n\n\n\n\n90009\n\n\n.logoutWhenNotLoggedIn\n\n\nTrying to logout while there isn't any user logged in\n\n\n\n\n\n\n90500\n\n\n.serverError\n\n\nServer error\n\n\n\n\n\n\n30001\n\n\n.userNotFound\n\n\nUser not found\n\n\n\n\n\n\n91000\n\n\n.requestIsTooFrequent\n\n\nRequest is too frequent", 
            "title": "Errors"
        }, 
        {
            "location": "/ios/error/#errors", 
            "text": "AppFriends errors are managed with  AFError  class and API.     Error Code  Type  Description      90000  .unknownError  An unknown error has occurred    90001  .invalidParams  Invalid parameters supplied    90002  .sdkNotInitialized  SDK is not initialized properly    90003  .userNotLoggedIn  Need to login first    20005  .dialogNotFound  Dialog is not found    90007  .userAlreadyLoggedIn  Trying to login while there's already an user logged in    90009  .logoutWhenNotLoggedIn  Trying to logout while there isn't any user logged in    90500  .serverError  Server error    30001  .userNotFound  User not found    91000  .requestIsTooFrequent  Request is too frequent", 
            "title": "Errors"
        }, 
        {
            "location": "/android/quick_start/", 
            "text": "AppFriends Android SDK\n\n\nDemo App\n\n\nA simple demo app showing the integrated AppFriends SDK is available at: \nDemo\n.\n\n\nIntegration\n\n\nMaven / jCenter / Bintray\n\n\nTo integrate AppFriends Android SDK to your Android Studio project, add the\nfollowing to your application's \nbuild.gradle\n file:\n\n\nProject Level Gradle\n\n\nallprojects {\n    repositories {\n        jcenter()\n        maven { url \nhttps://jitpack.io\n }\n    }\n}\n\n\n\n\n\nApp Level Gradle\n\n\nrepositories {\n    maven {\n        url \nhttps://dl.bintray.com/appfriends/maven/\n\n    }\n}\n\ndependencies {\n    // AppFriends\n    compile \nme.appfriends.sdk:ui:3.0.5\n\n}\n\n\n\n\n\nIf your application uses a version of the Android support libraries that results in conflicts, you can force Gradle to build with your version with:\n\n\ncompile (\ncom.android.support:support-v4:23.4.0\n){\n  force = true;\n}\n\n\n\n\n\nInitialization\n\n\nAfter logging into your admin panel, and created your application, you can find your \nApp ID\n and \nApp Secret\n. Add them to your \nAndroidManifest.xml\n file under \napplication\n.\n\n\nmeta-data\n    android:name=\nme.appfriends.AppID\n\n    android:value=\n[APPFRIENDS_ID]\n /\n\n\n\nmeta-data\n    android:name=\nme.appfriends.AppSecret\n\n    android:value=\n[APPFRIENDS_SECRET]\n /\n\n\n\n\n\n\nAppFriends SDK and the corresponding UI Kit must be initialized prior to usage. In your custom \nApplication\n class, you have the option to customize the AppFriends SDK with \nAppFriendsConfiguration.Builder\n. You must call \nAppFriendsUIKit.init(this, configuration);\n to properly initialize the SDK:\n\n\npublic class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        AppFriendsConfiguration configuration =\n          new AppFriendsConfiguration.Builder()\n                                     .gravity(Gravity.RIGHT) // Which way the widget should open from\n                                     .build();\n\n        AppFriendsUIKit.init(this, configuration);\n    }\n}\n\n\n\n\n\nUser Authentication\n\n\nBefore your users can start enjoying AppFriends, they need to have an\nAppFriends account. Login the user by invoking:\n\n\nAppFriends.login(userID, username, avatarURL, userEmail);\n\n\n\n\n\nwhere the parameters as as follows:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuserID\n\n\nString\n\n\nthe user's userID in your own app.\n\n\n\n\n\n\nusername\n\n\nString\n\n\nthe username\n\n\n\n\n\n\navatarURL\n\n\nString\n\n\nthe full URL of the user's avatar\n\n\n\n\n\n\nuserEmail\n\n\nString\n\n\nuser's email address\n\n\n\n\n\n\n\n\nDisplay Widget Bubble\n\n\nTo add the default widget icon to your \nActivity\n or \nFragment\n, add the\nfollowing to your \nlayout xml\n:\n\n\nme.appfriends.android.widget.AppFriendsWidget\n    android:id=\n@+id/appfriends_icon\n\n    android:layout_width=\nwrap_content\n\n    android:layout_height=\nwrap_content\n\n    app:bragIcon=\n[Custom Brag Icon Drawable]\n\n    app:deeplink=\n[Deeplink]\n/\n\n\n\n\n\n\nYou may specify the \"brag\" icon (which allows users to share a screenshot) and the deeplink path of the current fragment/activity.\n\n\nThe AppFriends Android SDK should now be integrated and ready to go!\n\n\nStyling\n\n\nAppFriends Android UI Kit will soon support customizing the UI matching your app's style, stay tuned for an update.\n\n\nDeeplinks\n\n\nWhen a user shares screenshot from your app, a deeplink will be generated and shared with the screenshot. If the screenshot is taken from a place you have assign a path and parameters to, the information will also be included in the deeplink. When users clicks on the deeplink and install/open the app, we will trigger the callback with the path and parameters you provided.\n\n\nTo receive deeplink actions, you need to implement the \nOnAppFriendsNotificationListener\n interface register the listener with the UI Kit:\n\n\n  AppFriendsUIKit.addOnAppFriendsNotificationListener(new OnAppFriendsNotificationListener() {\n      @Override\n      public boolean onDeeplinkClicked(String deeplink) {\n          // Perform deeplink action\n          return true; // If handled, return true\n      }\n  });\n\n\n\n\n\nPublic Chat Channels\n\n\nBy default, we create a global public chat channel for all of your users to chat. You can create, edit and remove public chat channels. You can either do it from the AppFriends admin panel or via our \nAPI\n.\n\n\nOther dependencies\n\n\nhttps://github.com/splitwise/TokenAutoComplete", 
            "title": "Quick Start"
        }, 
        {
            "location": "/android/quick_start/#appfriends-android-sdk", 
            "text": "", 
            "title": "AppFriends Android SDK"
        }, 
        {
            "location": "/android/quick_start/#demo-app", 
            "text": "A simple demo app showing the integrated AppFriends SDK is available at:  Demo .", 
            "title": "Demo App"
        }, 
        {
            "location": "/android/quick_start/#integration", 
            "text": "", 
            "title": "Integration"
        }, 
        {
            "location": "/android/quick_start/#maven-jcenter-bintray", 
            "text": "To integrate AppFriends Android SDK to your Android Studio project, add the\nfollowing to your application's  build.gradle  file:", 
            "title": "Maven / jCenter / Bintray"
        }, 
        {
            "location": "/android/quick_start/#project-level-gradle", 
            "text": "allprojects {\n    repositories {\n        jcenter()\n        maven { url  https://jitpack.io  }\n    }\n}", 
            "title": "Project Level Gradle"
        }, 
        {
            "location": "/android/quick_start/#app-level-gradle", 
            "text": "repositories {\n    maven {\n        url  https://dl.bintray.com/appfriends/maven/ \n    }\n}\n\ndependencies {\n    // AppFriends\n    compile  me.appfriends.sdk:ui:3.0.5 \n}  If your application uses a version of the Android support libraries that results in conflicts, you can force Gradle to build with your version with:  compile ( com.android.support:support-v4:23.4.0 ){\n  force = true;\n}", 
            "title": "App Level Gradle"
        }, 
        {
            "location": "/android/quick_start/#initialization", 
            "text": "After logging into your admin panel, and created your application, you can find your  App ID  and  App Secret . Add them to your  AndroidManifest.xml  file under  application .  meta-data\n    android:name= me.appfriends.AppID \n    android:value= [APPFRIENDS_ID]  /  meta-data\n    android:name= me.appfriends.AppSecret \n    android:value= [APPFRIENDS_SECRET]  /   AppFriends SDK and the corresponding UI Kit must be initialized prior to usage. In your custom  Application  class, you have the option to customize the AppFriends SDK with  AppFriendsConfiguration.Builder . You must call  AppFriendsUIKit.init(this, configuration);  to properly initialize the SDK:  public class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        AppFriendsConfiguration configuration =\n          new AppFriendsConfiguration.Builder()\n                                     .gravity(Gravity.RIGHT) // Which way the widget should open from\n                                     .build();\n\n        AppFriendsUIKit.init(this, configuration);\n    }\n}", 
            "title": "Initialization"
        }, 
        {
            "location": "/android/quick_start/#user-authentication", 
            "text": "Before your users can start enjoying AppFriends, they need to have an\nAppFriends account. Login the user by invoking:  AppFriends.login(userID, username, avatarURL, userEmail);  where the parameters as as follows:     Parameter  Type  Description      userID  String  the user's userID in your own app.    username  String  the username    avatarURL  String  the full URL of the user's avatar    userEmail  String  user's email address", 
            "title": "User Authentication"
        }, 
        {
            "location": "/android/quick_start/#display-widget-bubble", 
            "text": "To add the default widget icon to your  Activity  or  Fragment , add the\nfollowing to your  layout xml :  me.appfriends.android.widget.AppFriendsWidget\n    android:id= @+id/appfriends_icon \n    android:layout_width= wrap_content \n    android:layout_height= wrap_content \n    app:bragIcon= [Custom Brag Icon Drawable] \n    app:deeplink= [Deeplink] /   You may specify the \"brag\" icon (which allows users to share a screenshot) and the deeplink path of the current fragment/activity.  The AppFriends Android SDK should now be integrated and ready to go!", 
            "title": "Display Widget Bubble"
        }, 
        {
            "location": "/android/quick_start/#styling", 
            "text": "AppFriends Android UI Kit will soon support customizing the UI matching your app's style, stay tuned for an update.", 
            "title": "Styling"
        }, 
        {
            "location": "/android/quick_start/#deeplinks", 
            "text": "When a user shares screenshot from your app, a deeplink will be generated and shared with the screenshot. If the screenshot is taken from a place you have assign a path and parameters to, the information will also be included in the deeplink. When users clicks on the deeplink and install/open the app, we will trigger the callback with the path and parameters you provided.  To receive deeplink actions, you need to implement the  OnAppFriendsNotificationListener  interface register the listener with the UI Kit:    AppFriendsUIKit.addOnAppFriendsNotificationListener(new OnAppFriendsNotificationListener() {\n      @Override\n      public boolean onDeeplinkClicked(String deeplink) {\n          // Perform deeplink action\n          return true; // If handled, return true\n      }\n  });", 
            "title": "Deeplinks"
        }, 
        {
            "location": "/android/quick_start/#public-chat-channels", 
            "text": "By default, we create a global public chat channel for all of your users to chat. You can create, edit and remove public chat channels. You can either do it from the AppFriends admin panel or via our  API .", 
            "title": "Public Chat Channels"
        }, 
        {
            "location": "/android/quick_start/#other-dependencies", 
            "text": "https://github.com/splitwise/TokenAutoComplete", 
            "title": "Other dependencies"
        }, 
        {
            "location": "/android/customization/", 
            "text": "AppFriends UI Customization\n\n\nYou can override values to customize the UI.\n\n\nColors\n\n\n!-- Messages --\n\n\ncolor name=\nmessage_date_title_color\n[color of the date label of the messages]\n/color\n\n\ncolor name=\nmessage_sender_name_color\n[color of the sender\ns name label of the messages]\n/color\n\n\ncolor name=\nmessage_in_bubble_color\n[color of the message bubble of incoming messages]\n/color\n\n\ncolor name=\nmessage_out_bubble_color\n[color of the message bubble of outgoing messages]\n/color\n\n\ncolor name=\nmessage_in_text_color\n[color of the message text of incoming messages]\n/color\n\n\ncolor name=\nmessage_out_text_color\n[color of the message text of incoming messages]\n/color\n\n\ncolor name=\nmessage_system_text_color\n[color of the system message text of incoming messages]\n/color\n\n\ncolor name=\nmessage_composer_attachment_icon_color\n[color of the attachment select icon on message composer]\n/color\n\n\ncolor name=\nmessage_composer_color\n[color of the background message composer]\n/color\n\n\ncolor name=\nmessage_image_background_color\n[color of the image message background]\n/color\n\n\n\n!-- Other Colors --\n\n\ncolor name=\nunselected_tab\n#80ffffff\n/color\n\n\ncolor name=\nitem_divider\n#e5e5e5\n/color\n\n\ncolor name=\nmain_background_color\n#fff\n/color\n\n\ncolor name=\nnav_bar_background_color\n@color/blue\n/color\n\n\ncolor name=\nnav_bar_icon_color\n#fff\n/color\n\n\ncolor name=\ncontact_token_color\n#45a0dd\n/color\n\n\ncolor name=\ncontact_checkbox_color\n#45a0dd\n/color\n\n\ncolor name=\navatar_background_color\n@color/cool_gray\n/color\n\n\ncolor name=\navatar_icon_color\n@color/white\n/color\n\n\ncolor name=\nedit_text_background\n@color/white\n/color\n\n\ncolor name=\nic_table_row_icons\n#a9b4be\n/color\n\n\n\n\n\n\nString Values\n\n\nstring name=\nSELECT_GALLERY\nChoose from Gallery\n/string\n\n\nstring name=\nSELECT_IMAGE_CAMERA\nTake new photo\n/string\n\n\nstring name=\nSELECT_IMAGE_VIDEO\nTake Video\n/string\n\n\nstring name=\nCANCEL\nCancel\n/string\nstring name=\nmessage_preview_image\n[image]\n/string\n\n\nstring name=\nmessage_preview_video\n[video]\n/string\n\n\nstring name=\nclipboard_description\nMessage\n/string\n\n\nstring name=\ncopied_to_clipboard\nCopied to clipboard\n/string\n\n\nstring name=\nmessage_composer_hint\nEdit Message...\n/string\n\n\nstring name=\nmessage_composer_send_button\nSend\n/string\n\n\nstring name=\nmessage_settings\nMessage Settings\n/string\n\n\nstring name=\nicon_settings_string\n{md-settings}\n/string\n\n\nstring name=\nleave_conversation\nLeave Conversation\n/string\n\n\nstring name=\ntitle_activity_image_viewer\nImageViewerActivity\n/string\n\n\nstring name=\nfile_size_upload_too_big\nfile size is too big\n/string\n\n\nstring name=\nsorry\nsorry\n/string\n\n\n\n!-- Permission Checking --\n\n\nstring name=\npermission_error_title\nNo Permission\n/string\n\n\nstring name=\npermission_error_camera\nPlease grant camera permission\n/string\n\n\nstring name=\npermission_error_gallery\nPlease grant access to read your image gallery\n/string", 
            "title": "UI Customization"
        }, 
        {
            "location": "/android/customization/#appfriends-ui-customization", 
            "text": "You can override values to customize the UI.", 
            "title": "AppFriends UI Customization"
        }, 
        {
            "location": "/android/customization/#colors", 
            "text": "!-- Messages --  color name= message_date_title_color [color of the date label of the messages] /color  color name= message_sender_name_color [color of the sender s name label of the messages] /color  color name= message_in_bubble_color [color of the message bubble of incoming messages] /color  color name= message_out_bubble_color [color of the message bubble of outgoing messages] /color  color name= message_in_text_color [color of the message text of incoming messages] /color  color name= message_out_text_color [color of the message text of incoming messages] /color  color name= message_system_text_color [color of the system message text of incoming messages] /color  color name= message_composer_attachment_icon_color [color of the attachment select icon on message composer] /color  color name= message_composer_color [color of the background message composer] /color  color name= message_image_background_color [color of the image message background] /color  !-- Other Colors --  color name= unselected_tab #80ffffff /color  color name= item_divider #e5e5e5 /color  color name= main_background_color #fff /color  color name= nav_bar_background_color @color/blue /color  color name= nav_bar_icon_color #fff /color  color name= contact_token_color #45a0dd /color  color name= contact_checkbox_color #45a0dd /color  color name= avatar_background_color @color/cool_gray /color  color name= avatar_icon_color @color/white /color  color name= edit_text_background @color/white /color  color name= ic_table_row_icons #a9b4be /color", 
            "title": "Colors"
        }, 
        {
            "location": "/android/customization/#string-values", 
            "text": "string name= SELECT_GALLERY Choose from Gallery /string  string name= SELECT_IMAGE_CAMERA Take new photo /string  string name= SELECT_IMAGE_VIDEO Take Video /string  string name= CANCEL Cancel /string string name= message_preview_image [image] /string  string name= message_preview_video [video] /string  string name= clipboard_description Message /string  string name= copied_to_clipboard Copied to clipboard /string  string name= message_composer_hint Edit Message... /string  string name= message_composer_send_button Send /string  string name= message_settings Message Settings /string  string name= icon_settings_string {md-settings} /string  string name= leave_conversation Leave Conversation /string  string name= title_activity_image_viewer ImageViewerActivity /string  string name= file_size_upload_too_big file size is too big /string  string name= sorry sorry /string  !-- Permission Checking --  string name= permission_error_title No Permission /string  string name= permission_error_camera Please grant camera permission /string  string name= permission_error_gallery Please grant access to read your image gallery /string", 
            "title": "String Values"
        }, 
        {
            "location": "/api/request_auth/", 
            "text": "Authentication of API Requests\n\n\nWhen you access AppFriends REST API via our SDK, you only need to provide the correct \nApp_ID\n and \nApp_Secret\n when you initialize the SDK. However, when you want to make direct REST API requests using a http client, the requests need to be structured correctly and signed by the appropriate secret. \nadmin secret\n can be used for all APIs, but you should only use it on your server to keep it secret. \napp secret\n is for you to use inside your app, and it can only give access to application APIs.\n\n\nRequest Header\n\n\nIn the request http header, These fields need to be present:\n\n\nAPP_ID\n - Your App_ID. You can find it in the admin panel after your app is created there.\n\n\nTOKEN\n - When you are sending the requests on a user's behave, the user's auth token should be included here. Auth token is returned after the user signup or login to AppFriends. See \nuser authentication\n.\n\n\nAuthorization\n - Your request signature. See \nsignature creation\n.\n\n\nNonce\n - A random integer.\n\n\nTimestamp\n - system timestamp\n\n\nSample Request Header\n\n\nYour http header can contain other fields, but they need to include:\n\n\nAPP_ID: \nSVXJKXjXUGOkEFBWDK8NCwtt\n\nTOKEN: \nBE82LbEu_bGNnwXmy5KObw\n\nTimestamp: \n1462117651\n\nNonce: \nrandom integer\n\nAuthorization: Bearer \nsignature token\n\n\n\n\n\n\nApp ID and Secrets\n\n\nFor each application you create on AppFriends, there's going to an \nApp_ID\n, an \nApp_Secret\n and an \nAdmin_Secret\n.\n\n\nApp_ID\n is used to identify your application.\n\n\nApp_Secret\n is the secret used to sign the requests coming from your application.\n\n\nAdmin_Secret\n is the secret used to sign the requests coming directly from your server. For example, your server can send a request via AppFriends REST API to update a user's token or you can export all the social graph data with your admin secret.\n\n\nThese values play very important role in authenticating your requests, so please keep them away from the bad guys.\n\n\nSignature Creation\n\n\nThe signature is creation is using JSON Web Tokens \n(JWT)\n, which is an open, industry standard \nRFC 7519\n method for representing claims securely between two parties. You can use \nthis website\n to verify your signature.\n\n\n//signature creation\n\n\nHMACSHA256\n(\n\n  \nbase64UrlEncode\n(\nJWT\n \nheader\n)\n \n+\n \n.\n \n+\n\n  \nbase64UrlEncode\n(\npayload\n),\n\n  \nyour\n \nsecret\n \nhere\n\n\n)\n\n\n\n\n\n\nThe signature created here will be used in the Authorization header using the Bearer schema.\n\n\nAuthorization: Bearer \nsignature token\n\n\n\n\n\n\nJWT Header\n\n\nJWT header is not your request http header. It is used just to sign the request. The JWT header will look like this:\n\n\n{\n\n  \nalg\n:\n \nHS256\n,\n\n  \ntyp\n:\n \nJWT\n\n\n}\n\n\n\n\n\n\nJWT Payload\n\n\nPut timestamp (seconds) in your payout\n\n\n{\n\n  \ntimestamp\n:\n \n1462117651\n,\n\n  \ntoken\n:\n \nthe user token\n\n\n}\n\n\n\n\n\n\n\n\nAbove: JWT example on \njwt.io", 
            "title": "Request Authentication"
        }, 
        {
            "location": "/api/request_auth/#authentication-of-api-requests", 
            "text": "When you access AppFriends REST API via our SDK, you only need to provide the correct  App_ID  and  App_Secret  when you initialize the SDK. However, when you want to make direct REST API requests using a http client, the requests need to be structured correctly and signed by the appropriate secret.  admin secret  can be used for all APIs, but you should only use it on your server to keep it secret.  app secret  is for you to use inside your app, and it can only give access to application APIs.", 
            "title": "Authentication of API Requests"
        }, 
        {
            "location": "/api/request_auth/#request-header", 
            "text": "In the request http header, These fields need to be present:  APP_ID  - Your App_ID. You can find it in the admin panel after your app is created there.  TOKEN  - When you are sending the requests on a user's behave, the user's auth token should be included here. Auth token is returned after the user signup or login to AppFriends. See  user authentication .  Authorization  - Your request signature. See  signature creation .  Nonce  - A random integer.  Timestamp  - system timestamp", 
            "title": "Request Header"
        }, 
        {
            "location": "/api/request_auth/#sample-request-header", 
            "text": "Your http header can contain other fields, but they need to include:  APP_ID:  SVXJKXjXUGOkEFBWDK8NCwtt \nTOKEN:  BE82LbEu_bGNnwXmy5KObw \nTimestamp:  1462117651 \nNonce:  random integer \nAuthorization: Bearer  signature token", 
            "title": "Sample Request Header"
        }, 
        {
            "location": "/api/request_auth/#app-id-and-secrets", 
            "text": "For each application you create on AppFriends, there's going to an  App_ID , an  App_Secret  and an  Admin_Secret .  App_ID  is used to identify your application.  App_Secret  is the secret used to sign the requests coming from your application.  Admin_Secret  is the secret used to sign the requests coming directly from your server. For example, your server can send a request via AppFriends REST API to update a user's token or you can export all the social graph data with your admin secret.  These values play very important role in authenticating your requests, so please keep them away from the bad guys.", 
            "title": "App ID and Secrets"
        }, 
        {
            "location": "/api/request_auth/#signature-creation", 
            "text": "The signature is creation is using JSON Web Tokens  (JWT) , which is an open, industry standard  RFC 7519  method for representing claims securely between two parties. You can use  this website  to verify your signature.  //signature creation  HMACSHA256 ( \n   base64UrlEncode ( JWT   header )   +   .   + \n   base64UrlEncode ( payload ), \n   your   secret   here  )   The signature created here will be used in the Authorization header using the Bearer schema.  Authorization: Bearer  signature token", 
            "title": "Signature Creation"
        }, 
        {
            "location": "/api/request_auth/#jwt-header", 
            "text": "JWT header is not your request http header. It is used just to sign the request. The JWT header will look like this:  { \n   alg :   HS256 , \n   typ :   JWT  }", 
            "title": "JWT Header"
        }, 
        {
            "location": "/api/request_auth/#jwt-payload", 
            "text": "Put timestamp (seconds) in your payout  { \n   timestamp :   1462117651 , \n   token :   the user token  }    Above: JWT example on  jwt.io", 
            "title": "JWT Payload"
        }, 
        {
            "location": "/api/applicationapi/", 
            "text": "Application API\n\n\nAppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. Application API's can only be accessed via the SDK, using the application secret.\n\n\nREST APIs\n\n\nPlease see our application REST APIs \nhere\n.\n\n\nError Codes\n\n\n\n\n\n\n\n\nError Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n9000\n\n\noperation not allowed\n\n\n\n\n\n\n10000\n\n\nparameter required\n\n\n\n\n\n\n10001\n\n\nneed to login\n\n\n\n\n\n\n10002\n\n\nmissing app ID\n\n\n\n\n\n\n10003\n\n\ninvalid app ID\n\n\n\n\n\n\n10004\n\n\nno permission\n\n\n\n\n\n\n10005\n\n\nadmin user not found\n\n\n\n\n\n\n10007\n\n\nno Authorization header found\n\n\n\n\n\n\n10008\n\n\ninvalid Authorization header found\n\n\n\n\n\n\n10009\n\n\ninvalid request path or method\n\n\n\n\n\n\n10010\n\n\ninvalid params\n\n\n\n\n\n\n10011\n\n\nadmin server api secret required\n\n\n\n\n\n\n20005\n\n\ndialog not found\n\n\n\n\n\n\n30007\n\n\nexceed max import users per request\n\n\n\n\n\n\n50000\n\n\nserver is under maintenance", 
            "title": "Application APIs"
        }, 
        {
            "location": "/api/applicationapi/#application-api", 
            "text": "AppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. Application API's can only be accessed via the SDK, using the application secret.", 
            "title": "Application API"
        }, 
        {
            "location": "/api/applicationapi/#rest-apis", 
            "text": "Please see our application REST APIs  here .", 
            "title": "REST APIs"
        }, 
        {
            "location": "/api/applicationapi/#error-codes", 
            "text": "Error Code  Description      9000  operation not allowed    10000  parameter required    10001  need to login    10002  missing app ID    10003  invalid app ID    10004  no permission    10005  admin user not found    10007  no Authorization header found    10008  invalid Authorization header found    10009  invalid request path or method    10010  invalid params    10011  admin server api secret required    20005  dialog not found    30007  exceed max import users per request    50000  server is under maintenance", 
            "title": "Error Codes"
        }, 
        {
            "location": "/api/adminapi/", 
            "text": "Application API\n\n\nAppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. The admin api's can be accessed via any http client, using the admin secret.\n\n\nREST APIs\n\n\nPlease see our admin REST APIs \nhere\n.", 
            "title": "Admin APIs"
        }, 
        {
            "location": "/api/adminapi/#application-api", 
            "text": "AppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. The admin api's can be accessed via any http client, using the admin secret.", 
            "title": "Application API"
        }, 
        {
            "location": "/api/adminapi/#rest-apis", 
            "text": "Please see our admin REST APIs  here .", 
            "title": "REST APIs"
        }
    ]
}