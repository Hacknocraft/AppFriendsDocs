{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to AppFriends\n\n\nThe AppFriends plugin integrates public chat channels, private messaging, and social graphs into any app to increase user interaction and engagement. AppFriends supports multiple platforms.\n\n\nAppFriends supports a number of features:\n\n\n\nopen channel, group and one on one chats\n\n\nsocial features such as following and making friends\n\n\nprivacy features such as blocking/reporting an user\n\n\ndialog conversation settings such as muting, changing dialog name\n\n\ntyping indicator\n\n\ndialog media album\n\n\nmessage receipts\n\n\nvideo and image messages\n\n\n...\n\n\n\n\nIf you are interested in our product or have ideas on how we can improve it, please send emails to \nsupport@hacknocraft.com\n; we would love to hear from you.\n\n\nChat and Dialogs\n\n\nAppFriends offers three types of chat:\n\n\nThere are three types of dialogs. Depending on your use case, please choose the appropriate type to use:\n\n\n\n\nPrivate one on one dialog\n. This is a conversation between two users. You can't add more users to private one on one dialog. This type of dialog is only visible to the two users in it.\n\n\nPrivate group dialog\n. This is a conversation between multiple users. You can add up to a few hundred users to a private group chat. This type of dialog is only visible to users in the group.\n\n\nOpen channel dialog\n. This is an open conversation. It is visible to everyone. You can add up to a few thousand users to an open channel. Each user can only be in one channel at a time.\n\n\n\n\n\n\n\n\n\n\nFeature Type\n\n\nOpen Channels\n\n\nPrivate Group Chat\n\n\nOne on One Private Chat\n\n\n\n\n\n\n\n\n\n\nTyping Indicator\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMessage Delivery Receipts\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMessage Read Receipts\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nVideo and Image\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nCreate in app\n\n\n\u2718\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nCreate in control panel\n\n\n\u2714\n\n\n\u2718\n\n\n\u2718\n\n\n\n\n\n\nMute\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nBlocks user\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nPush notifications\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nMembers limit\n\n\n5000\n\n\n100\n\n\n2\n\n\n\n\n\n\n\n\nSocial\n\n\nAppFriends offers social features to help you build applications to connect users and store their social relationship. A user can \nfollow\n another user, and if that user follows back, they become \nfriends\n. You can query a list of the user's followers or the users being followed the user.\n\n\nMobile\n\n\nAppFriends has native and javascript SDKs and that make integration for iOS, Android and web much easier.\n\n\niOS\n\n\nThe iOS SDK can be integrated into existing Xcode iOS projects. There are two SDK frameworks for you to use. If you don't want to use our provided UI, you can integrate the \nAppFriendsCore\n framework, which has no UI components but helps you communicate with the AppFriends platform. There is also the \nAppFriendsUI\n framework, which contains a lot of convenient UI components for you to quickly implement chat in your app. For details, please read the \niOS SDK guide\n.\n\n\nAndroid\n\n\nThe Android SDK can be integrated into existing Android projects. For details,\nplease read \nAndroid SDK guide\n. A sample android application can be found \nhere\n.\n\n\nReactNative\n\n\nAppFriends can be used in your ReactNative project. The library can found \nhere\n. In the github repo, we included a sample chat app which uses the AppFriends RN library to make app chat work on both iOS and Android. \n\n\nJavascript/Web\n\n\nThe javascript SDK can be used on your website as well as hybrid mobile apps. Javascript SDK can be downloaded \nhere\n. A sample web widget can be found \nhere\n.\n\n\nServer API\n\n\nAppFriends has comprehensive REST APIs for you to use. There are two types of APIs: \nApplication API\n and \nAdmin API\n.\n\n\nAdmin Portal\n\n\nYou can control the widget by logging into the \nadmin portal\n with your AppFriends account.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-appfriends", 
            "text": "The AppFriends plugin integrates public chat channels, private messaging, and social graphs into any app to increase user interaction and engagement. AppFriends supports multiple platforms.  AppFriends supports a number of features:  open channel, group and one on one chats  social features such as following and making friends  privacy features such as blocking/reporting an user  dialog conversation settings such as muting, changing dialog name  typing indicator  dialog media album  message receipts  video and image messages  ...   If you are interested in our product or have ideas on how we can improve it, please send emails to  support@hacknocraft.com ; we would love to hear from you.", 
            "title": "Welcome to AppFriends"
        }, 
        {
            "location": "/#chat-and-dialogs", 
            "text": "AppFriends offers three types of chat:  There are three types of dialogs. Depending on your use case, please choose the appropriate type to use:   Private one on one dialog . This is a conversation between two users. You can't add more users to private one on one dialog. This type of dialog is only visible to the two users in it.  Private group dialog . This is a conversation between multiple users. You can add up to a few hundred users to a private group chat. This type of dialog is only visible to users in the group.  Open channel dialog . This is an open conversation. It is visible to everyone. You can add up to a few thousand users to an open channel. Each user can only be in one channel at a time.      Feature Type  Open Channels  Private Group Chat  One on One Private Chat      Typing Indicator  \u2718  \u2714  \u2714    Message Delivery Receipts  \u2718  \u2714  \u2714    Message Read Receipts  \u2718  \u2714  \u2714    Video and Image  \u2714  \u2714  \u2714    Create in app  \u2718  \u2714  \u2714    Create in control panel  \u2714  \u2718  \u2718    Mute  \u2714  \u2714  \u2714    Blocks user  \u2714  \u2714  \u2714    Push notifications  \u2714  \u2714  \u2714    Members limit  5000  100  2", 
            "title": "Chat and Dialogs"
        }, 
        {
            "location": "/#social", 
            "text": "AppFriends offers social features to help you build applications to connect users and store their social relationship. A user can  follow  another user, and if that user follows back, they become  friends . You can query a list of the user's followers or the users being followed the user.", 
            "title": "Social"
        }, 
        {
            "location": "/#mobile", 
            "text": "AppFriends has native and javascript SDKs and that make integration for iOS, Android and web much easier.", 
            "title": "Mobile"
        }, 
        {
            "location": "/#ios", 
            "text": "The iOS SDK can be integrated into existing Xcode iOS projects. There are two SDK frameworks for you to use. If you don't want to use our provided UI, you can integrate the  AppFriendsCore  framework, which has no UI components but helps you communicate with the AppFriends platform. There is also the  AppFriendsUI  framework, which contains a lot of convenient UI components for you to quickly implement chat in your app. For details, please read the  iOS SDK guide .", 
            "title": "iOS"
        }, 
        {
            "location": "/#android", 
            "text": "The Android SDK can be integrated into existing Android projects. For details,\nplease read  Android SDK guide . A sample android application can be found  here .", 
            "title": "Android"
        }, 
        {
            "location": "/#reactnative", 
            "text": "AppFriends can be used in your ReactNative project. The library can found  here . In the github repo, we included a sample chat app which uses the AppFriends RN library to make app chat work on both iOS and Android.", 
            "title": "ReactNative"
        }, 
        {
            "location": "/#javascriptweb", 
            "text": "The javascript SDK can be used on your website as well as hybrid mobile apps. Javascript SDK can be downloaded  here . A sample web widget can be found  here .", 
            "title": "Javascript/Web"
        }, 
        {
            "location": "/#server-api", 
            "text": "AppFriends has comprehensive REST APIs for you to use. There are two types of APIs:  Application API  and  Admin API .", 
            "title": "Server API"
        }, 
        {
            "location": "/#admin-portal", 
            "text": "You can control the widget by logging into the  admin portal  with your AppFriends account.", 
            "title": "Admin Portal"
        }, 
        {
            "location": "/ios/quick_start/", 
            "text": "Quick Start\n\n\n1. Create an AppFriends Application\n\n\nBefore start using AppFriends, you need to create an application on the \ndashboard\n Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsUI, please checkout our repo:\n\n\n\n\nGithub iOS Sample App\n\n\n\n\n2. Integrate AppFriends SDK\n\n\nUsing Cocoapods\n\n\nTo integrate AppFriends iOS SDK to your Xcode iOS project, add this line in your \nPodfile\n\n\nSwift 4\n\n\npod\n \nAppFriendsUI\n,\n \n~\n 2.3\n\n\npod\n \nAppFriendsCore\n,\n \n~\n 2.2\n\n\n\n\n\n\nSwift 3.2\n\n\npod\n \nAppFriendsUI\n,\n \n~\n 2.2\n\n\npod\n \nAppFriendsCore\n,\n \n~\n 2.1\n\n\n\n\n\n\nAlso, add \nuse_frameworks!\n to the top of file. eg.\n\n\nsource\n \nhttps://github.com/CocoaPods/Specs.git\n\n\nsource\n \nhttps://github.com/Hacknocraft/hacknocraft-cocoapods-spec.git\n\n\nuse_frameworks!\n\n\n...\n\n\n\n\n\n\nYou might need to run \npod repo update\n after this step before calling \npod install\n\n\nUsing Carthage\n\n\nTo integrate using Carthage\n\n\ngithub \"Hacknocraft/AppFriendsCarthage\" ~\n 2.1\n\n\nAdd frameworks:\n\n\n\n\nCopy frameworks:\n\n\n\n\nIf you don't want any of the UI components we provide, you can directly interact with the platform API, and we have a core framework to use for that purpose:\n\n\npod\n \nAppFriendsCore\n,\n \n~\n 2.2\n\n\n\n\n\n\n3. Import Header\n\n\nThe next step is import the headers.\n\n\nExample\n\n\nSwift\n\n\n#\nimport\n \nAppFriendsCore\n\n\n#\nimport\n \nAppFriendsUI\n\n\n\n\n\n\nObjective-C\n\n\nimport\n \nAppFriendsCore\n\n\nimport\n \nAppFriendsUI\n\n\n\n\n\n\n4. Initialization\n\n\nNow, we can use the AppFriends key and secret to initialize the SDK. Key and secret can be found in your AppFriends dashboard. If you are using the \nAppFriendsUI\n SDK, you can initialize by:\n\n\nAppFriends Initialization\n\n\nSwift\n\n\nAppFriendsUI\n.\nsharedInstance\n.\ninitialize\n(\n[appfriends key]\n,\n \nsecret\n:\n \n[appfriends secret]\n)\n \n{\n \n(\nsuccess\n,\n \nerror\n)\n \nin\n\n        \nif\n \n!\nsuccess\n \n{\n\n                \nNSLog\n(\nAppFriends initialization error:\n\\(\nerror\n?.\nlocalizedDescription\n)\n)\n\n        \n}\nelse\n \n{\n\n             \n// initialization is successful\n\n        \n}\n\n\n}\n\n\n\n\n\n\n5. Login\n\n\nAfter initialization, you want to login your user to AppFriends, so he can start chatting with other users. Please see \nsessions\n for detail\n\n\n6. UI\n\n\nThere are a lot of ready to use UI components in the AppFriendsUI SDK. They can save you hundreds of hours of development. To learn the UI components and how to use them, please see \nui components section", 
            "title": "Quick Start"
        }, 
        {
            "location": "/ios/quick_start/#quick-start", 
            "text": "", 
            "title": "Quick Start"
        }, 
        {
            "location": "/ios/quick_start/#1-create-an-appfriends-application", 
            "text": "Before start using AppFriends, you need to create an application on the  dashboard  Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsUI, please checkout our repo:   Github iOS Sample App", 
            "title": "1. Create an AppFriends Application"
        }, 
        {
            "location": "/ios/quick_start/#2-integrate-appfriends-sdk", 
            "text": "", 
            "title": "2. Integrate AppFriends SDK"
        }, 
        {
            "location": "/ios/quick_start/#using-cocoapods", 
            "text": "To integrate AppFriends iOS SDK to your Xcode iOS project, add this line in your  Podfile", 
            "title": "Using Cocoapods"
        }, 
        {
            "location": "/ios/quick_start/#swift-4", 
            "text": "pod   AppFriendsUI ,   ~  2.3  pod   AppFriendsCore ,   ~  2.2", 
            "title": "Swift 4"
        }, 
        {
            "location": "/ios/quick_start/#swift-32", 
            "text": "pod   AppFriendsUI ,   ~  2.2  pod   AppFriendsCore ,   ~  2.1   Also, add  use_frameworks!  to the top of file. eg.  source   https://github.com/CocoaPods/Specs.git  source   https://github.com/Hacknocraft/hacknocraft-cocoapods-spec.git  use_frameworks!  ...   You might need to run  pod repo update  after this step before calling  pod install", 
            "title": "Swift 3.2"
        }, 
        {
            "location": "/ios/quick_start/#using-carthage", 
            "text": "To integrate using Carthage  github \"Hacknocraft/AppFriendsCarthage\" ~  2.1", 
            "title": "Using Carthage"
        }, 
        {
            "location": "/ios/quick_start/#add-frameworks", 
            "text": "", 
            "title": "Add frameworks:"
        }, 
        {
            "location": "/ios/quick_start/#copy-frameworks", 
            "text": "If you don't want any of the UI components we provide, you can directly interact with the platform API, and we have a core framework to use for that purpose:  pod   AppFriendsCore ,   ~  2.2", 
            "title": "Copy frameworks:"
        }, 
        {
            "location": "/ios/quick_start/#3-import-header", 
            "text": "The next step is import the headers.", 
            "title": "3. Import Header"
        }, 
        {
            "location": "/ios/quick_start/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/ios/quick_start/#swift", 
            "text": "# import   AppFriendsCore  # import   AppFriendsUI", 
            "title": "Swift"
        }, 
        {
            "location": "/ios/quick_start/#objective-c", 
            "text": "import   AppFriendsCore  import   AppFriendsUI", 
            "title": "Objective-C"
        }, 
        {
            "location": "/ios/quick_start/#4-initialization", 
            "text": "Now, we can use the AppFriends key and secret to initialize the SDK. Key and secret can be found in your AppFriends dashboard. If you are using the  AppFriendsUI  SDK, you can initialize by:", 
            "title": "4. Initialization"
        }, 
        {
            "location": "/ios/quick_start/#appfriends-initialization", 
            "text": "", 
            "title": "AppFriends Initialization"
        }, 
        {
            "location": "/ios/quick_start/#swift_1", 
            "text": "AppFriendsUI . sharedInstance . initialize ( [appfriends key] ,   secret :   [appfriends secret] )   {   ( success ,   error )   in \n         if   ! success   { \n                 NSLog ( AppFriends initialization error: \\( error ?. localizedDescription ) ) \n         } else   { \n              // initialization is successful \n         }  }", 
            "title": "Swift"
        }, 
        {
            "location": "/ios/quick_start/#5-login", 
            "text": "After initialization, you want to login your user to AppFriends, so he can start chatting with other users. Please see  sessions  for detail", 
            "title": "5. Login"
        }, 
        {
            "location": "/ios/quick_start/#6-ui", 
            "text": "There are a lot of ready to use UI components in the AppFriendsUI SDK. They can save you hundreds of hours of development. To learn the UI components and how to use them, please see  ui components section", 
            "title": "6. UI"
        }, 
        {
            "location": "/ios/sessions/", 
            "text": "Session API can be access using \nAFSession\n class.\n\n\nLogin\n\n\nBefore an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require\n\n\n\n\nan username\n, this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.\n\n\nan unique user ID\n, this should be the same user id that you use in your app to identify the user\n\n\n\n\nAFSession\n.\nlogin\n(\nusername\n:\n \nusername\n,\n \nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\ntoken\n,\n \nerror\n)\n \nin\n\n  \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n    \n// login failed\n\n  \n}\n \nelse\n \n{\n\n    \n// login is successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nYou can check if a user has logged in to AppFriends or not by using:\n\n\nif\n \nAFSession\n.\nisLoggedIn\n()\n \n{\n\n  \n// user has logged in to AppFriends\n\n\n}\n\n\n\n\n\n\nLogout\n\n\nWhen an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:\n\n\nAFSession\n.\nlogout\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n    \n// logout failed\n\n  \n}\n \nelse\n \n{\n\n    \n// logout is successful\n\n  \n}\n\n\n}", 
            "title": "Sessions"
        }, 
        {
            "location": "/ios/sessions/#login", 
            "text": "Before an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require   an username , this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.  an unique user ID , this should be the same user id that you use in your app to identify the user   AFSession . login ( username :   username ,   userID :   userID ,   completion :   {   ( token ,   error )   in \n   if   let   err   =   error   { \n     // login failed \n   }   else   { \n     // login is successful \n   }  })   You can check if a user has logged in to AppFriends or not by using:  if   AFSession . isLoggedIn ()   { \n   // user has logged in to AppFriends  }", 
            "title": "Login"
        }, 
        {
            "location": "/ios/sessions/#logout", 
            "text": "When an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:  AFSession . logout   {   ( error )   in \n   if   let   err   =   error   { \n     // logout failed \n   }   else   { \n     // logout is successful \n   }  }", 
            "title": "Logout"
        }, 
        {
            "location": "/ios/users/", 
            "text": "Users\n\n\nThe users API interface is in data model class \nAFUser\n. In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via \nadmin API\n, and AppFriends SDK also provides a lot of convenient interface for you to work with.\n\n\nUser Update\n\n\nWhen user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.\n\n\nUpdate Username:\n\n\nlet\n \nusername\n \n=\n \na new username\n\n\nAFUser\n.\nupdateUserName\n(\nusername\n:\n \nusername\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n//update failed\n\n  \n}\n \nelse\n \n{\n\n    \n//update successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nUpdate User Avatar:\n\n\nlet\n \navatarURL\n \n=\n \nhttps://someavatar.jpg\n\n\nAFUser\n.\nupdateUserAvatar\n(\navatar\n:\n \navatarURL\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n//update failed\n\n  \n}\n \nelse\n \n{\n\n    \n//update successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nUpdate username and avatar at the same time:\n\n\nlet\n \nusername\n \n=\n \na new username\n\n\nlet\n \navatarURL\n \n=\n \nhttps://someavatar.jpg\n\n\nAFUser\n.\nupdateUser\n(\nusername\n:\n \nusername\n,\n \navatar\n:\n \navatarURL\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n//update failed\n\n  \n}\n \nelse\n \n{\n\n    \n//update successful\n\n  \n}\n\n\n})\n\n\n\n\n\n\nFetch Information of an User\n\n\nYou can fetch the information of an user.\n\n\nAFUser\n.\ngetUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nuser\n,\n \nerror\n)\n \nin\n\n               \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n                   \n// get user failed\n\n               \n}\n \nelse\n \n{\n\n                   \n// fetch successful, you can now use the returned user object\n\n               \n}\n\n           \n})\n\n\n\n\n\n\nSearch users\n\n\nAfter you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.\n\n\nAFUser\n.\nsearch\n(\nquery\n:\n \ntext\n,\n \ncompletion\n:\n \n{\n \n(\nusers\n,\n \nerror\n)\n \nin\n\n                \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n                  \n// search failed, please handle error here\n\n                \n}\n \nelse\n \nif\n \nlet\n \nfriends\n \n=\n \nusers\n \n{\n\n                  \n// you get back an array of user ids\n\n                \n}\n\n                \nself\n.\ntableView\n.\nreloadData\n()\n\n            \n})\n\n\n\n\n\n\nGet online user count\n\n\nOur SDK can report how many users are online to your application. Your application can implement \nHCSDKCoreOnlineUserObserver\n and then register to receive the update by \nHCSDKCore.sharedInstance.subscribeToOnlineUsers(self)\n\n\n// \nMARK:\n HCSDKCoreOnlineUserObserver\n\n\npublic\n \nfunc\n \nonlineUserCountChanged\n(\ncount\n:\n \nNSInteger\n)\n \n{\n\n  \nself\n.\ncollectionView\n?.\nreloadData\n()\n\n\n}", 
            "title": "Users"
        }, 
        {
            "location": "/ios/users/#users", 
            "text": "The users API interface is in data model class  AFUser . In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via  admin API , and AppFriends SDK also provides a lot of convenient interface for you to work with.", 
            "title": "Users"
        }, 
        {
            "location": "/ios/users/#user-update", 
            "text": "When user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.  Update Username:  let   username   =   a new username  AFUser . updateUserName ( username :   username ,   completion :   {   ( error )   in \n   if   error   !=   nil   { \n     //update failed \n   }   else   { \n     //update successful \n   }  })   Update User Avatar:  let   avatarURL   =   https://someavatar.jpg  AFUser . updateUserAvatar ( avatar :   avatarURL ,   completion :   {   ( error )   in \n   if   error   !=   nil   { \n     //update failed \n   }   else   { \n     //update successful \n   }  })   Update username and avatar at the same time:  let   username   =   a new username  let   avatarURL   =   https://someavatar.jpg  AFUser . updateUser ( username :   username ,   avatar :   avatarURL ,   completion :   {   ( error )   in \n   if   error   !=   nil   { \n     //update failed \n   }   else   { \n     //update successful \n   }  })", 
            "title": "User Update"
        }, 
        {
            "location": "/ios/users/#fetch-information-of-an-user", 
            "text": "You can fetch the information of an user.  AFUser . getUser ( userID :   userID ,   completion :   {   ( user ,   error )   in \n                if   error   !=   nil   { \n                    // get user failed \n                }   else   { \n                    // fetch successful, you can now use the returned user object \n                } \n            })", 
            "title": "Fetch Information of an User"
        }, 
        {
            "location": "/ios/users/#search-users", 
            "text": "After you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.  AFUser . search ( query :   text ,   completion :   {   ( users ,   error )   in \n                 if   error   !=   nil   { \n                   // search failed, please handle error here \n                 }   else   if   let   friends   =   users   { \n                   // you get back an array of user ids \n                 } \n                 self . tableView . reloadData () \n             })", 
            "title": "Search users"
        }, 
        {
            "location": "/ios/users/#get-online-user-count", 
            "text": "Our SDK can report how many users are online to your application. Your application can implement  HCSDKCoreOnlineUserObserver  and then register to receive the update by  HCSDKCore.sharedInstance.subscribeToOnlineUsers(self)  //  MARK:  HCSDKCoreOnlineUserObserver  public   func   onlineUserCountChanged ( count :   NSInteger )   { \n   self . collectionView ?. reloadData ()  }", 
            "title": "Get online user count"
        }, 
        {
            "location": "/ios/social/", 
            "text": "Social API\n\n\nAppFriends offers social features to help you build applications to connect users and store their social relationship.\n\n\nFollow/Unfollow and Friends\n\n\nUser can follow/unfollow one another.\nTo follow a user:\n\n\n// userID is target user id\n\n\nAFUser\n.\nfollowUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n                  \n// handle error\n\n                \n}\n \nelse\n \n{\n\n                  \n// success\n\n                \n}\n\n            \n})\n\n\n\n\n\n\nTo unfollow a user\n\n\n// userID is target user id\n\n\nAFUser\n.\nunfollowUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n                  \n// handle error\n\n                \n}\n \nelse\n \n{\n\n                  \n// success\n\n                \n}\n\n            \n})\n\n\n\n\n\n\nTo get a list of the followers of the current user\n\n\nAFUser\n.\ngetFollowers\n \n{\n \n(\nusers\n,\n \nerror\n)\n \nin\n\n            \nif\n \nerror\n \n==\n \nnil\n,\n \nlet\n \nuserIDs\n \n=\n \nusers\n \n{\n\n              \n// success, you get a list of user ids of the followers\n\n            \n}\n \nelse\n \n{\n\n              \n// failed\n\n            \n}\n\n        \n}\n\n\n\n\n\n\nTo get a list of users that the current user is following\n\n\nAFUser\n.\ngetFollowing\n \n{\n \n(\nusers\n,\n \nerror\n)\n \nin\n\n            \nif\n \nerror\n \n==\n \nnil\n,\n \nlet\n \nuserIDs\n \n=\n \nusers\n \n{\n\n              \n// success, you get a list of user ids of the followers\n\n            \n}\n \nelse\n \n{\n\n              \n// failed\n\n            \n}\n\n        \n}\n\n\n\n\n\n\nIn AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:\n\n\nAFUser\n.\ngetFriends\n \n{\n \n(\nusers\n,\n \nerror\n)\n \nin\n\n            \nif\n \nerror\n \n==\n \nnil\n,\n \nlet\n \nuserIDs\n \n=\n \nusers\n \n{\n\n              \n// success, you get a list of user ids of the followers\n\n            \n}\n \nelse\n \n{\n\n              \n// failed\n\n            \n}\n\n        \n}\n\n\n\n\n\n\nBlock/Unblock\n\n\nAn user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:\n\n\nAFUser\n.\nblockUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                        \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n                            \n// block user failed\n\n                        \n}\n\n                        \nelse\n \n{\n\n                            \n// block user successful\n\n                        \n}\n\n                    \n})\n\n\n\n\n\n\nUnblock a user:\n\n\nAFUser\n.\nunblockUser\n(\nuserID\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n                        \nif\n \nlet\n \nerr\n \n=\n \nerror\n \n{\n\n                            \n// unblock user failed\n\n                        \n}\n\n                        \nelse\n \n{\n\n                            \n// unblock user successful\n\n                        \n}\n\n                    \n})", 
            "title": "Social"
        }, 
        {
            "location": "/ios/social/#social-api", 
            "text": "AppFriends offers social features to help you build applications to connect users and store their social relationship.", 
            "title": "Social API"
        }, 
        {
            "location": "/ios/social/#followunfollow-and-friends", 
            "text": "User can follow/unfollow one another.\nTo follow a user:  // userID is target user id  AFUser . followUser ( userID :   userID ,   completion :   {   ( error )   in \n                 if   error   !=   nil   { \n                   // handle error \n                 }   else   { \n                   // success \n                 } \n             })   To unfollow a user  // userID is target user id  AFUser . unfollowUser ( userID :   userID ,   completion :   {   ( error )   in \n                 if   error   !=   nil   { \n                   // handle error \n                 }   else   { \n                   // success \n                 } \n             })   To get a list of the followers of the current user  AFUser . getFollowers   {   ( users ,   error )   in \n             if   error   ==   nil ,   let   userIDs   =   users   { \n               // success, you get a list of user ids of the followers \n             }   else   { \n               // failed \n             } \n         }   To get a list of users that the current user is following  AFUser . getFollowing   {   ( users ,   error )   in \n             if   error   ==   nil ,   let   userIDs   =   users   { \n               // success, you get a list of user ids of the followers \n             }   else   { \n               // failed \n             } \n         }   In AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:  AFUser . getFriends   {   ( users ,   error )   in \n             if   error   ==   nil ,   let   userIDs   =   users   { \n               // success, you get a list of user ids of the followers \n             }   else   { \n               // failed \n             } \n         }", 
            "title": "Follow/Unfollow and Friends"
        }, 
        {
            "location": "/ios/social/#blockunblock", 
            "text": "An user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:  AFUser . blockUser ( userID :   userID ,   completion :   {   ( error )   in \n                         if   let   err   =   error   { \n                             // block user failed \n                         } \n                         else   { \n                             // block user successful \n                         } \n                     })   Unblock a user:  AFUser . unblockUser ( userID :   userID ,   completion :   {   ( error )   in \n                         if   let   err   =   error   { \n                             // unblock user failed \n                         } \n                         else   { \n                             // unblock user successful \n                         } \n                     })", 
            "title": "Block/Unblock"
        }, 
        {
            "location": "/ios/dialogs/", 
            "text": "Open Channels\n\n\nOpen channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with \nGET /channels\n API. A user can only be inside one channel at a time.\n\n\nList all channels:\n\n\nAFDialog\n.\ngetChannels\n \n{\n \n(\ndialogs\n,\n \nerror\n)\n \nin\n\n\n}\n\n\n\n\n\n\nThe easiest way to use open channel is by using \nHCChannelChatViewController\n.\n\n\nlet\n \nchannelChatVC\n \n=\n \nHCChannelChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n\n\n\n\n\nPrivate Dialogs\n\n\nListing All Private Dialogs\n\n\nAppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:\n\n\nAFDialog\n.\ngetDialogs\n \n{\n \n(\ndialogs\n,\n \nerror\n)\n \nin\n\n    \n// this returns an array of all the private dialogs of type AFDialog\n\n\n}\n\n\n\n\n\n\nGroup Dialog\n\n\nA group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:\n\n\nAFDialog\n.\ncreateGroupDialog\n(\ndialogID\n:\n \nid\n,\n \nmembers\n:\n \nusers\n,\n \ncustomData\n:\n \ndata\n,\n \npushData\n:\n \npushData\n,\n \ntitle\n:\n \ndialogTitle\n,\n \ncompletion\n:\n \n{\n \n(\nid\n,\n \nerror\n)\n \nin\n\n      \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n        \nself\n.\nshowErrorWithMessage\n(\nerror\n?.\nlocalizedDescription\n)\n\n      \n}\n \nelse\n \nif\n \nlet\n \ndialogID\n \n=\n \nid\n \n{\n\n        \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n        \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n      \n}\n\n\n})\n\n\n\n\n\n\nPlease note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app.\n\n\nIndividual Dialog\n\n\nAn individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:\n\n\nAFDialog\n.\ncreateIndividualDialog\n(\nwithUser\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\ndialogID\n,\n \nerror\n)\n \nin\n\n    \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n      \nself\n.\nshowErrorWithMessage\n(\nerror\n?.\nlocalizedDescription\n)\n\n    \n}\n \nelse\n \nif\n \nlet\n \ndialogID\n \n=\n \nid\n \n{\n\n      \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n      \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\nMute/Unmute\n\n\nYou can mute/unmute a dialog by:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nmute\n()\n\n\ndialog\n.\nunmute\n()\n\n\n\n\n\n\nBadge/Unread Messages\n\n\nThe total number of unread messages by the current user can be found by:\n\n\nlet\n \ntotalUnreadCount\n \n=\n \nAFDialog\n.\ntotalUnreadMessageCount\n()\n\n\n\n\n\n\nFor each dialog, the unread message can be found by using \nAFDialog: unreadMessageCount\n.\nWhen unread message count has updated, you can subscribe to \nAFEvent\n. You can monitor the notification and update the badge on the app icon. eg.\n\n\n// subscribe to AFEvent\n\n\nAFEvent\n.\nsubscribe\n(\nsubscriber\n:\n \nself\n)\n\n\n\n// handle notification\n\n\nfunc\n \nemitEvent\n(\n_\n \nevent\n:\n \nAFEvent\n)\n \n{\n\n    \nif\n \nevent\n.\nname\n \n==\n \n.\neventTotalUnreadCountChange\n \n{\n\n        \n// read badge number from AFDialog.totalUnreadMessageCount()\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSending Messages\n\n\nSending text:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendText\n(\ntext\n:\n \ntext\n,\n \nrequireReceipt\n:\n \ntrue\n,\n \nmentionedUsers\n:\n \nmentionedIDs\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n      \nself\n.\ndidSendTextMessage\n()\n\n    \n}\n\n\n})\n\n\n\n\n\n\nSending an image:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendImage\n(\nimage\n:\n \nimage\n,\n \nrequireReceipt\n:\n \nfalse\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n},\n \nprogress\n:\n \n{\n \n(\npercentage\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nSending a video:\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendVideo\n(\nvideoData\n:\n \nvideoData\n,\n \nrequireReceipt\n:\n \nself\n.\n_requireReceipt\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n},\n \nprogress\n:\n \n{\n \n(\npercentage\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nSending a gif\n\n\n// dialog is an AFDialog instance\n\n\ndialog\n.\nsendGif\n(\nurl\n:\n \nurl\n,\n \nrequireReceipt\n:\n \nfalse\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n\n})\n\n\n\n\n\n\nMentioning Users\n\n\nYou can mention other users by referencing their IDs in the message you compose.\n\n\n// see mentionedUsers parameter\n\n\n// it\ns an array of mentioned users\n IDs\n\n\ndialog\n.\nsendText\n(\ntext\n:\n \ntext\n,\n \nrequireReceipt\n:\n \ntrue\n,\n \nmentionedUsers\n:\n \nmentionedIDs\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n      \nself\n.\ndidSendTextMessage\n()\n\n    \n}\n\n\n})\n\n\n\n\n\n\nMessage Receipts\n\n\nYou can check the receipts of a message by using \nAFMessage\n class:\n\n\n// message is an AFMessage object\n\n\nmessage\n.\ngetReceipts\n \n{\n \n(\nreceivedUserIDs\n,\n \nreadUserIDs\n,\n \nerror\n)\n \nin\n\n    \n// receivedUserIDs contains id\ns of the users who received message\n\n    \n// readUserIDs contains id\ns of the users who have read the message\n\n\n}\n\n\n\n\n\n\nSending Receipts:\nIf you use the chat view provided in AppFriendsUI SDK, you do not need to manually send the receipts. The UI SDK automatically handles it. If you wish to send receipts yourself, you can call these API on a \nAFMessage\n object:\n\n\n// message is an AFMessage object\n\n\nmessage\n.\nmarkAsRead\n()\n      \n// post read receipt\n\n\nmessage\n.\nmarkAsReceived\n()\n  \n// post received receipt", 
            "title": "Dialogs and Messaging"
        }, 
        {
            "location": "/ios/dialogs/#open-channels", 
            "text": "Open channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with  GET /channels  API. A user can only be inside one channel at a time.  List all channels:  AFDialog . getChannels   {   ( dialogs ,   error )   in  }   The easiest way to use open channel is by using  HCChannelChatViewController .  let   channelChatVC   =   HCChannelChatViewController ( dialogID :   dialogID )", 
            "title": "Open Channels"
        }, 
        {
            "location": "/ios/dialogs/#private-dialogs", 
            "text": "", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/ios/dialogs/#listing-all-private-dialogs", 
            "text": "AppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:  AFDialog . getDialogs   {   ( dialogs ,   error )   in \n     // this returns an array of all the private dialogs of type AFDialog  }", 
            "title": "Listing All Private Dialogs"
        }, 
        {
            "location": "/ios/dialogs/#group-dialog", 
            "text": "A group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:  AFDialog . createGroupDialog ( dialogID :   id ,   members :   users ,   customData :   data ,   pushData :   pushData ,   title :   dialogTitle ,   completion :   {   ( id ,   error )   in \n       if   error   !=   nil   { \n         self . showErrorWithMessage ( error ?. localizedDescription ) \n       }   else   if   let   dialogID   =   id   { \n         let   dialogVC   =   HCDialogChatViewController ( dialogID :   dialogID ) \n         self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n       }  })   Please note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app.", 
            "title": "Group Dialog"
        }, 
        {
            "location": "/ios/dialogs/#individual-dialog", 
            "text": "An individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:  AFDialog . createIndividualDialog ( withUser :   userID ,   completion :   {   ( dialogID ,   error )   in \n     if   error   !=   nil   { \n       self . showErrorWithMessage ( error ?. localizedDescription ) \n     }   else   if   let   dialogID   =   id   { \n       let   dialogVC   =   HCDialogChatViewController ( dialogID :   dialogID ) \n       self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n     }  })", 
            "title": "Individual Dialog"
        }, 
        {
            "location": "/ios/dialogs/#muteunmute", 
            "text": "You can mute/unmute a dialog by:  // dialog is an AFDialog instance  dialog . mute ()  dialog . unmute ()", 
            "title": "Mute/Unmute"
        }, 
        {
            "location": "/ios/dialogs/#badgeunread-messages", 
            "text": "The total number of unread messages by the current user can be found by:  let   totalUnreadCount   =   AFDialog . totalUnreadMessageCount ()   For each dialog, the unread message can be found by using  AFDialog: unreadMessageCount .\nWhen unread message count has updated, you can subscribe to  AFEvent . You can monitor the notification and update the badge on the app icon. eg.  // subscribe to AFEvent  AFEvent . subscribe ( subscriber :   self )  // handle notification  func   emitEvent ( _   event :   AFEvent )   { \n     if   event . name   ==   . eventTotalUnreadCountChange   { \n         // read badge number from AFDialog.totalUnreadMessageCount() \n     }  }", 
            "title": "Badge/Unread Messages"
        }, 
        {
            "location": "/ios/dialogs/#sending-messages", 
            "text": "Sending text:  // dialog is an AFDialog instance  dialog . sendText ( text :   text ,   requireReceipt :   true ,   mentionedUsers :   mentionedIDs ,   completion :   {   ( error )   in \n\n     if   error   ==   nil   { \n       self . didSendTextMessage () \n     }  })   Sending an image:  // dialog is an AFDialog instance  dialog . sendImage ( image :   image ,   requireReceipt :   false ,   completion :   {   ( error )   in  },   progress :   {   ( percentage )   in  })   Sending a video:  // dialog is an AFDialog instance  dialog . sendVideo ( videoData :   videoData ,   requireReceipt :   self . _requireReceipt ,   completion :   {   ( error )   in  },   progress :   {   ( percentage )   in  })   Sending a gif  // dialog is an AFDialog instance  dialog . sendGif ( url :   url ,   requireReceipt :   false ,   completion :   {   ( error )   in  })", 
            "title": "Sending Messages"
        }, 
        {
            "location": "/ios/dialogs/#mentioning-users", 
            "text": "You can mention other users by referencing their IDs in the message you compose.  // see mentionedUsers parameter  // it s an array of mentioned users  IDs  dialog . sendText ( text :   text ,   requireReceipt :   true ,   mentionedUsers :   mentionedIDs ,   completion :   {   ( error )   in \n\n     if   error   ==   nil   { \n       self . didSendTextMessage () \n     }  })", 
            "title": "Mentioning Users"
        }, 
        {
            "location": "/ios/dialogs/#message-receipts", 
            "text": "You can check the receipts of a message by using  AFMessage  class:  // message is an AFMessage object  message . getReceipts   {   ( receivedUserIDs ,   readUserIDs ,   error )   in \n     // receivedUserIDs contains id s of the users who received message \n     // readUserIDs contains id s of the users who have read the message  }   Sending Receipts:\nIf you use the chat view provided in AppFriendsUI SDK, you do not need to manually send the receipts. The UI SDK automatically handles it. If you wish to send receipts yourself, you can call these API on a  AFMessage  object:  // message is an AFMessage object  message . markAsRead ()        // post read receipt  message . markAsReceived ()    // post received receipt", 
            "title": "Message Receipts"
        }, 
        {
            "location": "/ios/album/", 
            "text": "What is Album?\n\n\nAn album is a place where we group all the images and videos sent within a dialog. All dialogs have album, except the open channels. The purpose of an album is to help user quickly browse through the past media sent within a dialog. If you use our iOS UI SDK, there is built-in Album view available to use.\n\n\n\n\nAlbum APIs\n\n\nThere are some very simple API to use for interacting with Album.\n\n\nFetching Album Items\n\n\nYou can get album items using the \nAFAlbum\n API:\n\n\n/// fetch all album items\n\n\n///\n\n\n/// - Parameters:\n\n\n///   - id: the id of the dialog containing the album items you are fetching\n\n\n///   - time: the earliest time that you want to fetch from\n\n\n///   - completion: completion block. Returns an array of album items if the request is successful\n\n\nAFAlbum\n.\ngetAllAlbumItems\n(\nfromDialog\n:\n \nid\n,\n \nstartingFrom\n:\n \ntime\n,\n \ncompletion\n:\n \n{\n \n(\nitems\n,\n \nerror\n)\n \nin\n\n      \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n        \n// handle error\n\n      \n}\n \nelse\n \n{\n\n        \n// fetch successful\n\n      \n}\n\n\n})", 
            "title": "Album"
        }, 
        {
            "location": "/ios/album/#what-is-album", 
            "text": "An album is a place where we group all the images and videos sent within a dialog. All dialogs have album, except the open channels. The purpose of an album is to help user quickly browse through the past media sent within a dialog. If you use our iOS UI SDK, there is built-in Album view available to use.", 
            "title": "What is Album?"
        }, 
        {
            "location": "/ios/album/#album-apis", 
            "text": "There are some very simple API to use for interacting with Album.", 
            "title": "Album APIs"
        }, 
        {
            "location": "/ios/album/#fetching-album-items", 
            "text": "You can get album items using the  AFAlbum  API:  /// fetch all album items  ///  /// - Parameters:  ///   - id: the id of the dialog containing the album items you are fetching  ///   - time: the earliest time that you want to fetch from  ///   - completion: completion block. Returns an array of album items if the request is successful  AFAlbum . getAllAlbumItems ( fromDialog :   id ,   startingFrom :   time ,   completion :   {   ( items ,   error )   in \n       if   error   !=   nil   { \n         // handle error \n       }   else   { \n         // fetch successful \n       }  })", 
            "title": "Fetching Album Items"
        }, 
        {
            "location": "/ios/push_notification/", 
            "text": "AppFriends can send push notification to the device when there's a new message for a user or if the user is mentioned in a channel chat. Push notification API is accessible via \nAFPushNotification\n class. Please make sure the user has already logged in before registering for push. Unregistering must also happen before the user logout.\n\n\nRegister for Push\n\n\nTo enable push notification, you need to first register the push token with AppFriends:\n\n\nAFPushNotification\n.\nregisterDeviceForPushNotification\n(\npushToken\n:\n \npushToken\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n})\n\n\n\n\n\n\nUnregister for Push\n\n\nTo unregister push notification:\n\n\nAFPushNotification\n.\nunregisterDeviceForPushNotification\n(\npushToken\n:\n \npushToken\n,\n \ncompletion\n:\n \n{\n \n(\nerror\n)\n \nin\n\n\n})\n\n\n\n\n\n\nProcess Push\n\n\nAfter you received remote push notification, please pass it to the SDK for better user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.\n\n\n// true if AppFriends SDK used the push notification\n\n\nlet\n \npushHandled\n \n=\n \nAFPushNotification\n.\nprocessPushNotification\n(\nnotificationUserInfo\n:\n \nuserInfo\n)", 
            "title": "Push Notification"
        }, 
        {
            "location": "/ios/push_notification/#register-for-push", 
            "text": "To enable push notification, you need to first register the push token with AppFriends:  AFPushNotification . registerDeviceForPushNotification ( pushToken :   pushToken ,   completion :   {   ( error )   in  })", 
            "title": "Register for Push"
        }, 
        {
            "location": "/ios/push_notification/#unregister-for-push", 
            "text": "To unregister push notification:  AFPushNotification . unregisterDeviceForPushNotification ( pushToken :   pushToken ,   completion :   {   ( error )   in  })", 
            "title": "Unregister for Push"
        }, 
        {
            "location": "/ios/push_notification/#process-push", 
            "text": "After you received remote push notification, please pass it to the SDK for better user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.  // true if AppFriends SDK used the push notification  let   pushHandled   =   AFPushNotification . processPushNotification ( notificationUserInfo :   userInfo )", 
            "title": "Process Push"
        }, 
        {
            "location": "/ios/events/", 
            "text": "Events\n\n\nYour app can subscribe to events from AppFriends using \nAFEvent\n class and its API. Objects that implement \nAFEventSubscriber\n protocol can subscribe to AppFriends events.\n\n\nSubscribe to AppFriends Events\n\n\nTo get notified by AppFriends about events, you can subscribe to the event postings by:\n\n\n// subscribe, we will only hold a weak reference to subscriber\n\n\nAFEvent\n.\nsubscribe\n(\nsubscriber\n:\n \nself\n)\n\n\n\n// unsubscribe\n\n\nAFEvent\n.\nunsubscribe\n(\nsubscriber\n:\n \nself\n)\n\n\n\n\n\n\nProcess Event\n\n\nTo process posted events, please implement\n\n\nfunc\n \nemitEvent\n(\n_\n \nevent\n:\n \nAFEvent\n)\n \n{\n\n  \nif\n \neventName\n \n==\n \n.\neventTypingStatusUpdated\n \n{\n\n    \nlet\n \ntypingStatus\n \n=\n \nevent\n.\ndata\n \nas\n?\n \nAFTypingStatus\n \n{\n\n      \n// process typing event\n\n    \n}\n\n  \n}\n \nelse\n \nif\n\n    \n...\n\n\n}\n\n\n\n\n\n\nEach \nAFEvent\n object contains an event name and a data object. The type of the data object depends on the type of event. For example, an \nAFEventName.eventDialogUpdated\n event will contain an \nAFDialog\n\n\nEvent List\n\n\n\n\n\n\n\n\nEvent name\n\n\nData\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n.eventDialogCreated\n\n\nAFDialog\n object\n\n\ndialog created, the newly created dialog will be the data\n\n\n\n\n\n\n.eventDialogLeft\n\n\nAFDialog\n object\n\n\nthe current user has left the dialog\n\n\n\n\n\n\n.eventDialogUpdated\n\n\nAFDialog\n object\n\n\ndialog updated, the dialog that is updated will be the data\n\n\n\n\n\n\n.eventTypingStatusUpdated\n\n\nAFTypingStatus\n object\n\n\ntyping status updated, the \nAFTypingStatus\n object will be the data\n\n\n\n\n\n\n.eventMessageReceived\n\n\nAFMessage\n object\n\n\nnew message received, the new \nAFMessage\n object will be the data\n\n\n\n\n\n\n.eventUserSelected\n\n\nString\n userID\n\n\nuser selected by the user from within the AppFriends UI. You can use this event to open user profile in your app.", 
            "title": "Events"
        }, 
        {
            "location": "/ios/events/#events", 
            "text": "Your app can subscribe to events from AppFriends using  AFEvent  class and its API. Objects that implement  AFEventSubscriber  protocol can subscribe to AppFriends events.", 
            "title": "Events"
        }, 
        {
            "location": "/ios/events/#subscribe-to-appfriends-events", 
            "text": "To get notified by AppFriends about events, you can subscribe to the event postings by:  // subscribe, we will only hold a weak reference to subscriber  AFEvent . subscribe ( subscriber :   self )  // unsubscribe  AFEvent . unsubscribe ( subscriber :   self )", 
            "title": "Subscribe to AppFriends Events"
        }, 
        {
            "location": "/ios/events/#process-event", 
            "text": "To process posted events, please implement  func   emitEvent ( _   event :   AFEvent )   { \n   if   eventName   ==   . eventTypingStatusUpdated   { \n     let   typingStatus   =   event . data   as ?   AFTypingStatus   { \n       // process typing event \n     } \n   }   else   if \n     ...  }   Each  AFEvent  object contains an event name and a data object. The type of the data object depends on the type of event. For example, an  AFEventName.eventDialogUpdated  event will contain an  AFDialog", 
            "title": "Process Event"
        }, 
        {
            "location": "/ios/events/#event-list", 
            "text": "Event name  Data  Description      .eventDialogCreated  AFDialog  object  dialog created, the newly created dialog will be the data    .eventDialogLeft  AFDialog  object  the current user has left the dialog    .eventDialogUpdated  AFDialog  object  dialog updated, the dialog that is updated will be the data    .eventTypingStatusUpdated  AFTypingStatus  object  typing status updated, the  AFTypingStatus  object will be the data    .eventMessageReceived  AFMessage  object  new message received, the new  AFMessage  object will be the data    .eventUserSelected  String  userID  user selected by the user from within the AppFriends UI. You can use this event to open user profile in your app.", 
            "title": "Event List"
        }, 
        {
            "location": "/ios/encryption/", 
            "text": "Encryption\n\n\nFor some apps, user privacy is a top priority, and \nAppFriends\n supports that with an end-to-end encryption extension.  This extension can be added to AppFriends by providing an implementation of \nAFEncryptionDelegate\n. An example of \nAFEncryptionDelegate\n implementation can be found \nhere\n.\n\n\nIn the sample implementation we used \nVirgil\n, which is encryption service provider. Please refer to \nthis article\n for details on how to using Virgil to secure AppFriends chat communication.", 
            "title": "Encryption"
        }, 
        {
            "location": "/ios/encryption/#encryption", 
            "text": "For some apps, user privacy is a top priority, and  AppFriends  supports that with an end-to-end encryption extension.  This extension can be added to AppFriends by providing an implementation of  AFEncryptionDelegate . An example of  AFEncryptionDelegate  implementation can be found  here .  In the sample implementation we used  Virgil , which is encryption service provider. Please refer to  this article  for details on how to using Virgil to secure AppFriends chat communication.", 
            "title": "Encryption"
        }, 
        {
            "location": "/ios/ui_components/", 
            "text": "UI Components\n\n\nIn AppFriendsUI SDK, there are many ready to use UI components for you to save you a great deal of development time. To learn how to customize the UI, please read \nui customization\n. If more advanced customization is needed, you could subclass the existing UI components to change its default behavior.\n\n\nChat View\n\n\nThe chat view which displays the conversation and allows the user to type and send different types of messages. For public channel chat and private chat, we have two different view controller classes for you to use.  \n\n\nPrivate Dialogs\n\n\nFor private chat including 1:1 chat and private group chat, the main class is \nHCDialogChatViewController\n. This view controller offers typing indicator display, text input, media message input and messages display.\n\n\n\n\n\n\nBefore entering a dialog view, you must create the dialog. Then you can pass the dialog ID to the \nHCDialogChatViewController\n:\n\n\n// 1:1 chat, you can create a dialog, you can use the target user id.\n\n\nAFDialog\n.\ncreateIndividualDialog\n(\nwithUser\n:\n \nuserID\n,\n \ncompletion\n:\n \n{\n \n(\ndialogID\n,\n \nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n// handle error here\n\n  \n}\n \nelse\n \nif\n \nlet\n \nid\n \n=\n \ndialogID\n \n{\n\n    \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \nid\n)\n\n    \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n  \n}\n\n\n})\n\n\n\n// private group chat, you can create a dialog, you can pass your own dialog id.\n\n\n// If you want AppFriends to create a dialog id for you, you can simply pass nil.\n\n\n// Then you pass the ids of the members.\n\n\nAFDialog\n.\ncreateGroupDialog\n(\ndialogID\n:\n \nnil\n,\n \nmembers\n:\n \nusers\n,\n \ncompletion\n:\n \n{\n \n(\nid\n,\n \nerror\n)\n \nin\n\n  \nif\n \nerror\n \n!=\n \nnil\n \n{\n\n    \n// handle error here\n\n  \n}\n \nelse\n \nif\n \nlet\n \ndialogID\n \n=\n \nid\n \n{\n\n    \nlet\n \ndialogVC\n \n=\n \nHCDialogChatViewController\n(\ndialogID\n:\n \nid\n)\n\n    \nself\n.\nnavigationController\n?.\npushViewController\n(\ndialogVC\n,\n \nanimated\n:\n \ntrue\n)\n\n  \n}\n\n\n})\n\n\n\n\n\n\nPublic Channel chat\n\n\nFor public channel chat, the main class is \nHCChannelChatViewController\n This view controller offers typing indicator display, text input, media message input and messages display.\n\n\n\n\n// similar to private chat, you need to pass channel dialog id to initialize channel chat view\n\n\nlet\n \nchannelChatVC\n \n=\n \nHCChannelChatViewController\n(\ndialogID\n:\n \ndialogID\n)\n\n\n\n\n\n\nDialogs List\n\n\nYou often need a dialogs list to display a user's past conversations so that he can quickly go back to or switch between conversations. The main class is \nHCDialogsListViewController\n. In dialog list, we already handle new message badge, message preview and sorting the new dialog on top and etc. To use \nHCDialogsListViewController\n, you can similar initialize it programmatically or use xib/storyboard. It will fetch past dialogs of the current user and when new messages are sent to the user, it will show up here.\n\n\n\n\nAlbum\n\n\nWhen users send images/videos in a conversation, they often want to have an easier way to browse all of them. For that, we have a \nHCAlbumViewController\n class.\n\n\n// Albums are grouped by dialogs. To initialize, you need to pass a dialog id.\n\n\nlet\n \nalbumVC\n \n=\n \nHCAlbumViewController\n(\ndialogID\n:\n \ndialogID\n)", 
            "title": "UI Components"
        }, 
        {
            "location": "/ios/ui_components/#ui-components", 
            "text": "In AppFriendsUI SDK, there are many ready to use UI components for you to save you a great deal of development time. To learn how to customize the UI, please read  ui customization . If more advanced customization is needed, you could subclass the existing UI components to change its default behavior.", 
            "title": "UI Components"
        }, 
        {
            "location": "/ios/ui_components/#chat-view", 
            "text": "The chat view which displays the conversation and allows the user to type and send different types of messages. For public channel chat and private chat, we have two different view controller classes for you to use.", 
            "title": "Chat View"
        }, 
        {
            "location": "/ios/ui_components/#private-dialogs", 
            "text": "For private chat including 1:1 chat and private group chat, the main class is  HCDialogChatViewController . This view controller offers typing indicator display, text input, media message input and messages display.    Before entering a dialog view, you must create the dialog. Then you can pass the dialog ID to the  HCDialogChatViewController :  // 1:1 chat, you can create a dialog, you can use the target user id.  AFDialog . createIndividualDialog ( withUser :   userID ,   completion :   {   ( dialogID ,   error )   in \n   if   error   !=   nil   { \n     // handle error here \n   }   else   if   let   id   =   dialogID   { \n     let   dialogVC   =   HCDialogChatViewController ( dialogID :   id ) \n     self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n   }  })  // private group chat, you can create a dialog, you can pass your own dialog id.  // If you want AppFriends to create a dialog id for you, you can simply pass nil.  // Then you pass the ids of the members.  AFDialog . createGroupDialog ( dialogID :   nil ,   members :   users ,   completion :   {   ( id ,   error )   in \n   if   error   !=   nil   { \n     // handle error here \n   }   else   if   let   dialogID   =   id   { \n     let   dialogVC   =   HCDialogChatViewController ( dialogID :   id ) \n     self . navigationController ?. pushViewController ( dialogVC ,   animated :   true ) \n   }  })", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/ios/ui_components/#public-channel-chat", 
            "text": "For public channel chat, the main class is  HCChannelChatViewController  This view controller offers typing indicator display, text input, media message input and messages display.   // similar to private chat, you need to pass channel dialog id to initialize channel chat view  let   channelChatVC   =   HCChannelChatViewController ( dialogID :   dialogID )", 
            "title": "Public Channel chat"
        }, 
        {
            "location": "/ios/ui_components/#dialogs-list", 
            "text": "You often need a dialogs list to display a user's past conversations so that he can quickly go back to or switch between conversations. The main class is  HCDialogsListViewController . In dialog list, we already handle new message badge, message preview and sorting the new dialog on top and etc. To use  HCDialogsListViewController , you can similar initialize it programmatically or use xib/storyboard. It will fetch past dialogs of the current user and when new messages are sent to the user, it will show up here.", 
            "title": "Dialogs List"
        }, 
        {
            "location": "/ios/ui_components/#album", 
            "text": "When users send images/videos in a conversation, they often want to have an easier way to browse all of them. For that, we have a  HCAlbumViewController  class.  // Albums are grouped by dialogs. To initialize, you need to pass a dialog id.  let   albumVC   =   HCAlbumViewController ( dialogID :   dialogID )", 
            "title": "Album"
        }, 
        {
            "location": "/ios/ui_customization/", 
            "text": "UI Customization\n\n\nAppFriendsUI\n provides a lot of useful and convenient UI components for you to use. It can save a lot of your time developing the app. Our \ndemo app\n takes full advantage of the \nAppFriendsUI\n. You could clone the demo app repo from github to see how it uses, interact and customizes the UI components provided by \nAppFriendsUI\n.\n\n\nBasic Customization\n\n\nHCUIConfiguration\n gives you easy access to customize AppFriends UI components. For example, if you want to change the background color of the chat view, you can simply do it by changing the value of \nHCColorPalette.chatBackgroundColor\n\n\nList of Customizable Values\n\n\n\n\n\n\n\n\nHCSettingsConfiguation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nbadgeDisplayIfMuted\n\n\nBoolean\n\n\nfalse\n\n\nturn this to true if you want to keep badge for a conversation after it's muted.\n\n\n\n\n\n\nshowNewMessageLine\n\n\nBoolean\n\n\ntrue\n\n\nswitch for new message line display on private dialogs\n\n\n\n\n\n\nsupportedMessageTypes\n\n\nChatSupportedMessageDataTypes\n\n\n.all\n\n\nThe types of messages you want to support in your chat. This value will apply to all chat. You can also change the types of messages you want to support for each dialog when you initialize the chat view\n\n\n\n\n\n\ngifContentRating\n\n\nAFGifContentRating\n\n\n.parentalGuide13\n\n\nchange this value to control the gif\n\n\n\n\n\n\nshowDialogAlbum\n\n\nBoolean\n\n\ntrue\n\n\nchange to false if you don't want to use the dialog album\n\n\n\n\n\n\nenableContentFlagging\n\n\nBoolean\n\n\nfalse\n\n\nchange to true if you want to be able to flag content on the chat view\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHCFont\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nsegmentSelectorFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nsegmented control button title font\n\n\n\n\n\n\nchatCellContentFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat message content text font\n\n\n\n\n\n\nchatCellSystemMessageFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat system message content text font\n\n\n\n\n\n\nboldButtonFont\n\n\nUIFont\n\n\nUIFont.boldSystemFont(ofSize: 16)\n\n\nbutton bold font\n\n\n\n\n\n\ndialogSettingFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\ndialog setting UI text font\n\n\n\n\n\n\nnavigationBarTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 17)\n\n\nnavigation bar title font\n\n\n\n\n\n\nchatDialogListSectionTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\ndialog list section title font\n\n\n\n\n\n\nchatTimestampFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 13)\n\n\nchat message time label\n\n\n\n\n\n\nchatDateLabelFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nchat system date label\n\n\n\n\n\n\nlocationTitleFont\n\n\nUIFont\n\n\nUIFont.boldSystemFont(ofSize: 16)\n\n\nlocation message title font\n\n\n\n\n\n\nlocationSubtitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nlocation message description label font\n\n\n\n\n\n\nemptyTableLabelFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nthe font for the label to use when the table is empty\n\n\n\n\n\n\nalbumSectionTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\nalbum date title label font\n\n\n\n\n\n\nchatDialogListSectionTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 15)\n\n\ndialog list section title font\n\n\n\n\n\n\nchatDialogListCellTitleFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 16)\n\n\ndialog list cell title (user name or dialog title) font\n\n\n\n\n\n\nchatDialogListCellTimestampFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 13)\n\n\ndialog list cell timestamp label font\n\n\n\n\n\n\nchatDialogListCellLastMessageFont\n\n\nUIFont\n\n\nUIFont.systemFont(ofSize: 13)\n\n\ndialog list cell last message label font\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHCColorPalette\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nchatBackgroundColor\n\n\nUIColor\n\n\n#0d0e28\n\n\nthe background color of the chat views\n\n\n\n\n\n\nchatOutMessageContentTextColor\n\n\nUIColor\n\n\nwhite\n\n\noutgoing message content text color\n\n\n\n\n\n\nchatInMessageContentTextColor\n\n\nUIColor\n\n\nblack\n\n\nreceived message content text color\n\n\n\n\n\n\nchatUserNamelTextColor\n\n\nUIColor\n\n\nwhite\n\n\nthe user name label color in the chat view\n\n\n\n\n\n\nchatTimeLabelTextColor\n\n\nUIColor\n\n\nlightgray\n\n\ntime stamp label color in chat view\n\n\n\n\n\n\nchatDateLabelTextColor\n\n\nUIColor\n\n\nlightgray\n\n\ndate label color in chat view\n\n\n\n\n\n\nchatSystemMessageColor\n\n\nUIColor\n\n\nlightgray\n\n\nsystem message text color in chat view\n\n\n\n\n\n\nchatSendButtonColor\n\n\nUIColor\n\n\n#0d0e28\n\n\nchat send button color\n\n\n\n\n\n\nchatOutMessageBubbleColor\n\n\nUIColor\n\n\n#5e62bc\n\n\noutgoing message bubble color\n\n\n\n\n\n\nchatInMessageBubbleColor\n\n\nUIColor\n\n\n#93d4f0\n\n\nreceived message bubble color\n\n\n\n\n\n\nchatMessageFailedButtonColor\n\n\nUIColor\n\n\n#f2433d\n\n\ncolor of the button to resend message when message failed to send\n\n\n\n\n\n\nchatVideoPlayIconColor\n\n\nUIColor\n\n\nblack\n\n\nvideo play icon color\n\n\n\n\n\n\nchatLeaveConversationColor\n\n\nUIColor\n\n\n#f2433d\n\n\ncolor of the button to leave a dialog\n\n\n\n\n\n\nchatNewMessageDividerColor\n\n\nUIColor\n\n\n#f5a59a\n\n\ncolor of the new message divider\n\n\n\n\n\n\nchatInMessageLinkColor\n\n\nUIColor\n\n\n#437fb4\n\n\ncolor of the links in received messages\n\n\n\n\n\n\nchatOutMessageLinkColor\n\n\nUIColor\n\n\n#f2433d\n\n\ncolor of the links in outgoing messages\n\n\n\n\n\n\nchatAttachmentIconColor\n\n\nUIColor\n\n\n#f2433d\n\n\ncolor of the button to add attachment\n\n\n\n\n\n\nchatMediaMessageButtonColor\n\n\nUIColor\n\n\n#707378\n\n\ncolor of the media buttons on the media input panel\n\n\n\n\n\n\nchatMediaMessageButtonBgColor\n\n\nUIColor\n\n\n#f9fbfb\n\n\nbackground color of the media buttons on the media input panel\n\n\n\n\n\n\nchatMediaMessageButtonBorderColor\n\n\nUIColor\n\n\n#e6e8e7\n\n\ncolor of the border of media buttons on the media input panel\n\n\n\n\n\n\nchatMediaMessageSelectionPanelColor\n\n\nUIColor\n\n\n#f5f8fa\n\n\ncolor of the media input panel\n\n\n\n\n\n\n\n\nAlbum\n\n\nAlbum is a feature including UI components which group all the images and videos sent inside a dialog in chronological order.\nTo display the album UI, simply use the HCAlbumViewController:\n\n\nlet\n \nalbumVC\n \n=\n \nHCAlbumViewController\n(\ndialogID\n:\n \n[\ndialog\n \nid\n]])\n\n\nself\n.\nnavigationController\n?.\npushViewController\n(\nalbumVC\n,\n \nanimated\n:\n \ntrue\n)\n\n\n\n\n\n\nThere are some UI configuration you can do on the \nHCAlbumViewController\n:\n\n\n\n\n\n\n\n\nHCColorPalette\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\nalbumBackgroundColor\n\n\nUIColor\n\n\n#252326 alpha:0.5\n\n\nalbum view background color\n\n\n\n\n\n\nalbumSectionBackgroundColor\n\n\nUIColor\n\n\n#252326\n\n\nalbum section background color\n\n\n\n\n\n\nalbumNavigationBarIconColor\n\n\nUIColor\n\n\n#ffffff alpha:0.9\n\n\nalbum navigationbar icon color\n\n\n\n\n\n\nalbumNavigationBarTitleColor\n\n\nUIColor\n\n\nwhite\n\n\nalbum navigationbar title color\n\n\n\n\n\n\nalbumNavigationBackgroundColor\n\n\nUIColor\n\n\n#252326\n\n\nalbum navigation background color\n\n\n\n\n\n\nalbumSectionTitleColor\n\n\nUIColor\n\n\nwhite\n\n\nalbum section view background color", 
            "title": "UI Customization"
        }, 
        {
            "location": "/ios/ui_customization/#ui-customization", 
            "text": "AppFriendsUI  provides a lot of useful and convenient UI components for you to use. It can save a lot of your time developing the app. Our  demo app  takes full advantage of the  AppFriendsUI . You could clone the demo app repo from github to see how it uses, interact and customizes the UI components provided by  AppFriendsUI .", 
            "title": "UI Customization"
        }, 
        {
            "location": "/ios/ui_customization/#basic-customization", 
            "text": "HCUIConfiguration  gives you easy access to customize AppFriends UI components. For example, if you want to change the background color of the chat view, you can simply do it by changing the value of  HCColorPalette.chatBackgroundColor", 
            "title": "Basic Customization"
        }, 
        {
            "location": "/ios/ui_customization/#list-of-customizable-values", 
            "text": "HCSettingsConfiguation         Variable Name  Type  Default Value  Description    badgeDisplayIfMuted  Boolean  false  turn this to true if you want to keep badge for a conversation after it's muted.    showNewMessageLine  Boolean  true  switch for new message line display on private dialogs    supportedMessageTypes  ChatSupportedMessageDataTypes  .all  The types of messages you want to support in your chat. This value will apply to all chat. You can also change the types of messages you want to support for each dialog when you initialize the chat view    gifContentRating  AFGifContentRating  .parentalGuide13  change this value to control the gif    showDialogAlbum  Boolean  true  change to false if you don't want to use the dialog album    enableContentFlagging  Boolean  false  change to true if you want to be able to flag content on the chat view        HCFont         Variable Name  Type  Default Value  Description    segmentSelectorFont  UIFont  UIFont.systemFont(ofSize: 15)  segmented control button title font    chatCellContentFont  UIFont  UIFont.systemFont(ofSize: 15)  chat message content text font    chatCellSystemMessageFont  UIFont  UIFont.systemFont(ofSize: 15)  chat system message content text font    boldButtonFont  UIFont  UIFont.boldSystemFont(ofSize: 16)  button bold font    dialogSettingFont  UIFont  UIFont.systemFont(ofSize: 15)  dialog setting UI text font    navigationBarTitleFont  UIFont  UIFont.systemFont(ofSize: 17)  navigation bar title font    chatDialogListSectionTitleFont  UIFont  UIFont.systemFont(ofSize: 15)  dialog list section title font    chatTimestampFont  UIFont  UIFont.systemFont(ofSize: 13)  chat message time label    chatDateLabelFont  UIFont  UIFont.systemFont(ofSize: 15)  chat system date label    locationTitleFont  UIFont  UIFont.boldSystemFont(ofSize: 16)  location message title font    locationSubtitleFont  UIFont  UIFont.systemFont(ofSize: 15)  location message description label font    emptyTableLabelFont  UIFont  UIFont.systemFont(ofSize: 15)  the font for the label to use when the table is empty    albumSectionTitleFont  UIFont  UIFont.systemFont(ofSize: 15)  album date title label font    chatDialogListSectionTitleFont  UIFont  UIFont.systemFont(ofSize: 15)  dialog list section title font    chatDialogListCellTitleFont  UIFont  UIFont.systemFont(ofSize: 16)  dialog list cell title (user name or dialog title) font    chatDialogListCellTimestampFont  UIFont  UIFont.systemFont(ofSize: 13)  dialog list cell timestamp label font    chatDialogListCellLastMessageFont  UIFont  UIFont.systemFont(ofSize: 13)  dialog list cell last message label font        HCColorPalette         Variable Name  Type  Default Value  Description    chatBackgroundColor  UIColor  #0d0e28  the background color of the chat views    chatOutMessageContentTextColor  UIColor  white  outgoing message content text color    chatInMessageContentTextColor  UIColor  black  received message content text color    chatUserNamelTextColor  UIColor  white  the user name label color in the chat view    chatTimeLabelTextColor  UIColor  lightgray  time stamp label color in chat view    chatDateLabelTextColor  UIColor  lightgray  date label color in chat view    chatSystemMessageColor  UIColor  lightgray  system message text color in chat view    chatSendButtonColor  UIColor  #0d0e28  chat send button color    chatOutMessageBubbleColor  UIColor  #5e62bc  outgoing message bubble color    chatInMessageBubbleColor  UIColor  #93d4f0  received message bubble color    chatMessageFailedButtonColor  UIColor  #f2433d  color of the button to resend message when message failed to send    chatVideoPlayIconColor  UIColor  black  video play icon color    chatLeaveConversationColor  UIColor  #f2433d  color of the button to leave a dialog    chatNewMessageDividerColor  UIColor  #f5a59a  color of the new message divider    chatInMessageLinkColor  UIColor  #437fb4  color of the links in received messages    chatOutMessageLinkColor  UIColor  #f2433d  color of the links in outgoing messages    chatAttachmentIconColor  UIColor  #f2433d  color of the button to add attachment    chatMediaMessageButtonColor  UIColor  #707378  color of the media buttons on the media input panel    chatMediaMessageButtonBgColor  UIColor  #f9fbfb  background color of the media buttons on the media input panel    chatMediaMessageButtonBorderColor  UIColor  #e6e8e7  color of the border of media buttons on the media input panel    chatMediaMessageSelectionPanelColor  UIColor  #f5f8fa  color of the media input panel", 
            "title": "List of Customizable Values"
        }, 
        {
            "location": "/ios/ui_customization/#album", 
            "text": "Album is a feature including UI components which group all the images and videos sent inside a dialog in chronological order.\nTo display the album UI, simply use the HCAlbumViewController:  let   albumVC   =   HCAlbumViewController ( dialogID :   [ dialog   id ]])  self . navigationController ?. pushViewController ( albumVC ,   animated :   true )   There are some UI configuration you can do on the  HCAlbumViewController :     HCColorPalette         Variable Name  Type  Default Value  Description    albumBackgroundColor  UIColor  #252326 alpha:0.5  album view background color    albumSectionBackgroundColor  UIColor  #252326  album section background color    albumNavigationBarIconColor  UIColor  #ffffff alpha:0.9  album navigationbar icon color    albumNavigationBarTitleColor  UIColor  white  album navigationbar title color    albumNavigationBackgroundColor  UIColor  #252326  album navigation background color    albumSectionTitleColor  UIColor  white  album section view background color", 
            "title": "Album"
        }, 
        {
            "location": "/ios/dependencies/", 
            "text": "Dependencies List\n\n\nAppFriends SDKs have several external dependencies with open source libraries. We are committed to always update our SDK to be compatible the latest version of the dependencies\n\n\n\n\n\n\n\n\nDependencies\n\n\nLicense Type\n\n\nAppFriendsCore\n\n\nAppFriendsUI\n\n\nVersion (swift4)\n\n\nVersion (swift3)\n\n\n\n\n\n\n\n\n\n\nAlamofire\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 4.5.1\n\n\n~\n 4.0.1\n\n\n\n\n\n\nJWT\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 2.2.0\n\n\n~\n 2.1.0\n\n\n\n\n\n\nCoreStore\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 5.0.0\n\n\n~\n 2.1.3\n\n\n\n\n\n\nCloudinary\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 1.0.15\n\n\n~\n 1.0.15\n\n\n\n\n\n\nSocket.IO-Client-Swift\n\n\nMIT\n\n\n\u2714\n\n\n\u2714\n\n\n~\n 12.0.0\n\n\n~\n 8.1.1\n\n\n\n\n\n\nAlamofireImage\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 4.0.1\n\n\n~\n 3.1.0\n\n\n\n\n\n\nJGProgressHUD\n\n\nMIT\n\n\n\u2718\n\n\n\u2714\n\n\n~\n 4.0.1\n\n\n~\n 1.4", 
            "title": "External Dependencies"
        }, 
        {
            "location": "/ios/dependencies/#dependencies-list", 
            "text": "AppFriends SDKs have several external dependencies with open source libraries. We are committed to always update our SDK to be compatible the latest version of the dependencies     Dependencies  License Type  AppFriendsCore  AppFriendsUI  Version (swift4)  Version (swift3)      Alamofire  MIT  \u2714  \u2714  ~  4.5.1  ~  4.0.1    JWT  MIT  \u2714  \u2714  ~  2.2.0  ~  2.1.0    CoreStore  MIT  \u2714  \u2714  ~  5.0.0  ~  2.1.3    Cloudinary  MIT  \u2714  \u2714  ~  1.0.15  ~  1.0.15    Socket.IO-Client-Swift  MIT  \u2714  \u2714  ~  12.0.0  ~  8.1.1    AlamofireImage  MIT  \u2718  \u2714  ~  4.0.1  ~  3.1.0    JGProgressHUD  MIT  \u2718  \u2714  ~  4.0.1  ~  1.4", 
            "title": "Dependencies List"
        }, 
        {
            "location": "/ios/error/", 
            "text": "Errors\n\n\nAppFriends errors are managed with \nAFError\n class and API.\n\n\n\n\n\n\n\n\nError Code\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n90000\n\n\n.unknownError\n\n\nAn unknown error has occurred\n\n\n\n\n\n\n90001\n\n\n.invalidParams\n\n\nInvalid parameters supplied\n\n\n\n\n\n\n90002\n\n\n.sdkNotInitialized\n\n\nSDK is not initialized properly\n\n\n\n\n\n\n90003\n\n\n.userNotLoggedIn\n\n\nNeed to login first\n\n\n\n\n\n\n20005\n\n\n.dialogNotFound\n\n\nDialog is not found\n\n\n\n\n\n\n90007\n\n\n.userAlreadyLoggedIn\n\n\nTrying to login while there's already an user logged in\n\n\n\n\n\n\n90009\n\n\n.logoutWhenNotLoggedIn\n\n\nTrying to logout while there isn't any user logged in\n\n\n\n\n\n\n90500\n\n\n.serverError\n\n\nServer error\n\n\n\n\n\n\n30001\n\n\n.userNotFound\n\n\nUser not found\n\n\n\n\n\n\n91000\n\n\n.requestIsTooFrequent\n\n\nRequest is too frequent", 
            "title": "Errors"
        }, 
        {
            "location": "/ios/error/#errors", 
            "text": "AppFriends errors are managed with  AFError  class and API.     Error Code  Type  Description      90000  .unknownError  An unknown error has occurred    90001  .invalidParams  Invalid parameters supplied    90002  .sdkNotInitialized  SDK is not initialized properly    90003  .userNotLoggedIn  Need to login first    20005  .dialogNotFound  Dialog is not found    90007  .userAlreadyLoggedIn  Trying to login while there's already an user logged in    90009  .logoutWhenNotLoggedIn  Trying to logout while there isn't any user logged in    90500  .serverError  Server error    30001  .userNotFound  User not found    91000  .requestIsTooFrequent  Request is too frequent", 
            "title": "Errors"
        }, 
        {
            "location": "/android/quick_start/", 
            "text": "AppFriends Android SDK\n\n\n1. Create an AppFriends Application\n\n\nBefore start using AppFriends, you need to create an application on the \ndashboard\n Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsUI, please checkout our repo:\n\n\n\n\nAndroid Sample App\n\n\n\n\n2. Integrate AppFriends SDK\n\n\nGradle Integration\n\n\nAppFriends Android SDK is available as a Gradle dependency, add the following to your application's \nbuild.gradle\n file:\n\n\nrepositories\n \n{\n\n    \nmaven\n \n{\n \nurl\n \nhttps://raw.githubusercontent.com/Hacknocraft/AppFriendsAndroidCore/master/\n \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n   \n// AppFriends\n\n   \ncompile\n \nme.appfriends.sdk:ui:3.2.4\n\n\n}\n\n\n\n\n\n\nOther Dependencies\n\n\nAppFriends Android SDK leverages several commonly used 3rd party libraries to provide easy to use programming interface as well as a powerful set of UI components. Below is a list of important ones you should be aware of:\n\n\n\n\n\n\nRxJava 1.x (2.x support is coming soon!) to perform many of the asynchronous operations in order to be compatible with application architectures utilizing MVP or MVVM.\n\n\n\n\n\n\nAndroid Support library version 25.1.0\n\n\n\n\n\n\nOKHttp version 3.6.0\n\n\n\n\n\n\nIt is recommended that you use the same or more recent versions of these libraries in order to maintain compatibility.\n\n\nHowever, if your application uses a version of of the libraries that result in conflicts and you would like to maintain your version:\n\n\ncompile\n \n(\ncom.android.support:support-v4:23.4.0\n)\n \n{\n\n \nforce\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n3. AppFriends SDK Initialization\n\n\nAfter logging into your admin panel on \nAppFriends.me\n and creating an application, you can find your \nApp ID\n and \nApp Secret\n. Add them to your \nAndroidManifest.xml\n file under \napplication\n.\n\n\nmeta-data\n\n   \nandroid:name=\nme.appfriends.AppID\n\n   \nandroid:value=\n[APPFRIENDS_ID]\n \n/\n\n\n\nmeta-data\n\n   \nandroid:name=\nme.appfriends.AppSecret\n\n   \nandroid:value=\n[APPFRIENDS_SECRET]\n \n/\n\n\n\n\n\n\nAppFriends SDK must be initialized in your custom \nApplication\n class:\n\n\npublic\n \nclass\n \nMyApplication\n \nextends\n \nApplication\n \n{\n\n   \n@Override\n\n   \npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n       \nsuper\n.\nonCreate\n();\n\n\n       \nAppFriends\n \ninstance\n \n=\n \nAppFriends\n.\ngetInstance\n();\n\n       \ninstance\n.\ninit\n(\ngetApplicationContext\n());\n\n   \n}\n\n\n}\n\n\n\n\n\n\n4. Login / Sign Up\n\n\nAppFriends' user system augments your existing user system through unique user ids. Please see \nsessions\n for detail\n\n\n5. UI\n\n\nThere are a lot of ready to use UI components in the AppFriendsUI SDK. They can save you hundreds of hours of development. To learn the UI components and how to use them, please see \nui components section\n\n\n6. Full JavaDoc SDK Documentation\n\n\n\n\nJavadoc\n\n\n\n\nPush Notifications\n\n\nPlease see \nPush Notifications Guide", 
            "title": "Quick Start"
        }, 
        {
            "location": "/android/quick_start/#appfriends-android-sdk", 
            "text": "", 
            "title": "AppFriends Android SDK"
        }, 
        {
            "location": "/android/quick_start/#1-create-an-appfriends-application", 
            "text": "Before start using AppFriends, you need to create an application on the  dashboard  Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsUI, please checkout our repo:   Android Sample App", 
            "title": "1. Create an AppFriends Application"
        }, 
        {
            "location": "/android/quick_start/#2-integrate-appfriends-sdk", 
            "text": "", 
            "title": "2. Integrate AppFriends SDK"
        }, 
        {
            "location": "/android/quick_start/#gradle-integration", 
            "text": "AppFriends Android SDK is available as a Gradle dependency, add the following to your application's  build.gradle  file:  repositories   { \n     maven   {   url   https://raw.githubusercontent.com/Hacknocraft/AppFriendsAndroidCore/master/   }  }  dependencies   { \n    // AppFriends \n    compile   me.appfriends.sdk:ui:3.2.4  }", 
            "title": "Gradle Integration"
        }, 
        {
            "location": "/android/quick_start/#other-dependencies", 
            "text": "AppFriends Android SDK leverages several commonly used 3rd party libraries to provide easy to use programming interface as well as a powerful set of UI components. Below is a list of important ones you should be aware of:    RxJava 1.x (2.x support is coming soon!) to perform many of the asynchronous operations in order to be compatible with application architectures utilizing MVP or MVVM.    Android Support library version 25.1.0    OKHttp version 3.6.0    It is recommended that you use the same or more recent versions of these libraries in order to maintain compatibility.  However, if your application uses a version of of the libraries that result in conflicts and you would like to maintain your version:  compile   ( com.android.support:support-v4:23.4.0 )   { \n  force   =   true ;  }", 
            "title": "Other Dependencies"
        }, 
        {
            "location": "/android/quick_start/#3-appfriends-sdk-initialization", 
            "text": "After logging into your admin panel on  AppFriends.me  and creating an application, you can find your  App ID  and  App Secret . Add them to your  AndroidManifest.xml  file under  application .  meta-data \n    android:name= me.appfriends.AppID \n    android:value= [APPFRIENDS_ID]   /  meta-data \n    android:name= me.appfriends.AppSecret \n    android:value= [APPFRIENDS_SECRET]   /   AppFriends SDK must be initialized in your custom  Application  class:  public   class   MyApplication   extends   Application   { \n    @Override \n    public   void   onCreate ()   { \n        super . onCreate (); \n\n        AppFriends   instance   =   AppFriends . getInstance (); \n        instance . init ( getApplicationContext ()); \n    }  }", 
            "title": "3. AppFriends SDK Initialization"
        }, 
        {
            "location": "/android/quick_start/#4-login-sign-up", 
            "text": "AppFriends' user system augments your existing user system through unique user ids. Please see  sessions  for detail", 
            "title": "4. Login / Sign Up"
        }, 
        {
            "location": "/android/quick_start/#5-ui", 
            "text": "There are a lot of ready to use UI components in the AppFriendsUI SDK. They can save you hundreds of hours of development. To learn the UI components and how to use them, please see  ui components section", 
            "title": "5. UI"
        }, 
        {
            "location": "/android/quick_start/#6-full-javadoc-sdk-documentation", 
            "text": "Javadoc", 
            "title": "6. Full JavaDoc SDK Documentation"
        }, 
        {
            "location": "/android/quick_start/#push-notifications", 
            "text": "Please see  Push Notifications Guide", 
            "title": "Push Notifications"
        }, 
        {
            "location": "/android/sessions/", 
            "text": "Login\n\n\nBefore an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require\n\n\n\n\nan username\n, this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.\n\n\nan unique user ID\n, this should be the same user id that you use in your app to identify the user\n\n\n\n\nAppFriends\n.\ngetInstance\n().\nlogin\n(\nuserID\n,\n \nusername\n);\n\n         \n.\nobserveOn\n(\nAndroidSchedulers\n.\nmainThread\n())\n\n         \n.\nsubscribe\n(\nnew\n \nSubscriber\nBoolean\n()\n \n{\n\n             \n@Override\n\n             \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n             \n}\n\n\n             \n@Override\n\n             \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                 \n// Handle any errors\n\n             \n}\n\n\n             \n@Override\n\n             \npublic\n \nvoid\n \nonNext\n(\nBoolean\n \nloggedIn\n)\n \n{\n\n                 \n// Handle login status\n\n             \n}\n\n         \n});\n\n\n\n\n\n\nYou can check if a user has logged in to AppFriends or not by using:\n\n\nif\n \n(\nAppFriends\n.\ngetInstance\n().\nlogOut\n())\n \n{}\n\n  \n// user has logged in to AppFriends\n\n\n}\n\n\n\n\n\n\nLogout\n\n\nWhen an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:\n\n\nAppFriends\n.\ngetInstance\n().\nlogOut\n();", 
            "title": "Sessions"
        }, 
        {
            "location": "/android/sessions/#login", 
            "text": "Before an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require   an username , this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.  an unique user ID , this should be the same user id that you use in your app to identify the user   AppFriends . getInstance (). login ( userID ,   username ); \n          . observeOn ( AndroidSchedulers . mainThread ()) \n          . subscribe ( new   Subscriber Boolean ()   { \n              @Override \n              public   void   onCompleted ()   { \n              } \n\n              @Override \n              public   void   onError ( Throwable   e )   { \n                  // Handle any errors \n              } \n\n              @Override \n              public   void   onNext ( Boolean   loggedIn )   { \n                  // Handle login status \n              } \n          });   You can check if a user has logged in to AppFriends or not by using:  if   ( AppFriends . getInstance (). logOut ())   {} \n   // user has logged in to AppFriends  }", 
            "title": "Login"
        }, 
        {
            "location": "/android/sessions/#logout", 
            "text": "When an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:  AppFriends . getInstance (). logOut ();", 
            "title": "Logout"
        }, 
        {
            "location": "/android/users/", 
            "text": "Users\n\n\nThe users API interface is provided by \nUserService\n. In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via \nadmin API\n, and AppFriends SDK also provides a lot of convenient interface for you to work with.\n\n\nUser Update\n\n\nWhen user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.\n\n\nUpdate Username:\n\n\nString\n \nusername\n \n=\n \na new username\n\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nupdateUserName\n(\nusername\n)\n\n                \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                        \n// Error\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                        \n// Success\n\n                    \n}\n\n                \n});\n\n\n\n\n\n\nUpdate User Avatar:\n\n\nString\n \navatarURL\n \n=\n \nhttps://someavatar.jpg\n\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nupdateUserAvatar\n(\navatarURL\n)\n\n                \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                        \n// Error\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                        \n// Success\n\n                    \n}\n\n                \n});\n\n\n\n\n\n\nFetch Information of an User\n\n\nYou can fetch the information of an user.\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\ngetUser\n(\nsome_user_id\n)\n\n                \n.\nsubscribe\n(\nnew\n \nSubscriber\nUser\n()\n \n{\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                        \n// Error\n\n                    \n}\n\n\n                    \n@Override\n\n                    \npublic\n \nvoid\n \nonNext\n(\nUser\n \nuser\n)\n \n{\n\n                        \n// Success\n\n                    \n}\n\n                \n});", 
            "title": "Users"
        }, 
        {
            "location": "/android/users/#users", 
            "text": "The users API interface is provided by  UserService . In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via  admin API , and AppFriends SDK also provides a lot of convenient interface for you to work with.", 
            "title": "Users"
        }, 
        {
            "location": "/android/users/#user-update", 
            "text": "When user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.  Update Username:  String   username   =   a new username  AppFriends . getInstance (). userService (). updateUserName ( username ) \n                 . subscribe ( new   CompletableSubscriber ()   { \n                     @Override \n                     public   void   onCompleted ()   { \n\n                     } \n\n                     @Override \n                     public   void   onError ( Throwable   e )   { \n                         // Error \n                     } \n\n                     @Override \n                     public   void   onSubscribe ( Subscription   d )   { \n                         // Success \n                     } \n                 });   Update User Avatar:  String   avatarURL   =   https://someavatar.jpg  AppFriends . getInstance (). userService (). updateUserAvatar ( avatarURL ) \n                 . subscribe ( new   CompletableSubscriber ()   { \n                     @Override \n                     public   void   onCompleted ()   { \n\n                     } \n\n                     @Override \n                     public   void   onError ( Throwable   e )   { \n                         // Error \n                     } \n\n                     @Override \n                     public   void   onSubscribe ( Subscription   d )   { \n                         // Success \n                     } \n                 });", 
            "title": "User Update"
        }, 
        {
            "location": "/android/users/#fetch-information-of-an-user", 
            "text": "You can fetch the information of an user.  AppFriends . getInstance (). userService (). getUser ( some_user_id ) \n                 . subscribe ( new   Subscriber User ()   { \n                     @Override \n                     public   void   onCompleted ()   { \n\n                     } \n\n                     @Override \n                     public   void   onError ( Throwable   e )   { \n                         // Error \n                     } \n\n                     @Override \n                     public   void   onNext ( User   user )   { \n                         // Success \n                     } \n                 });", 
            "title": "Fetch Information of an User"
        }, 
        {
            "location": "/android/social/", 
            "text": "Social API\n\n\nAppFriends offers social features to help you build applications to connect users and store their social relationship.\n\n\nFollow/Unfollow and Friends\n\n\nUser can follow/unfollow one another.\nTo follow a user:\n\n\nString\n \nuserId\n \n=\n \nanother user\ns id\n;\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nfollowUser\n(\nuserId\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                \n// Success\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nTo unfollow a user\n\n\nString\n \nuserId\n \n=\n \nanother user\ns id\n;\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nfollowUser\n(\nuserId\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                \n// Success\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nTo get a list of the followers of the current user\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\ngetFollowers\n()\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nString\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nString\n \nstrings\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nTo get a list of users that the current user is following\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\ngetFollowing\n()\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nString\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nString\n \nstrings\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nIn AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\ngetFriends\n()\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nString\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nString\n \nstrings\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nBlock/Unblock\n\n\nAn user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:\n\n\nString\n \nuserId\n \n=\n \nanother user\ns id\n;\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nblockUser\n(\nuserId\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                \n// Success\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nUnblock a user:\n\n\nString\n \nuserId\n \n=\n \nanother user\ns id\n;\n\n\nAppFriends\n.\ngetInstance\n().\nuserService\n().\nunblockUser\n(\nuserId\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n                \n// Success\n\n            \n}\n\n        \n});", 
            "title": "Social"
        }, 
        {
            "location": "/android/social/#social-api", 
            "text": "AppFriends offers social features to help you build applications to connect users and store their social relationship.", 
            "title": "Social API"
        }, 
        {
            "location": "/android/social/#followunfollow-and-friends", 
            "text": "User can follow/unfollow one another.\nTo follow a user:  String   userId   =   another user s id ;  AppFriends . getInstance (). userService (). followUser ( userId ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n                 // Success \n             } \n         });   To unfollow a user  String   userId   =   another user s id ;  AppFriends . getInstance (). userService (). followUser ( userId ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n                 // Success \n             } \n         });   To get a list of the followers of the current user  AppFriends . getInstance (). userService (). getFollowers () \n         . subscribe ( new   Subscriber List String ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List String   strings )   { \n\n             } \n         });   To get a list of users that the current user is following  AppFriends . getInstance (). userService (). getFollowing () \n         . subscribe ( new   Subscriber List String ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List String   strings )   { \n\n             } \n         });   In AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:  AppFriends . getInstance (). userService (). getFriends () \n         . subscribe ( new   Subscriber List String ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List String   strings )   { \n\n             } \n         });", 
            "title": "Follow/Unfollow and Friends"
        }, 
        {
            "location": "/android/social/#blockunblock", 
            "text": "An user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:  String   userId   =   another user s id ;  AppFriends . getInstance (). userService (). blockUser ( userId ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n                 // Success \n             } \n         });   Unblock a user:  String   userId   =   another user s id ;  AppFriends . getInstance (). userService (). unblockUser ( userId ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n                 // Success \n             } \n         });", 
            "title": "Block/Unblock"
        }, 
        {
            "location": "/android/dialogs/", 
            "text": "Open Channels\n\n\nOpen channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with \nGET /channels\n API. A user can only be inside one channel at a time.\n\n\nList all channels:\n\n\nAppFriends\n.\ngetInstance\n().\nchannelService\n().\ngetChannels\n()\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nChannel\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nChannel\n \nchannels\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nThe easiest way to use open channel is by using \nChannelActivity\n from your current activity.\n\n\nstartActivity\n(\nChannelActivity\n.\nactionView\n(\nthis\n,\n \nchannel\n.\nid\n));\n\n\n\n\n\n\nPrivate Dialogs\n\n\nListing All Private Dialogs\n\n\nAppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:\n\n\nAppFriends\n.\ngetInstance\n().\ndialogService\n().\ngetDialogs\n()\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nDialog\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nDialog\n \ndialogs\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nGroup Dialog\n\n\nA group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:\n\n\nList\nString\n \ndialogMemberIds\n \n=\n \nnew\n \nArrayList\n();\n\n\ndialogMemberIds\n.\nadd\n(\nuser id of user you would like to invite\n);\n\n\n\nAppFriends\n.\ngetInstance\n().\ndialogService\n().\ncreateDialog\n(\ndialog title\n,\n \ndialogMemberIds\n)\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nDialog\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nDialog\n \ndialog\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n})\n\n\n\n\n\n\nIndividual Dialog\n\n\nAn individual dialog is a private dialog between two users. If you create a group dialog with only 1 user id as member id, then it defaults to an individual dialog.\n\n\nMute/Unmute\n\n\nYou can mute/unmute a dialog by:\n\n\nAppFriends\n.\ngetInstance\n().\ndialogService\n().\nmuteDialog\n(\ndialog id\n,\n \ntrue\n)\n \n// or false\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nSending Messages\n\n\nSending text:\n\n\nString\n \ndialogId\n \n=\n \nsome dialog id\n;\n\n\nDialog\n.\nDialogType\n \ntype\n \n=\n \nDialog\n.\nDialogType\n.\nINDIVIDUAL\n;\n \n// or Dialog.DialogType.GROUP\n\n\nString\n \nmessage\n \n=\n \nmessage body\n;\n\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n.\nsendTextMessage\n(\ndialogId\n,\n \ntype\n,\n \nmessage\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n                \n// Success\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nSending an image:\n\n\nString\n \ndialogId\n \n=\n \nsome dialog id\n;\n\n\nDialog\n.\nDialogType\n \ntype\n \n=\n \nDialog\n.\nDialogType\n.\nINDIVIDUAL\n;\n \n// or Dialog.DialogType.GROUP\n\n\nString\n \nimageUrl\n \n=\n \nURL of image\n;\n\n\nString\n \nthumbUrl\n \n=\n \nURL of thumbnail\n;\n\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n.\nsendImageMessage\n(\ndialogId\n,\n \ntype\n,\n \nimageUrl\n,\n \nthumbUrl\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n                \n// Success\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nSending a video:\n\n\n// dialog is an AFDialog instance\n\n\nString\n \ndialogId\n \n=\n \nsome dialog id\n;\n\n\nDialog\n.\nDialogType\n \ntype\n \n=\n \nDialog\n.\nDialogType\n.\nINDIVIDUAL\n;\n \n// or Dialog.DialogType.GROUP\n\n\nString\n \nvideoMediaUrl\n \n=\n \nURL of video\n;\n\n\nString\n \nthumbUrl\n \n=\n \nURL of thumbnail\n;\n\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n.\nsendVideoMessage\n(\ndialogId\n,\n \ntype\n,\n \nvideoMediaUrl\n,\n \nthumbUrl\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n                \n// Success\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nSending a gif\n\n\nString\n \ndialogId\n \n=\n \nsome dialog id\n;\n\n\nDialog\n.\nDialogType\n \ntype\n \n=\n \nDialog\n.\nDialogType\n.\nINDIVIDUAL\n;\n \n// or Dialog.DialogType.GROUP\n\n\nString\n \ngifImageUrl\n \n=\n \nURL of gif image\n;\n\n\nString\n \nthumbUrl\n \n=\n \nURL of thumbnail\n;\n\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n.\nsendImageMessage\n(\ndialogId\n,\n \ntype\n,\n \ngifImageUrl\n,\n \nthumbUrl\n)\n\n        \n.\nsubscribe\n(\nnew\n \nCompletableSubscriber\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n                \n// Success\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \n// Error\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonSubscribe\n(\nSubscription\n \nd\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nMessage Receipts\n\n\nYou can check the receipts of a message by using:\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n().\ngetReadReceipts\n(\nmessageTempID\n)\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nList\nString\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nList\nString\n \nreceivedUserIds\n)\n \n{\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\nSending Receipts:\nIf you use the chat view provided in AppFriendsUI SDK, you do not need to manually send the receipts. The UI SDK automatically handles it. If you wish to send receipts yourself, it can be done via \nChatService\n:\n\n\n// message is of Message type\n\n\nAppFriends\n.\ngetInstance\n().\nchatService\n().\nreadMessage\n(\nmessage\n);", 
            "title": "Dialogs and Messaging"
        }, 
        {
            "location": "/android/dialogs/#open-channels", 
            "text": "Open channel is a public chat, where all of your users can participate. It can handle thousands of users in one channel. ex) Twitch-style public chat.\nYou can create open channel from your AppFriends web control panel. After a channel is created, all of your users can see all the channels with  GET /channels  API. A user can only be inside one channel at a time.  List all channels:  AppFriends . getInstance (). channelService (). getChannels () \n         . subscribe ( new   Subscriber List Channel ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List Channel   channels )   { \n\n             } \n         });   The easiest way to use open channel is by using  ChannelActivity  from your current activity.  startActivity ( ChannelActivity . actionView ( this ,   channel . id ));", 
            "title": "Open Channels"
        }, 
        {
            "location": "/android/dialogs/#private-dialogs", 
            "text": "", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/android/dialogs/#listing-all-private-dialogs", 
            "text": "AppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:  AppFriends . getInstance (). dialogService (). getDialogs () \n         . subscribe ( new   Subscriber List Dialog ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List Dialog   dialogs )   { \n\n             } \n         });", 
            "title": "Listing All Private Dialogs"
        }, 
        {
            "location": "/android/dialogs/#group-dialog", 
            "text": "A group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog. To start a group dialog, you need to first create a group dialog:  List String   dialogMemberIds   =   new   ArrayList ();  dialogMemberIds . add ( user id of user you would like to invite );  AppFriends . getInstance (). dialogService (). createDialog ( dialog title ,   dialogMemberIds ) \n         . subscribe ( new   Subscriber Dialog ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( Dialog   dialog )   { \n\n             } \n         });  })", 
            "title": "Group Dialog"
        }, 
        {
            "location": "/android/dialogs/#individual-dialog", 
            "text": "An individual dialog is a private dialog between two users. If you create a group dialog with only 1 user id as member id, then it defaults to an individual dialog.", 
            "title": "Individual Dialog"
        }, 
        {
            "location": "/android/dialogs/#muteunmute", 
            "text": "You can mute/unmute a dialog by:  AppFriends . getInstance (). dialogService (). muteDialog ( dialog id ,   true )   // or false \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n\n             } \n         });", 
            "title": "Mute/Unmute"
        }, 
        {
            "location": "/android/dialogs/#sending-messages", 
            "text": "Sending text:  String   dialogId   =   some dialog id ;  Dialog . DialogType   type   =   Dialog . DialogType . INDIVIDUAL ;   // or Dialog.DialogType.GROUP  String   message   =   message body ;  AppFriends . getInstance (). chatService . sendTextMessage ( dialogId ,   type ,   message ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n                 // Success \n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n\n             } \n         });   Sending an image:  String   dialogId   =   some dialog id ;  Dialog . DialogType   type   =   Dialog . DialogType . INDIVIDUAL ;   // or Dialog.DialogType.GROUP  String   imageUrl   =   URL of image ;  String   thumbUrl   =   URL of thumbnail ;  AppFriends . getInstance (). chatService . sendImageMessage ( dialogId ,   type ,   imageUrl ,   thumbUrl ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n                 // Success \n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n\n             } \n         });   Sending a video:  // dialog is an AFDialog instance  String   dialogId   =   some dialog id ;  Dialog . DialogType   type   =   Dialog . DialogType . INDIVIDUAL ;   // or Dialog.DialogType.GROUP  String   videoMediaUrl   =   URL of video ;  String   thumbUrl   =   URL of thumbnail ;  AppFriends . getInstance (). chatService . sendVideoMessage ( dialogId ,   type ,   videoMediaUrl ,   thumbUrl ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n                 // Success \n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n\n             } \n         });   Sending a gif  String   dialogId   =   some dialog id ;  Dialog . DialogType   type   =   Dialog . DialogType . INDIVIDUAL ;   // or Dialog.DialogType.GROUP  String   gifImageUrl   =   URL of gif image ;  String   thumbUrl   =   URL of thumbnail ;  AppFriends . getInstance (). chatService . sendImageMessage ( dialogId ,   type ,   gifImageUrl ,   thumbUrl ) \n         . subscribe ( new   CompletableSubscriber ()   { \n             @Override \n             public   void   onCompleted ()   { \n                 // Success \n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 // Error \n             } \n\n             @Override \n             public   void   onSubscribe ( Subscription   d )   { \n\n             } \n         });", 
            "title": "Sending Messages"
        }, 
        {
            "location": "/android/dialogs/#message-receipts", 
            "text": "You can check the receipts of a message by using:  AppFriends . getInstance (). chatService (). getReadReceipts ( messageTempID ) \n         . subscribe ( new   Subscriber List String ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n\n             } \n\n             @Override \n             public   void   onNext ( List String   receivedUserIds )   { \n\n             } \n         });   Sending Receipts:\nIf you use the chat view provided in AppFriendsUI SDK, you do not need to manually send the receipts. The UI SDK automatically handles it. If you wish to send receipts yourself, it can be done via  ChatService :  // message is of Message type  AppFriends . getInstance (). chatService (). readMessage ( message );", 
            "title": "Message Receipts"
        }, 
        {
            "location": "/android/push/", 
            "text": "Receiving Message Push Notification\n\n\nOnce configuration for server side push notification is done on the AppFriends dashboard, you can easily register the app/client side push token with AppFriends and receive push notification:\n\n\nAppFriends\n.\ngetInstance\n().\npushService\n().\nupdatePushToken\n(\nuserId\n,\n\n        \nFirebaseInstanceId\n.\ngetInstance\n().\ngetToken\n())\n\n        \n.\nsubscribe\n(\nnew\n \nSubscriber\nBoolean\n()\n \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonCompleted\n()\n \n{\n\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonError\n(\nThrowable\n \ne\n)\n \n{\n\n                \nLog\n.\nd\n(\nTAG\n,\n \ne\n.\ngetMessage\n());\n\n            \n}\n\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nonNext\n(\nBoolean\n \nregistered\n)\n \n{\n\n                \nLog\n.\nd\n(\nTAG\n,\n \npush token registered: \n \n+\n \nregistered\n);\n\n            \n}\n\n        \n});", 
            "title": "Push Notifications Guide"
        }, 
        {
            "location": "/android/push/#receiving-message-push-notification", 
            "text": "Once configuration for server side push notification is done on the AppFriends dashboard, you can easily register the app/client side push token with AppFriends and receive push notification:  AppFriends . getInstance (). pushService (). updatePushToken ( userId , \n         FirebaseInstanceId . getInstance (). getToken ()) \n         . subscribe ( new   Subscriber Boolean ()   { \n             @Override \n             public   void   onCompleted ()   { \n\n             } \n\n             @Override \n             public   void   onError ( Throwable   e )   { \n                 Log . d ( TAG ,   e . getMessage ()); \n             } \n\n             @Override \n             public   void   onNext ( Boolean   registered )   { \n                 Log . d ( TAG ,   push token registered:    +   registered ); \n             } \n         });", 
            "title": "Receiving Message Push Notification"
        }, 
        {
            "location": "/android/encryption/", 
            "text": "Encryption\n\n\nEncryption extension for AppFriends Android SDK is in Beta and will be released very soon, for more information, please refer to our iOS implementation \narticle\n  and checkout its capabilities.", 
            "title": "Encryption"
        }, 
        {
            "location": "/android/encryption/#encryption", 
            "text": "Encryption extension for AppFriends Android SDK is in Beta and will be released very soon, for more information, please refer to our iOS implementation  article   and checkout its capabilities.", 
            "title": "Encryption"
        }, 
        {
            "location": "/android/ui/", 
            "text": "Integrating AppFriends UI into your application\n\n\nAppFriends Android SDK provides a full suite of ready-to-use UI components for simplified UI integrations.\n\n\nThere are 3 UI integration modes, in order to decreasing difficulty but increased customization:\n\n\n1. Simple / Standalone Mode (Recommended)\n\n\nLaunching standalone AppFriends UI after a user has logged in, this will launch the full AppFriends UI with channel, group and private conversation views in separate activities (fullscreen or partial slide out).\n\n\nIntent intent = new Intent(getContext(), ConversationsActivity.class);\nstartActivity(intent);\n\n\n\n\n\n2. Embedded Mode\n\n\nIt is also possible to embed AppFriends UI components into your existing application UI flow such as fragments. The AppFriends views all have integrated SDK linking thus reducing the need for you to connect with the core network and caching SDK.\n\n\nChat View\n\n\nThe chat view which displays the conversation and allows the user to type and send different types of messages. For public channel chat and private chat, we have two different view controller classes for you to use.  \n\n\nPrivate Dialogs\n\n\nFor private chat including 1:1 chat and private group chat, the main class is \nDialogActivity\n. This activity offers typing indicator display, text input, media message input and messages display.\n\n\n\n\n\n\nBefore entering a dialog view, you must create the dialog. Then you can pass the dialog ID to the \nDialogActivity\n:\n\n\nString\n \ndialogId\n \n=\n \na dialog\ns id\n;\n\n\n\nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nDialogActivity\n.\nclass\n);\n\n\nintent\n.\nputExtra\n(\nDialogActivity\n.\nEXTRA_DIALOG_ID\n,\n \ndialogId\n);\n\n\nstartActivity\n(\nintent\n);\n\n\n\n\n\n\nPublic Channel chat\n\n\nFor public channel chat, the main class is \nChannelActivity\n. This activity offers typing indicator display, text input, media message input and messages display similar to the Chat View.\n\n\nString\n \nchannelId\n \n=\n \na channel\ns id\n;\n\n\n\nstartActivity\n(\nChannelActivity\n.\nactionView\n(\nthis\n,\n \nchannelId\n));\n\n\n\n\n\n\nDialogs List\n\n\nYou often need a dialogs list to display a user's past conversations so that he can quickly go back to or switch between conversations. The main class is \nConversationsActivity\n. In dialog list, we already handle new message badge, message preview and sorting the new dialog on top and etc. To use \nConversationsActivity\n, you can similar initialize it programmatically or use xib/storyboard. It will fetch past dialogs of the current user and when new messages are sent to the user, it will show up here.\n\n\n\n\nThe following views can be directly embedded into your XML layouts:\n\n\n\n\nme.appfriends.ui.dialoglist.DialogListRecyclerView\n\n\nme.appfriends.ui.channellist.ChannelListRecyclerView\n\n\n\n\nThe chat window is a separate activity that you can either launch or extend called \nDialogActivity\n.\n\n\nOur sample app also provides extensive details on how to embedded these UI components.\n\n\n3. Custom Mode\n\n\nIf components supplied by the AppFriends UI SDK does not meet your needs, you may elect not to use the UI library and directly interact with the core library. To do so, replace \ncompile 'me.appfriends.sdk:ui:3.2.2'\n with \ncompile 'me.appfriends.sdk:core:3.2.2'\n in your \nbuild.gradle\n configuration file. The core SDK provides no UI elements but contains full asynchronous network, caching and persistence functionalities.", 
            "title": "UI Integration Guide"
        }, 
        {
            "location": "/android/ui/#integrating-appfriends-ui-into-your-application", 
            "text": "AppFriends Android SDK provides a full suite of ready-to-use UI components for simplified UI integrations.  There are 3 UI integration modes, in order to decreasing difficulty but increased customization:", 
            "title": "Integrating AppFriends UI into your application"
        }, 
        {
            "location": "/android/ui/#1-simple-standalone-mode-recommended", 
            "text": "Launching standalone AppFriends UI after a user has logged in, this will launch the full AppFriends UI with channel, group and private conversation views in separate activities (fullscreen or partial slide out).  Intent intent = new Intent(getContext(), ConversationsActivity.class);\nstartActivity(intent);", 
            "title": "1. Simple / Standalone Mode (Recommended)"
        }, 
        {
            "location": "/android/ui/#2-embedded-mode", 
            "text": "It is also possible to embed AppFriends UI components into your existing application UI flow such as fragments. The AppFriends views all have integrated SDK linking thus reducing the need for you to connect with the core network and caching SDK.", 
            "title": "2. Embedded Mode"
        }, 
        {
            "location": "/android/ui/#chat-view", 
            "text": "The chat view which displays the conversation and allows the user to type and send different types of messages. For public channel chat and private chat, we have two different view controller classes for you to use.", 
            "title": "Chat View"
        }, 
        {
            "location": "/android/ui/#private-dialogs", 
            "text": "For private chat including 1:1 chat and private group chat, the main class is  DialogActivity . This activity offers typing indicator display, text input, media message input and messages display.    Before entering a dialog view, you must create the dialog. Then you can pass the dialog ID to the  DialogActivity :  String   dialogId   =   a dialog s id ;  Intent   intent   =   new   Intent ( this ,   DialogActivity . class );  intent . putExtra ( DialogActivity . EXTRA_DIALOG_ID ,   dialogId );  startActivity ( intent );", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/android/ui/#public-channel-chat", 
            "text": "For public channel chat, the main class is  ChannelActivity . This activity offers typing indicator display, text input, media message input and messages display similar to the Chat View.  String   channelId   =   a channel s id ;  startActivity ( ChannelActivity . actionView ( this ,   channelId ));", 
            "title": "Public Channel chat"
        }, 
        {
            "location": "/android/ui/#dialogs-list", 
            "text": "You often need a dialogs list to display a user's past conversations so that he can quickly go back to or switch between conversations. The main class is  ConversationsActivity . In dialog list, we already handle new message badge, message preview and sorting the new dialog on top and etc. To use  ConversationsActivity , you can similar initialize it programmatically or use xib/storyboard. It will fetch past dialogs of the current user and when new messages are sent to the user, it will show up here.   The following views can be directly embedded into your XML layouts:   me.appfriends.ui.dialoglist.DialogListRecyclerView  me.appfriends.ui.channellist.ChannelListRecyclerView   The chat window is a separate activity that you can either launch or extend called  DialogActivity .  Our sample app also provides extensive details on how to embedded these UI components.", 
            "title": "Dialogs List"
        }, 
        {
            "location": "/android/ui/#3-custom-mode", 
            "text": "If components supplied by the AppFriends UI SDK does not meet your needs, you may elect not to use the UI library and directly interact with the core library. To do so, replace  compile 'me.appfriends.sdk:ui:3.2.2'  with  compile 'me.appfriends.sdk:core:3.2.2'  in your  build.gradle  configuration file. The core SDK provides no UI elements but contains full asynchronous network, caching and persistence functionalities.", 
            "title": "3. Custom Mode"
        }, 
        {
            "location": "/android/customization/", 
            "text": "AppFriends UI Customization\n\n\nAppFriends Android SDK's UI components provide a set of tools for easy styling which can be configured and customized to match your app's style guide through style configurations as well as overriding XML attribute.\n\n\nIf you are using Simple or Embedded mode in the \nUI Guide\n, overriding the AppFriends' default style attributes is the simplest customization option.\n\n\nBelow is a simple example of styling the pop out view with the resulting visual effects compared to the standard view.\n\n\nstyle name=\nAppFriends.DialogList\n\n   \nitem name=\ndialogTitleTextColor\n@android:color/holo_red_light\n/item\n\n   \nitem name=\ndialogUnreadTitleTextColor\n@android:color/holo_red_light\n/item\n\n   \nitem name=\ndialogUnreadTitleTextStyle\nitalic\n/item\n\n\n/style\n\n\n\nstyle name=\nAppFriends.Toolbar\n\n   \nitem name=\nandroid:textColorPrimary\n@android:color/white\n/item\n\n   \nitem name=\nandroid:textColorSecondary\n@android:color/background_dark\n/item\n\n   \nitem name=\nandroid:background\n@color/orange\n/item\n\n   \nitem name=\ncolorControlNormal\n#FF0000\n/item\n\n\n/style\n\n\n\nstyle name=\nAppFriends.Popup\n\n   \nitem name=\nandroid:layout_marginStart\n32dp\n/item\n\n   \nitem name=\nandroid:layout_marginEnd\n32dp\n/item\n\n   \nitem name=\nandroid:layout_marginTop\n32dp\n/item\n\n   \nitem name=\nandroid:layout_marginBottom\n32dp\n/item\n\n   \nitem name=\nentranceOrigin\nbottom\n/item\n\n\n/style\n\n\n\n\n\n\n\n\n\n\nA list of XML attributes that can be replaced to easily style AppFriends UI components\n\n\nColor Values\n\n\n!-- Common --\n\n\ncolor name=\naf_color_primary\n#0080d6\n/color\n\n\ncolor name=\naf_color_primary_dark\n#0065ad\n/color\n\n\ncolor name=\naf_color_accent\n#0080d6\n/color\n\n\ncolor name=\naf_color_background\n#fafafa\n/color\n\n\ncolor name=\naf_color_scrim\n#99323232\n/color\n\n\ncolor name=\naf_item_divider\n#e5e5e5\n/color\n\n\ncolor name=\naf_main_background_color\n#fff\n/color\n\n\ncolor name=\naf_avatar_background_color\n@color/af_cool_gray\n/color\n\n\ncolor name=\naf_avatar_icon_color\n@color/af_white\n/color\n\n\ncolor name=\naf_edit_text_background\n@color/af_white\n/color\n\n\n\n!-- Chat --\n\n\ncolor name=\naf_message_day_title_color\n@color/af_cool_gray_dark\n/color\n\n\ncolor name=\naf_message_time_title_color\n@color/af_cool_gray\n/color\n\n\ncolor name=\naf_message_sender_name_color\n@color/af_cool_gray\n/color\n\n\ncolor name=\naf_message_in_bubble_color\n@color/af_cool_gray_lighter\n/color\n\n\ncolor name=\naf_message_out_bubble_color\n@color/af_blue\n/color\n\n\ncolor name=\naf_message_in_text_color\n@color/af_charcoalGrey\n/color\n\n\ncolor name=\naf_message_out_text_color\n@color/af_white\n/color\n\n\ncolor name=\naf_message_composer_icon_color\n#888e96\n/color\n\n\ncolor name=\naf_message_composer_color\n@color/af_cool_gray_lighter\n/color\n\n\ncolor name=\naf_message_image_background_color\n@color/af_cool_gray_lighter\n/color\n\n\ncolor name=\naf_message_timestamp_color\n@color/af_gray_darker_50\n/color\n\n\ncolor name=\naf_typing_indicator_color\n@color/af_gray_dark\n/color\n\n\ncolor name=\naf_new_message_line_color\n@color/af_blue_50\n/color\n\n\n\n!-- Album --\n\n\ncolor name=\naf_album_background\n#252326\n/color\n\n\n\n!-- Dialog List --\n\n\ncolor name=\naf_dialog_divider\n@color/af_recycler_divider\n/color\n\n\ncolor name=\naf_dialog_avatar_color\n@android:color/white\n/color\n\n\ncolor name=\naf_dialog_title_text\n#35373d\n/color\n\n\ncolor name=\naf_dialog_message_text\n#a6b4bf\n/color\n\n\ncolor name=\naf_dialog_date_text\n#a6b4bf\n/color\n\n\ncolor name=\naf_dialog_unread_text\n@android:color/white\n/color\n\n\ncolor name=\naf_dialog_unread_bubble\n@android:color/holo_orange_dark\n/color\n\n\n\n!-- Channel List --\n\n\ncolor name=\naf_channel_item_background\n@android:color/transparent\n/color\n\n\ncolor name=\naf_channel_title_text\n@android:color/white\n/color\n\n\n\n!-- Channel Chat --\n\n\ncolor name=\naf_channel_online_badge\n#00af00\n/color\n\n\ncolor name=\naf_channel_online_background\n#eaeaea\n/color\n\n\n\n!-- Text --\n\n\ncolor name=\naf_color_hint_disabled_dark\n#43000000\n/color\n\n\ncolor name=\naf_floating_action_button_background_color\n@android:color/holo_orange_dark\n/color\n\n\ncolor name=\naf_recycler_divider\n#e5e5e5\n/color\n\n\n\n!-- Popup --\n\n\ncolor name=\naf_popup_background\n#fafafa\n/color\n\n\n\n\n\n\nString Values\n\n\nstring name=\naf_message_preview_image\n[image]\n/string\n\n\nstring name=\naf_message_preview_video\n[video]\n/string\n\n\nstring name=\naf_message_preview_location\n[location]\n/string\n\n\nstring name=\naf_clipboard_description\nMessage\n/string\n\n\nstring name=\naf_copied_to_clipboard\nCopied to clipboard\n/string\n\n\nstring name=\naf_message_composer_hint\nEdit Message...\n/string\n\n\nstring name=\naf_file_size_upload_too_big\nfile size is too big\n/string\n\n\nstring name=\naf_sorry\nsorry\n/string\n\n\nstring name=\naf_error_title\nError\n/string\n\n\nstring name=\naf_message_failed_send_title\nFailed to send message\n/string\n\n\nstring name=\naf_message_failed_send_prompt\nDo you want to send it again?\n/string\n\n\nstring name=\naf_permission_error_title\nNo Permission\n/string\n\n\nstring name=\naf_permission_error_camera\nPlease grant camera permission in settings.\n/string\n\n\nstring name=\naf_permission_error_gallery\nPlease grant access to read your image gallery in settings.\n/string\n\n\nstring name=\naf_permission_error_write_storage\nPlease grant permission to write to storage in settings\n/string\n\n\nstring name=\naf_please_wait\nplease wait\n/string\n\n\nstring name=\naf_new_message\nNEW MESSAGE\n/string\n\n\nstring name=\naf_default_location_title\nPinned Location\n/string", 
            "title": "UI Customization Guide"
        }, 
        {
            "location": "/android/customization/#appfriends-ui-customization", 
            "text": "AppFriends Android SDK's UI components provide a set of tools for easy styling which can be configured and customized to match your app's style guide through style configurations as well as overriding XML attribute.  If you are using Simple or Embedded mode in the  UI Guide , overriding the AppFriends' default style attributes is the simplest customization option.  Below is a simple example of styling the pop out view with the resulting visual effects compared to the standard view.  style name= AppFriends.DialogList \n    item name= dialogTitleTextColor @android:color/holo_red_light /item \n    item name= dialogUnreadTitleTextColor @android:color/holo_red_light /item \n    item name= dialogUnreadTitleTextStyle italic /item  /style  style name= AppFriends.Toolbar \n    item name= android:textColorPrimary @android:color/white /item \n    item name= android:textColorSecondary @android:color/background_dark /item \n    item name= android:background @color/orange /item \n    item name= colorControlNormal #FF0000 /item  /style  style name= AppFriends.Popup \n    item name= android:layout_marginStart 32dp /item \n    item name= android:layout_marginEnd 32dp /item \n    item name= android:layout_marginTop 32dp /item \n    item name= android:layout_marginBottom 32dp /item \n    item name= entranceOrigin bottom /item  /style     A list of XML attributes that can be replaced to easily style AppFriends UI components", 
            "title": "AppFriends UI Customization"
        }, 
        {
            "location": "/android/customization/#color-values", 
            "text": "!-- Common --  color name= af_color_primary #0080d6 /color  color name= af_color_primary_dark #0065ad /color  color name= af_color_accent #0080d6 /color  color name= af_color_background #fafafa /color  color name= af_color_scrim #99323232 /color  color name= af_item_divider #e5e5e5 /color  color name= af_main_background_color #fff /color  color name= af_avatar_background_color @color/af_cool_gray /color  color name= af_avatar_icon_color @color/af_white /color  color name= af_edit_text_background @color/af_white /color  !-- Chat --  color name= af_message_day_title_color @color/af_cool_gray_dark /color  color name= af_message_time_title_color @color/af_cool_gray /color  color name= af_message_sender_name_color @color/af_cool_gray /color  color name= af_message_in_bubble_color @color/af_cool_gray_lighter /color  color name= af_message_out_bubble_color @color/af_blue /color  color name= af_message_in_text_color @color/af_charcoalGrey /color  color name= af_message_out_text_color @color/af_white /color  color name= af_message_composer_icon_color #888e96 /color  color name= af_message_composer_color @color/af_cool_gray_lighter /color  color name= af_message_image_background_color @color/af_cool_gray_lighter /color  color name= af_message_timestamp_color @color/af_gray_darker_50 /color  color name= af_typing_indicator_color @color/af_gray_dark /color  color name= af_new_message_line_color @color/af_blue_50 /color  !-- Album --  color name= af_album_background #252326 /color  !-- Dialog List --  color name= af_dialog_divider @color/af_recycler_divider /color  color name= af_dialog_avatar_color @android:color/white /color  color name= af_dialog_title_text #35373d /color  color name= af_dialog_message_text #a6b4bf /color  color name= af_dialog_date_text #a6b4bf /color  color name= af_dialog_unread_text @android:color/white /color  color name= af_dialog_unread_bubble @android:color/holo_orange_dark /color  !-- Channel List --  color name= af_channel_item_background @android:color/transparent /color  color name= af_channel_title_text @android:color/white /color  !-- Channel Chat --  color name= af_channel_online_badge #00af00 /color  color name= af_channel_online_background #eaeaea /color  !-- Text --  color name= af_color_hint_disabled_dark #43000000 /color  color name= af_floating_action_button_background_color @android:color/holo_orange_dark /color  color name= af_recycler_divider #e5e5e5 /color  !-- Popup --  color name= af_popup_background #fafafa /color", 
            "title": "Color Values"
        }, 
        {
            "location": "/android/customization/#string-values", 
            "text": "string name= af_message_preview_image [image] /string  string name= af_message_preview_video [video] /string  string name= af_message_preview_location [location] /string  string name= af_clipboard_description Message /string  string name= af_copied_to_clipboard Copied to clipboard /string  string name= af_message_composer_hint Edit Message... /string  string name= af_file_size_upload_too_big file size is too big /string  string name= af_sorry sorry /string  string name= af_error_title Error /string  string name= af_message_failed_send_title Failed to send message /string  string name= af_message_failed_send_prompt Do you want to send it again? /string  string name= af_permission_error_title No Permission /string  string name= af_permission_error_camera Please grant camera permission in settings. /string  string name= af_permission_error_gallery Please grant access to read your image gallery in settings. /string  string name= af_permission_error_write_storage Please grant permission to write to storage in settings /string  string name= af_please_wait please wait /string  string name= af_new_message NEW MESSAGE /string  string name= af_default_location_title Pinned Location /string", 
            "title": "String Values"
        }, 
        {
            "location": "/android/error/", 
            "text": "Errors \n Exceptions\n\n\nAppFriends errors are managed with \nAppFriendsException\n class and API, a detailed description of the error occurred will be provided along with a possible error code\n\n\n\n\n\n\n\n\nError Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n90000\n\n\nAn unknown error has occurred\n\n\n\n\n\n\n90001\n\n\nInvalid parameters supplied\n\n\n\n\n\n\n90002\n\n\nSDK is not initialized properly\n\n\n\n\n\n\n90003\n\n\nNeed to login first\n\n\n\n\n\n\n20005\n\n\nDialog is not found\n\n\n\n\n\n\n90007\n\n\nTrying to login while there's already an user logged in\n\n\n\n\n\n\n90009\n\n\nTrying to logout while there isn't any user logged in\n\n\n\n\n\n\n90500\n\n\nServer error\n\n\n\n\n\n\n30001\n\n\nUser not found\n\n\n\n\n\n\n91000\n\n\nRequest is too frequent", 
            "title": "Errors & Exceptions"
        }, 
        {
            "location": "/android/error/#errors-exceptions", 
            "text": "AppFriends errors are managed with  AppFriendsException  class and API, a detailed description of the error occurred will be provided along with a possible error code     Error Code  Description      90000  An unknown error has occurred    90001  Invalid parameters supplied    90002  SDK is not initialized properly    90003  Need to login first    20005  Dialog is not found    90007  Trying to login while there's already an user logged in    90009  Trying to logout while there isn't any user logged in    90500  Server error    30001  User not found    91000  Request is too frequent", 
            "title": "Errors &amp; Exceptions"
        }, 
        {
            "location": "/reactnative/quick_start/", 
            "text": "Getting Started\n\n\nThis page will help you install and integrate AppFriends into your ReactNative app.\n\n\nInstall via NPM\n\n\nYou can install the library using npm:\n\n\n$ npm install react-native-app-friends-library --save\n\n\n\n\n\niOS integration\n\n\nFor iOS, we need to install the AppFriends Native library as a dependency using \nCocoapod\n. Please go to your iOS folder at \n{your project folder}/ios\n, and run:\n\n\n$ pod init\n\n\n\n\n\nThen inside the Podfile, add:\n\n\npod \nAppFriendsUI\n, :git =\n \nhttps://github.com/Hacknocraft/AppFriendsUI.git\n, :branch =\n \u2018swift4_0\u2019\npod \nAppFriendsCore\n, :git =\n \nhttps://github.com/Hacknocraft/AppFriendsCore.git\n, :branch =\n \u2018swift4_0\u2019\npod \nCoreStore\n, :git =\n \nhttps://github.com/JohnEstropia/CoreStore.git\n, :branch =\n \nprototype/Swift_4_0\u2019\n\n\n\n\n\nThen run \npod install\n. This will create a workspace file \n{yourproject}.xcworkspace\n. Please use the workspace file to open your iOS project from now on.\nThe last step is linking the library:\n\n\n`$ react-native link react-native-app-friends-library`\n\n\n\n\n\nAndroid Integration\n\n\nFor Android, the native AppFriends Core library is a required dependency.\nAdd the following to your application's \nbuild.gradle\n file:\n\n\nrepositories\n \n{\n\n    \nmaven\n \n{\n \nurl\n \nhttps://raw.githubusercontent.com/Hacknocraft/AppFriendsAndroidCore/master/\n \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n   \n// AppFriends\n\n   \ncompile\n \nme.appfriends.sdk:ui:3.2.4\n\n\n}\n\n\n\n\n\n\nOnce Gradle successfully syncs the library, a final linking step is required:\n\n\n`$ react-native link react-native-app-friends-library`\n\n\n\n\n\nInitialization\n\n\nBefore using AppFriends features, you need to initialize the SDK:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n// you can get your AppFriends key and secret from AppFriends Dashboard.\n\n\nAppFriends\n.\ninitialize\n(\n{your application key}\n,\n \nyour Application secret\n);", 
            "title": "Quick Start"
        }, 
        {
            "location": "/reactnative/quick_start/#getting-started", 
            "text": "This page will help you install and integrate AppFriends into your ReactNative app.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/reactnative/quick_start/#install-via-npm", 
            "text": "You can install the library using npm:  $ npm install react-native-app-friends-library --save", 
            "title": "Install via NPM"
        }, 
        {
            "location": "/reactnative/quick_start/#ios-integration", 
            "text": "For iOS, we need to install the AppFriends Native library as a dependency using  Cocoapod . Please go to your iOS folder at  {your project folder}/ios , and run:  $ pod init  Then inside the Podfile, add:  pod  AppFriendsUI , :git =   https://github.com/Hacknocraft/AppFriendsUI.git , :branch =  \u2018swift4_0\u2019\npod  AppFriendsCore , :git =   https://github.com/Hacknocraft/AppFriendsCore.git , :branch =  \u2018swift4_0\u2019\npod  CoreStore , :git =   https://github.com/JohnEstropia/CoreStore.git , :branch =   prototype/Swift_4_0\u2019  Then run  pod install . This will create a workspace file  {yourproject}.xcworkspace . Please use the workspace file to open your iOS project from now on.\nThe last step is linking the library:  `$ react-native link react-native-app-friends-library`", 
            "title": "iOS integration"
        }, 
        {
            "location": "/reactnative/quick_start/#android-integration", 
            "text": "For Android, the native AppFriends Core library is a required dependency.\nAdd the following to your application's  build.gradle  file:  repositories   { \n     maven   {   url   https://raw.githubusercontent.com/Hacknocraft/AppFriendsAndroidCore/master/   }  }  dependencies   { \n    // AppFriends \n    compile   me.appfriends.sdk:ui:3.2.4  }   Once Gradle successfully syncs the library, a final linking step is required:  `$ react-native link react-native-app-friends-library`", 
            "title": "Android Integration"
        }, 
        {
            "location": "/reactnative/quick_start/#initialization", 
            "text": "Before using AppFriends features, you need to initialize the SDK:  import   AppFriends   from   react-native-appfriends-library ;  // you can get your AppFriends key and secret from AppFriends Dashboard.  AppFriends . initialize ( {your application key} ,   your Application secret );", 
            "title": "Initialization"
        }, 
        {
            "location": "/reactnative/sessions/", 
            "text": "Session\n\n\nThis page helps you with user register, login and logout. The user session API can be accessed from \nAppFriends.session\n.\n\n\nLogin and Register\n\n\nBefore an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require\n\n\n\n\nan username\n, this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.\n\n\nan unique user ID\n, this should be the same user id that you use in your app to identify the user\n\n\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n// You need to provide a userid and username to login the user\n\n\nAppFriends\n.\nsession\n.\nlogin\n(\nuserid\n,\n \nusername\n).\nthen\n(()\n \n=\n \n{\n\n    \n// login success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// login failed\n\n\n});\n\n\n\n\n\n\nLogout\n\n\nWhen an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nsession\n.\nlogout\n().\nthen\n(()\n \n=\n \n{\n\n  \n// logout success;\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// logout failed\n\n\n});", 
            "title": "Sessions"
        }, 
        {
            "location": "/reactnative/sessions/#session", 
            "text": "This page helps you with user register, login and logout. The user session API can be accessed from  AppFriends.session .", 
            "title": "Session"
        }, 
        {
            "location": "/reactnative/sessions/#login-and-register", 
            "text": "Before an user can start using AppFriends features, he must first login to AppFriends. In your app, you could login your user to AppFriends as soon as the user is logged into your app. If the user has not previously registered with AppFriends, the user will be created on AppFriends.\nTo login an user, we require   an username , this value is also a nickname/display name of the user. It can contain space, and doesn't have to be unique.  an unique user ID , this should be the same user id that you use in your app to identify the user   import   AppFriends   from   react-native-appfriends-library ;  // You need to provide a userid and username to login the user  AppFriends . session . login ( userid ,   username ). then (()   =   { \n     // login success  },   ( error )   =   { \n     // login failed  });", 
            "title": "Login and Register"
        }, 
        {
            "location": "/reactnative/sessions/#logout", 
            "text": "When an user logs out from your app, you should also log him out from AppFriends, so that new users can login later. To logout an user:  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . session . logout (). then (()   =   { \n   // logout success;  },   ( error )   =   { \n   // logout failed  });", 
            "title": "Logout"
        }, 
        {
            "location": "/reactnative/users/", 
            "text": "Users\n\n\nThe users API interface is accessible via \nAppFriends.user\n. In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via \nadmin API\n, and AppFriends SDK also provides a lot of convenient interface for you to work with.\n\n\nUser Update\n\n\nWhen user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.\n\n\nUpdate Username:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nuser\n.\nupdateUserName\n(\nusername\n).\nthen\n(()\n \n=\n \n{\n\n    \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nUpdate User Avatar:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nuser\n.\nupdateUserAvatar\n(\nusername\n).\nthen\n(()\n \n=\n \n{\n\n    \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nUpdate username and avatar at the same time:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nuser\n.\nupdateUser\n(\nusername\n,\n \navatar\n).\nthen\n(()\n \n=\n \n{\n\n    \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nFetch Information of an User\n\n\nYou can fetch the information of an user.\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nuser\n.\ngetUser\n(\nuserid\n).\nthen\n((\nuser\n)\n \n=\n \n{\n\n    \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nSearch users\n\n\nAfter you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\nuser\n.\nsearchUser\n(\nquery\n).\nthen\n((\nusers\n)\n \n=\n \n{\n\n    \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});", 
            "title": "Users"
        }, 
        {
            "location": "/reactnative/users/#users", 
            "text": "The users API interface is accessible via  AppFriends.user . In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via  admin API , and AppFriends SDK also provides a lot of convenient interface for you to work with.", 
            "title": "Users"
        }, 
        {
            "location": "/reactnative/users/#user-update", 
            "text": "When user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.", 
            "title": "User Update"
        }, 
        {
            "location": "/reactnative/users/#update-username", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  AppFriends . user . updateUserName ( username ). then (()   =   { \n     // success  },   ( error )   =   { \n     // failed  });", 
            "title": "Update Username:"
        }, 
        {
            "location": "/reactnative/users/#update-user-avatar", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  AppFriends . user . updateUserAvatar ( username ). then (()   =   { \n     // success  },   ( error )   =   { \n     // failed  });   Update username and avatar at the same time:  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . user . updateUser ( username ,   avatar ). then (()   =   { \n     // success  },   ( error )   =   { \n     // failed  });", 
            "title": "Update User Avatar:"
        }, 
        {
            "location": "/reactnative/users/#fetch-information-of-an-user", 
            "text": "You can fetch the information of an user.  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . user . getUser ( userid ). then (( user )   =   { \n     // success  },   ( error )   =   { \n     // failed  });", 
            "title": "Fetch Information of an User"
        }, 
        {
            "location": "/reactnative/users/#search-users", 
            "text": "After you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . user . searchUser ( query ). then (( users )   =   { \n     // success  },   ( error )   =   { \n     // failed  });", 
            "title": "Search users"
        }, 
        {
            "location": "/reactnative/dialogs/", 
            "text": "Chat Dialogs\n\n\nEach conversation between users is a dialog.\n\n\nPrivate Dialogs\n\n\nPrivate dialogs are dialogs only visible to the participates of the dialog. Users need to be joined to the dialog before chatting in it.\n\n\nListing All Private Dialogs\n\n\nAppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\ndialog\n.\ngetDialogs\n().\nthen\n((\nfetchedDialogs\n)\n \n=\n \n{\n\n  \n// fetch successful with an array of dialog objects\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// fetch failed\n\n\n});\n\n\n\n\n\n\nGet a Dialog Info\n\n\n/// - Parameters:\n\n\n///   - dialogID: id of the dialog\n\n\nAppFriends\n.\ndialog\n.\ngetDialog\n(\ndialogID\n)\n\n\n.\nthen\n((\ndialog\n)\n \n=\n \n{\n\n    \n// getting dialog info successful\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nTyping\n\n\nYou can send typing event when a user is typing or stopped typing\n\n\n/// start typing\n\n\nAppFriends\n.\ndialog\n.\nstartTyping\n(\ndialogID\n);\n\n\n\n/// end typing\n\n\nAppFriends\n.\ndialog\n.\nendTyping\n(\ndialogID\n);\n\n\n\n\n\n\nUnread Message Count\n\n\nFor each dialog, you can get the unread message count by accessing the dialog's \nunreadMessageCount\n property.\nTo get the total number of unread message count:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\ndialog\n.\ntotalUnreadMessageCount\n()\n\n\n.\nthen\n((\nnumber\n)\n \n=\n \n{\n\n    \n// number is the total unread count\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed\n\n\n});\n\n\n\n\n\n\nGroup Dialog\n\n\nA group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog.\nPlease note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app. To start a group dialog, you need to first create a group dialog:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// - Parameters:\n\n\n///   - id: Optional, but you can choose to provide an unique id to the dialog yourself. If this value is not provided, we will create an unique id for you. This is a good way for you to bind the dialog with certain feature or part of your app.\n\n\n///   - members: an array of user IDs of the users who you want to include in the dialog.\n\n\n///   - customData: the custom data string of the user. You can use this to attach additional information of the dialog.\n\n\n///   - pushData: additional data you can include to the push notification generated inside this dialog.\n\n\n///   - title: dialog title, if not provided, the default dialog title will be used.\n\n\nAppFriends\n.\ndialog\n.\ncreateGroupDialog\n(\ndialogID\n,\n \nmembers\n,\n \ncustomData\n,\n \npushData\n,\n \ntitle\n)\n\n\n.\nthen\n((\ndialogID\n)\n \n=\n \n{\n\n    \n// dialog created\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// dialog create failed\n\n\n});\n\n\n\n\n\n\nAdding a Member to a Dialog\n\n\n/// - Parameters:\n\n\n///   - userIDs: an array of userIDs\n\n\nAppFriends\n.\ndialog\n.\naddMembers\n(\nuserIDs\n,\n \nmembers\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n    \n// adding members successful\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed to add the members\n\n\n});\n\n\n\n\n\n\nGetting Members of a Dialog\n\n\n/// - Parameters:\n\n\n///   - dialogID: id of the dialog\n\n\nAppFriends\n.\ndialog\n.\ngetMembers\n(\ndialogID\n)\n\n\n.\nthen\n((\nmembers\n)\n \n=\n \n{\n\n    \n// getting members successful\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed to get the members\n\n\n});\n\n\n\n\n\n\nUpdate a Dialog name\n\n\n/// - Parameters:\n\n\n///   - dialogID: id of the dialog\n\n\n///   - dialogName: new name of the dialog\n\n\nAppFriends\n.\ndialog\n.\nupdateDialogName\n(\ndialogID\n,\n \ndialogName\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n    \n// getting members successful\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed to get the members\n\n\n});\n\n\n\n\n\n\nIndividual Dialog\n\n\nAn individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:\n\n\nCreate a One on One Dialog\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// - Parameters:\n\n\n///   - userID: id of the other user\n\n\nAppFriends\n.\ndialog\n.\ncreateIndividualDialog\n(\nuserID\n)\n\n\n.\nthen\n((\ndialogID\n)\n \n=\n \n{\n\n    \n// dialog created\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// dialog create failed\n\n\n});", 
            "title": "Dialogs"
        }, 
        {
            "location": "/reactnative/dialogs/#chat-dialogs", 
            "text": "Each conversation between users is a dialog.", 
            "title": "Chat Dialogs"
        }, 
        {
            "location": "/reactnative/dialogs/#private-dialogs", 
            "text": "Private dialogs are dialogs only visible to the participates of the dialog. Users need to be joined to the dialog before chatting in it.", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/reactnative/dialogs/#listing-all-private-dialogs", 
            "text": "AppFriends SDK remembers all the private dialogs and you can get the list of private dialogs by:  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . dialog . getDialogs (). then (( fetchedDialogs )   =   { \n   // fetch successful with an array of dialog objects  },   ( error )   =   { \n   // fetch failed  });", 
            "title": "Listing All Private Dialogs"
        }, 
        {
            "location": "/reactnative/dialogs/#get-a-dialog-info", 
            "text": "/// - Parameters:  ///   - dialogID: id of the dialog  AppFriends . dialog . getDialog ( dialogID )  . then (( dialog )   =   { \n     // getting dialog info successful  },   ( error )   =   { \n     // failed  });", 
            "title": "Get a Dialog Info"
        }, 
        {
            "location": "/reactnative/dialogs/#typing", 
            "text": "You can send typing event when a user is typing or stopped typing  /// start typing  AppFriends . dialog . startTyping ( dialogID );  /// end typing  AppFriends . dialog . endTyping ( dialogID );", 
            "title": "Typing"
        }, 
        {
            "location": "/reactnative/dialogs/#unread-message-count", 
            "text": "For each dialog, you can get the unread message count by accessing the dialog's  unreadMessageCount  property.\nTo get the total number of unread message count:  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . dialog . totalUnreadMessageCount ()  . then (( number )   =   { \n     // number is the total unread count  },   ( error )   =   { \n     // failed  });", 
            "title": "Unread Message Count"
        }, 
        {
            "location": "/reactnative/dialogs/#group-dialog", 
            "text": "A group dialog is a private dialog which is only visible to users in it. You can add more users or remove users from the dialog.\nPlease note that you can provide an id to this dialog. It is optional, and if you do not provide an id, AppFriends will assign an unique id to this dialog. This is a good way for you to bind the dialog with certain feature or part of your app. To start a group dialog, you need to first create a group dialog:  import   AppFriends   from   react-native-appfriends-library ;  /// - Parameters:  ///   - id: Optional, but you can choose to provide an unique id to the dialog yourself. If this value is not provided, we will create an unique id for you. This is a good way for you to bind the dialog with certain feature or part of your app.  ///   - members: an array of user IDs of the users who you want to include in the dialog.  ///   - customData: the custom data string of the user. You can use this to attach additional information of the dialog.  ///   - pushData: additional data you can include to the push notification generated inside this dialog.  ///   - title: dialog title, if not provided, the default dialog title will be used.  AppFriends . dialog . createGroupDialog ( dialogID ,   members ,   customData ,   pushData ,   title )  . then (( dialogID )   =   { \n     // dialog created  },   ( error )   =   { \n     // dialog create failed  });", 
            "title": "Group Dialog"
        }, 
        {
            "location": "/reactnative/dialogs/#adding-a-member-to-a-dialog", 
            "text": "/// - Parameters:  ///   - userIDs: an array of userIDs  AppFriends . dialog . addMembers ( userIDs ,   members )  . then (()   =   { \n     // adding members successful  },   ( error )   =   { \n     // failed to add the members  });", 
            "title": "Adding a Member to a Dialog"
        }, 
        {
            "location": "/reactnative/dialogs/#getting-members-of-a-dialog", 
            "text": "/// - Parameters:  ///   - dialogID: id of the dialog  AppFriends . dialog . getMembers ( dialogID )  . then (( members )   =   { \n     // getting members successful  },   ( error )   =   { \n     // failed to get the members  });", 
            "title": "Getting Members of a Dialog"
        }, 
        {
            "location": "/reactnative/dialogs/#update-a-dialog-name", 
            "text": "/// - Parameters:  ///   - dialogID: id of the dialog  ///   - dialogName: new name of the dialog  AppFriends . dialog . updateDialogName ( dialogID ,   dialogName )  . then (()   =   { \n     // getting members successful  },   ( error )   =   { \n     // failed to get the members  });", 
            "title": "Update a Dialog name"
        }, 
        {
            "location": "/reactnative/dialogs/#individual-dialog", 
            "text": "An individual dialog is a private dialog between two users. You cannot add more users to this dialog. To start an individual dialog:", 
            "title": "Individual Dialog"
        }, 
        {
            "location": "/reactnative/dialogs/#create-a-one-on-one-dialog", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  /// - Parameters:  ///   - userID: id of the other user  AppFriends . dialog . createIndividualDialog ( userID )  . then (( dialogID )   =   { \n     // dialog created  },   ( error )   =   { \n     // dialog create failed  });", 
            "title": "Create a One on One Dialog"
        }, 
        {
            "location": "/reactnative/album/", 
            "text": "What is Album?\n\n\nAn album is a place where we group all the images and videos sent within a dialog. All dialogs have album, except the open channels. The purpose of an album is to help user quickly browse through the past media sent within a dialog.\n\n\n\n\nAlbum APIs\n\n\nThere are some very simple API to use for interacting with Album.\n\n\nFetching Album Items\n\n\n/// - Parameters:\n\n\n///   - dialogID: the id of the dialog containing the album items you are fetching\n\n\n///   - start: the earliest time that you want to fetch from\n\n\nAppFriends\n.\nalbum\n.\ngetAlbumItems\n(\ndialogID\n,\n \nstart\n)\n\n\n.\nthen\n((\nitems\n)\n \n=\n \n{\n\n    \n// items\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n    \n// failed to get items\n\n\n});", 
            "title": "Album"
        }, 
        {
            "location": "/reactnative/album/#what-is-album", 
            "text": "An album is a place where we group all the images and videos sent within a dialog. All dialogs have album, except the open channels. The purpose of an album is to help user quickly browse through the past media sent within a dialog.", 
            "title": "What is Album?"
        }, 
        {
            "location": "/reactnative/album/#album-apis", 
            "text": "There are some very simple API to use for interacting with Album.", 
            "title": "Album APIs"
        }, 
        {
            "location": "/reactnative/album/#fetching-album-items", 
            "text": "/// - Parameters:  ///   - dialogID: the id of the dialog containing the album items you are fetching  ///   - start: the earliest time that you want to fetch from  AppFriends . album . getAlbumItems ( dialogID ,   start )  . then (( items )   =   { \n     // items  },   ( error )   =   { \n     // failed to get items  });", 
            "title": "Fetching Album Items"
        }, 
        {
            "location": "/reactnative/messaging/", 
            "text": "Messaging\n\n\nSending message to a dialog requires the id of the dialog you are sending the message to and the content of the message. AppFriends supports sending text, image, video gif and location out of box, and you can expand to implement more message types.\n\n\nSending Text\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// Sending text in the dialog\n\n\n///\n\n\n/// - Parameters:\n\n\n///   - text: the text to be sent\n\n\n///   - dialogID: id of the dialog\n\n\n///   - requireReceipt: require receipts for this messaeg. default is false\n\n\n///   - mentionedUsers: the ids of the users mentioned in the message\n\n\n///   - customData: custom data you want to attach to the message\n\n\n///   - sendPush: whether or not send push notification for this message\n\n\nAppFriends\n.\ndialog\n.\nsendText\n(\ntext\n,\n \ndialogID\n,\n \nrequireReceipt\n,\n \nsendPush\n,\n \nmentionedUsers\n,\n \ncustomData\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});\n\n\n\n\n\n\nSending gif\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// - Parameters:\n\n\n///   - url: the url of the gif\n\n\n///   - dialogID: id of the dialog\n\n\n///   - customData: custom data you want to attach to the message\n\n\n///   - requireReceipt: require receipts for this message. default is false\n\n\n///   - sendPush: whether or not send push notification for this message\n\n\n///   - completion: completion block which contains the error if the sending failed\n\n\nAppFriends\n.\ndialog\n.\nsendText\n(\nurl\n,\n \ndialogID\n,\n \nrequireReceipt\n,\n \nsendPush\n,\n \nmentionedUsers\n,\n \ncustomData\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});\n\n\n\n\n\n\nSending image\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// - Parameters:\n\n\n///   - base64DataString: base64 encoded image data\n\n\n///   - dialogID: id of the dialog\n\n\n///   - customData: custom data you want to attach to the message\n\n\n///   - requireReceipt: require receipts for this message. default is false\n\n\n///   - sendPush: whether or not send push notification for this message\n\n\n///   - completion: completion block which contains the error if the sending failed\n\n\nAppFriends\n.\ndialog\n.\nsendImageFromBase64\n(\nbase64DataString\n,\n \ndialogID\n,\n \nrequireReceipt\n,\n \nsendPush\n,\n \nmentionedUsers\n,\n \ncustomData\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});\n\n\n\n\n\n\nSending Video\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\n/// - Parameters:\n\n\n///   - base64DataString: base64 encoded video data\n\n\n///   - dialogID: id of the dialog\n\n\n///   - customData: custom data you want to attach to the message\n\n\n///   - requireReceipt: require receipts for this message. default is false\n\n\n///   - sendPush: whether or not send push notification for this message\n\n\n///   - completion: completion block which contains the error if the sending failed\n\n\nAppFriends\n.\ndialog\n.\nsendVideo\n(\nbase64DataString\n,\n \ndialogID\n,\n \nrequireReceipt\n,\n \nsendPush\n,\n \nmentionedUsers\n,\n \ncustomData\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});", 
            "title": "Messages"
        }, 
        {
            "location": "/reactnative/messaging/#messaging", 
            "text": "Sending message to a dialog requires the id of the dialog you are sending the message to and the content of the message. AppFriends supports sending text, image, video gif and location out of box, and you can expand to implement more message types.", 
            "title": "Messaging"
        }, 
        {
            "location": "/reactnative/messaging/#sending-text", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  /// Sending text in the dialog  ///  /// - Parameters:  ///   - text: the text to be sent  ///   - dialogID: id of the dialog  ///   - requireReceipt: require receipts for this messaeg. default is false  ///   - mentionedUsers: the ids of the users mentioned in the message  ///   - customData: custom data you want to attach to the message  ///   - sendPush: whether or not send push notification for this message  AppFriends . dialog . sendText ( text ,   dialogID ,   requireReceipt ,   sendPush ,   mentionedUsers ,   customData )  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Sending Text"
        }, 
        {
            "location": "/reactnative/messaging/#sending-gif", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  /// - Parameters:  ///   - url: the url of the gif  ///   - dialogID: id of the dialog  ///   - customData: custom data you want to attach to the message  ///   - requireReceipt: require receipts for this message. default is false  ///   - sendPush: whether or not send push notification for this message  ///   - completion: completion block which contains the error if the sending failed  AppFriends . dialog . sendText ( url ,   dialogID ,   requireReceipt ,   sendPush ,   mentionedUsers ,   customData )  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Sending gif"
        }, 
        {
            "location": "/reactnative/messaging/#sending-image", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  /// - Parameters:  ///   - base64DataString: base64 encoded image data  ///   - dialogID: id of the dialog  ///   - customData: custom data you want to attach to the message  ///   - requireReceipt: require receipts for this message. default is false  ///   - sendPush: whether or not send push notification for this message  ///   - completion: completion block which contains the error if the sending failed  AppFriends . dialog . sendImageFromBase64 ( base64DataString ,   dialogID ,   requireReceipt ,   sendPush ,   mentionedUsers ,   customData )  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Sending image"
        }, 
        {
            "location": "/reactnative/messaging/#sending-video", 
            "text": "import   AppFriends   from   react-native-appfriends-library ;  /// - Parameters:  ///   - base64DataString: base64 encoded video data  ///   - dialogID: id of the dialog  ///   - customData: custom data you want to attach to the message  ///   - requireReceipt: require receipts for this message. default is false  ///   - sendPush: whether or not send push notification for this message  ///   - completion: completion block which contains the error if the sending failed  AppFriends . dialog . sendVideo ( base64DataString ,   dialogID ,   requireReceipt ,   sendPush ,   mentionedUsers ,   customData )  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Sending Video"
        }, 
        {
            "location": "/reactnative/events/", 
            "text": "Events\n\n\nYour app can subscribe to events from AppFriends using \nAppFriends.event\n apis. Objects that implement \nAFEventSubscriber\n protocol can subscribe to AppFriends events.\n\n\nSubscribe to AppFriends Events\n\n\nTo get notified by AppFriends about events, you can subscribe to the event postings by:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nconst\n \nafEventEmitter\n \n=\n \nnew\n \nNativeEventEmitter\n(\nAppFriends\n.\nevent\n);\n\n\n\n// Message Received\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Message_Received\n,\n\n    \n(\nmessage\n)\n \n=\n \n{\n\n      \n// message that was received\n\n    \n}\n\n\n);\n\n\n\n// Dialog Updated\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Dialog_Updated\n,\n\n    \n(\ndialog\n)\n \n=\n \n{\n\n      \n// dialog was updated\n\n    \n}\n\n\n);\n\n\n\n// Dialog Created\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Dialog_Created\n,\n\n    \n(\ndialog\n)\n \n=\n \n{\n\n      \n// dialog was created\n\n    \n}\n\n\n);\n\n\n\n// Some user left a dialog\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Dialog_Left\n,\n\n    \n(\ndialog\n)\n \n=\n \n{\n\n      \n// dialog was created\n\n    \n}\n\n\n);\n\n\n\n// Typing event\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Typing_Status\n,\n\n    \n(\ndialog\n)\n \n=\n \n{\n\n      \n// typing event\n\n    \n}\n\n\n);\n\n\n\n// Unread message count number changed\n\n\nafEventEmitter\n.\naddListener\n(\n\n    \nAppFriends\n.\nevent\n.\nAFEvent_Unread_Count_Change\n,\n\n    \n(\nnumber\n)\n \n=\n \n{\n\n      \n// the new number\n\n    \n}\n\n\n);", 
            "title": "Events"
        }, 
        {
            "location": "/reactnative/events/#events", 
            "text": "Your app can subscribe to events from AppFriends using  AppFriends.event  apis. Objects that implement  AFEventSubscriber  protocol can subscribe to AppFriends events.", 
            "title": "Events"
        }, 
        {
            "location": "/reactnative/events/#subscribe-to-appfriends-events", 
            "text": "To get notified by AppFriends about events, you can subscribe to the event postings by:  import   AppFriends   from   react-native-appfriends-library ;  const   afEventEmitter   =   new   NativeEventEmitter ( AppFriends . event );  // Message Received  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Message_Received , \n     ( message )   =   { \n       // message that was received \n     }  );  // Dialog Updated  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Dialog_Updated , \n     ( dialog )   =   { \n       // dialog was updated \n     }  );  // Dialog Created  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Dialog_Created , \n     ( dialog )   =   { \n       // dialog was created \n     }  );  // Some user left a dialog  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Dialog_Left , \n     ( dialog )   =   { \n       // dialog was created \n     }  );  // Typing event  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Typing_Status , \n     ( dialog )   =   { \n       // typing event \n     }  );  // Unread message count number changed  afEventEmitter . addListener ( \n     AppFriends . event . AFEvent_Unread_Count_Change , \n     ( number )   =   { \n       // the new number \n     }  );", 
            "title": "Subscribe to AppFriends Events"
        }, 
        {
            "location": "/reactnative/push/", 
            "text": "AppFriends can send push notification to the device when there's a new message for a user or if the user is mentioned in a channel chat. Push notification API is accessible via \nAppFriends.event\n. Please make sure the user has already logged in before registering for push. Unregistering must also happen before the user logout.\n\n\nRegister for Push\n\n\nRegistering for push notification\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\npush\n.\nregisterDeviceForPushNotification\n(\ndeviceToken\n)\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});\n\n\n\n\n\n\nUnregister for Push\n\n\nTo unregister push notification:\n\n\nimport\n \nAppFriends\n \nfrom\n \nreact-native-appfriends-library\n;\n\n\n\nAppFriends\n.\npush\n.\nunregisterDeviceForPushNotification\n()\n\n\n.\nthen\n(()\n \n=\n \n{\n\n  \n// success\n\n\n},\n \n(\nerror\n)\n \n=\n \n{\n\n  \n// failed\n\n\n});", 
            "title": "Push Notifications Guide"
        }, 
        {
            "location": "/reactnative/push/#register-for-push", 
            "text": "Registering for push notification  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . push . registerDeviceForPushNotification ( deviceToken )  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Register for Push"
        }, 
        {
            "location": "/reactnative/push/#unregister-for-push", 
            "text": "To unregister push notification:  import   AppFriends   from   react-native-appfriends-library ;  AppFriends . push . unregisterDeviceForPushNotification ()  . then (()   =   { \n   // success  },   ( error )   =   { \n   // failed  });", 
            "title": "Unregister for Push"
        }, 
        {
            "location": "/javascript/quick_start/", 
            "text": "Quick Start\n\n\nBefore start using AppFriends, you need to create an application on the \ndashboard\n Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsJS, please checkout our repo:\n\n\n\n\nGithub Web Widget Sample App\n\n\n\n\nIntegration\n\n\nPlease download \nAppFriends.min.js\n from \nGithub\n. Then include the script on your website by:\n\n\nscript\n \nsrc\n=\nAppFriends.min.js\n/\nscript\n\n\n\n\n\n\nLogin\n\n\nA user must be authenticated/logged in first before any interaction with AppFriends can begin. Please provide a userID and username when you login a user. If the user id isn't found on AppFriends, we will create a user and assign username to this user. If user id is found, we will login the user and return a token.\n\n\nLogin a user:\n\n\nconst\n \naf\n \n=\n \nwindoww\n.\naf\n;\n\n\n// to login you need to provide a user id and a username\n\n\naf\n.\nlogin\n(\nuserId\n,\n \nnickname\n,\n \n(\ntoken\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n\n\n});", 
            "title": "Quick Start"
        }, 
        {
            "location": "/javascript/quick_start/#quick-start", 
            "text": "Before start using AppFriends, you need to create an application on the  dashboard  Users in the same application can talk to each other and you only need one application for all the platforms you want to support.\nTo see an sample app of how to use AppFriendsJS, please checkout our repo:   Github Web Widget Sample App", 
            "title": "Quick Start"
        }, 
        {
            "location": "/javascript/quick_start/#integration", 
            "text": "Please download  AppFriends.min.js  from  Github . Then include the script on your website by:  script   src = AppFriends.min.js / script", 
            "title": "Integration"
        }, 
        {
            "location": "/javascript/quick_start/#login", 
            "text": "A user must be authenticated/logged in first before any interaction with AppFriends can begin. Please provide a userID and username when you login a user. If the user id isn't found on AppFriends, we will create a user and assign username to this user. If user id is found, we will login the user and return a token.  Login a user:  const   af   =   windoww . af ;  // to login you need to provide a user id and a username  af . login ( userId ,   nickname ,   ( token ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }  });", 
            "title": "Login"
        }, 
        {
            "location": "/javascript/events/", 
            "text": "Events\n\n\nYour app can subscribe to events from AppFriends SDK. The events/callback we will provide are:\n\n\n\n\n\n\n\n\nEvent name\n\n\nData\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonMessageReceived\n\n\nDialog\n object and \nMessage\n object\n\n\na new message is received\n\n\n\n\n\n\nonDialogCreated\n\n\nDialog\n object\n\n\na new dialog is created\n\n\n\n\n\n\nonDialogChanged\n\n\nDialog\n object\n\n\na dialog has been changed\n\n\n\n\n\n\nonBadgeUpdated\n\n\nn/a\n\n\nunread message count changed\n\n\n\n\n\n\nonUserJoined\n\n\nDialog\n object and 'User' object\n\n\nnew user joined a dialog\n\n\n\n\n\n\nonUserLeft\n\n\nDialog\n object and 'User' object\n\n\na user left a dialog\n\n\n\n\n\n\n\n\nSubscribe to the new event\n\n\nHere's a sample code to create a event handler. You can register multiple event handlers, and the SDK will callback each one of them.\n\n\n// You can create a function like this which takes other functions as parameters\n\n\n// Then assign the functions to the handler object and register it with AppFriends SDK\n\n\ncreateHandlerGlobal\n(...\nargs\n)\n \n{\n\n\n    \n// message received handle\n\n    \nlet\n \nmessageReceivedFunc\n \n=\n \nargs\n[\n0\n];\n\n\n    \n// dialog created handle\n\n    \nlet\n \ndialogCreatedFunc\n \n=\n \nargs\n[\n1\n];\n\n\n    \n// dialog updated handle\n\n    \nlet\n \ndialogChangedFunc\n \n=\n \nargs\n[\n2\n];\n\n\n    \n// unread message count change handle\n\n    \nlet\n \nbadgeChangedFunc\n \n=\n \nargs\n[\n3\n];\n\n\n    \n// user joined a dialog\n\n    \nlet\n \nuserJoinFunc\n \n=\n \nargs\n[\n4\n];\n\n\n    \n// user left a dialog\n\n    \nlet\n \nuserLeftFunc\n \n=\n \nargs\n[\n5\n];\n\n\n    \nlet\n \nDialogHandler\n \n=\n \n{\n\n      \nonMessageReceived\n:\n \n(\ndialog\n,\n \nmessage\n)\n \n=\n \n{\n\n        \nmessageReceivedFunc\n(\ndialog\n,\n \nmessage\n);\n\n      \n},\n\n      \nonDialogCreated\n:\n \n(\ndialog\n)\n \n=\n \n{\n\n        \ndialogCreatedFunc\n(\ndialog\n);\n\n      \n},\n\n      \nonDialogChanged\n:\n \n(\ndialog\n)\n \n=\n \n{\n\n        \ndialogChangedFunc\n(\ndialog\n);\n\n      \n},\n\n      \nonBadgeUpdated\n:\n \n()\n \n=\n \n{\n\n        \nbadgeChangedFunc\n();\n\n      \n},\n\n      \nonUserJoined\n:\n \n(\ndialog\n,\n \nuser\n)\n \n=\n \n{\n\n        \nuserJoinFunc\n(\ndialog\n,\n \nuser\n);\n\n      \n},\n\n      \nonUserLeft\n:\n \n(\ndialog\n,\n \nuser\n)\n \n=\n\n      \n{\n\n        \nuserLeftFunc\n(\ndialog\n,\n \nuser\n);\n\n      \n}\n\n    \n};\n\n\n    \n// adding a handler and provide a name to the handler\n\n    \naf\n.\naddDialogHandler\n(\nGLOBAL_HANDLER\n,\n \nDialogHandler\n);\n\n\n}", 
            "title": "Callbacks & Events"
        }, 
        {
            "location": "/javascript/events/#events", 
            "text": "Your app can subscribe to events from AppFriends SDK. The events/callback we will provide are:     Event name  Data  Description      onMessageReceived  Dialog  object and  Message  object  a new message is received    onDialogCreated  Dialog  object  a new dialog is created    onDialogChanged  Dialog  object  a dialog has been changed    onBadgeUpdated  n/a  unread message count changed    onUserJoined  Dialog  object and 'User' object  new user joined a dialog    onUserLeft  Dialog  object and 'User' object  a user left a dialog", 
            "title": "Events"
        }, 
        {
            "location": "/javascript/events/#subscribe-to-the-new-event", 
            "text": "Here's a sample code to create a event handler. You can register multiple event handlers, and the SDK will callback each one of them.  // You can create a function like this which takes other functions as parameters  // Then assign the functions to the handler object and register it with AppFriends SDK  createHandlerGlobal (... args )   { \n\n     // message received handle \n     let   messageReceivedFunc   =   args [ 0 ]; \n\n     // dialog created handle \n     let   dialogCreatedFunc   =   args [ 1 ]; \n\n     // dialog updated handle \n     let   dialogChangedFunc   =   args [ 2 ]; \n\n     // unread message count change handle \n     let   badgeChangedFunc   =   args [ 3 ]; \n\n     // user joined a dialog \n     let   userJoinFunc   =   args [ 4 ]; \n\n     // user left a dialog \n     let   userLeftFunc   =   args [ 5 ]; \n\n     let   DialogHandler   =   { \n       onMessageReceived :   ( dialog ,   message )   =   { \n         messageReceivedFunc ( dialog ,   message ); \n       }, \n       onDialogCreated :   ( dialog )   =   { \n         dialogCreatedFunc ( dialog ); \n       }, \n       onDialogChanged :   ( dialog )   =   { \n         dialogChangedFunc ( dialog ); \n       }, \n       onBadgeUpdated :   ()   =   { \n         badgeChangedFunc (); \n       }, \n       onUserJoined :   ( dialog ,   user )   =   { \n         userJoinFunc ( dialog ,   user ); \n       }, \n       onUserLeft :   ( dialog ,   user )   = \n       { \n         userLeftFunc ( dialog ,   user ); \n       } \n     }; \n\n     // adding a handler and provide a name to the handler \n     af . addDialogHandler ( GLOBAL_HANDLER ,   DialogHandler );  }", 
            "title": "Subscribe to the new event"
        }, 
        {
            "location": "/javascript/users/", 
            "text": "Users\n\n\nThe users API interface is in data model class \nUser\n. In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via \nadmin API\n, and AppFriends SDK also provides a lot of convenient interface for you to work with.\n\n\nUser Update\n\n\nWhen user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.\n\n\nUpdate Username:\n\n\nconst\n \nusername\n \n=\n \na new username\n\n\naf\n.\nUser\n.\nupdateCurrentUserName\n(\nusername\n,\n \n(\nresponse\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success\n\n  \n}\n\n\n});\n\n\n\n\n\n\nUpdate User Avatar:\n\n\nlet\n \navatarURL\n \n=\n \nhttps://someavatar.jpg\n\n\naf\n.\nUser\n.\nupdateCurrentUserAvatar\n(\navatarURL\n,\n \n(\nresponse\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success\n\n  \n}\n\n\n});\n\n\n\n\n\n\nFetch Information of an User\n\n\nYou can fetch the information of an user. You need to pass a userID. It will return a user object.\n\n\naf\n.\nUser\n.\nfetchUserInfo\n(\nuserID\n,\n \n(\nuser\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, it returns a User object\n\n  \n}\n\n\n});\n\n\n\n\n\n\nSearch users\n\n\nAfter you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.\n\n\naf\n.\nUser\n.\nsearchUsersWithPager\n(\n\n  \nsearchKey\n,\n  \n// text to be searched\n\n  \npage\n,\n       \n// page number\n\n  \nperPage\n,\n    \n// number of results per page\n\n  \n(\npager\n,\n \nusers\n,\n \nerr\n)\n \n=\n \n{\n\n    \n// callback, returns a pager object and an array of users\n\n    \n// the pager object contains the page information\n\n\n})", 
            "title": "Users"
        }, 
        {
            "location": "/javascript/users/#users", 
            "text": "The users API interface is in data model class  User . In order to use AppFriends and for all the AppFriends UI components to work properly, your users will need to be mirrored on AppFriends' system. It means you need to make sure all of your users are copied onto AppFriends' system and updates to the user information, such as username change and so on, are also make available to AppFriends, so your user will get consistent result in your app. Batch users import can be done via  admin API , and AppFriends SDK also provides a lot of convenient interface for you to work with.", 
            "title": "Users"
        }, 
        {
            "location": "/javascript/users/#user-update", 
            "text": "When user information is updated on your app, you need to update the same user on AppFriends, so the data is consistent. For example, if an user changed his profile on your app, and he/she chose a new username, or a different avatar picture, you will need to update the same user on AppFriends.  Update Username:  const   username   =   a new username  af . User . updateCurrentUserName ( username ,   ( response ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success \n   }  });   Update User Avatar:  let   avatarURL   =   https://someavatar.jpg  af . User . updateCurrentUserAvatar ( avatarURL ,   ( response ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success \n   }  });", 
            "title": "User Update"
        }, 
        {
            "location": "/javascript/users/#fetch-information-of-an-user", 
            "text": "You can fetch the information of an user. You need to pass a userID. It will return a user object.  af . User . fetchUserInfo ( userID ,   ( user ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, it returns a User object \n   }  });", 
            "title": "Fetch Information of an User"
        }, 
        {
            "location": "/javascript/users/#search-users", 
            "text": "After you imported all of your users into AppFriends platform, you can perform search on usernames and get back a list of users.  af . User . searchUsersWithPager ( \n   searchKey ,    // text to be searched \n   page ,         // page number \n   perPage ,      // number of results per page \n   ( pager ,   users ,   err )   =   { \n     // callback, returns a pager object and an array of users \n     // the pager object contains the page information  })", 
            "title": "Search users"
        }, 
        {
            "location": "/javascript/dialogs/", 
            "text": "Open Channels\n\n\nGetting a list of open channels\n\n\naf\n.\nPublicChannel\n.\nfetchChannels\n((\nchannelList\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, you get a list of channel dialogs objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nPrivate Dialogs\n\n\nGetting a list of dialogs that you are in\n\n\naf\n.\nDialog\n.\nfetchAllDialogs\n((\ndialogList\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, you get a list of private dialogs objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nGet information of one dialog\n\n\naf\n.\nDialog\n.\ngetDialogInfo\n(\ndialogID\n,\n \nfunction\n(\ndialog\n,\n \nerror\n)\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, you get a list of private dialogs objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nManage dialog members\n\n\nTo see the current users in a dialog, use \nmemberIDs\n property of a dialog object.\n\n\nconst\n \nmemberIDs\n \n=\n \ndialog\n.\nmemberIDs\n;\n\n\n\n\n\n\nInvite someone to a group dialog\n\n\naf\n.\nDialog\n.\ninviteWithMemberIds\n(\ndialogID\n,\n \nuserIds\n,\n \n(\nresponse\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, you get a list of private dialogs objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nLeave a group dialog\n\n\naf\n.\nDialog\n.\nleaveDialog\n(\nchannel\n.\nid\n,\n \n(\nchannel\n,\n \nerror\n)\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle error\n\n  \n}\n \nelse\n \n{\n\n    \n// success, you get a list of private dialogs objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nUnread Message Count\n\n\nTo get unread message count of each dialog, use \nunreadMessageCount\n property of the a dialog object.\n\n\nconst\n \nunreadMessageCount\n \n=\n \ndialog\n.\nunreadMessageCount\n\n\n\n\n\n\nGet total unread message count of all dialogs\n\n\naf\n.\ngetTotalUnreadMessageCount\n((\nunreadCount\n)\n \n=\n \n{\n\n  \n// returns the number of unread messages\n\n\n});\n\n\n\n\n\n\nClear dialog unread count\n\n\nAfter you enter a dialog, you can clear the unread count by:\n\n\ndialog\n.\nmarkAsRead\n();", 
            "title": "Dialogs"
        }, 
        {
            "location": "/javascript/dialogs/#open-channels", 
            "text": "", 
            "title": "Open Channels"
        }, 
        {
            "location": "/javascript/dialogs/#getting-a-list-of-open-channels", 
            "text": "af . PublicChannel . fetchChannels (( channelList ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, you get a list of channel dialogs objects \n   }  });", 
            "title": "Getting a list of open channels"
        }, 
        {
            "location": "/javascript/dialogs/#private-dialogs", 
            "text": "", 
            "title": "Private Dialogs"
        }, 
        {
            "location": "/javascript/dialogs/#getting-a-list-of-dialogs-that-you-are-in", 
            "text": "af . Dialog . fetchAllDialogs (( dialogList ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, you get a list of private dialogs objects \n   }  });", 
            "title": "Getting a list of dialogs that you are in"
        }, 
        {
            "location": "/javascript/dialogs/#get-information-of-one-dialog", 
            "text": "af . Dialog . getDialogInfo ( dialogID ,   function ( dialog ,   error )   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, you get a list of private dialogs objects \n   }  });", 
            "title": "Get information of one dialog"
        }, 
        {
            "location": "/javascript/dialogs/#manage-dialog-members", 
            "text": "To see the current users in a dialog, use  memberIDs  property of a dialog object.  const   memberIDs   =   dialog . memberIDs ;   Invite someone to a group dialog  af . Dialog . inviteWithMemberIds ( dialogID ,   userIds ,   ( response ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, you get a list of private dialogs objects \n   }  });   Leave a group dialog  af . Dialog . leaveDialog ( channel . id ,   ( channel ,   error )   =   { \n   if   ( error )   { \n     // handle error \n   }   else   { \n     // success, you get a list of private dialogs objects \n   }  });", 
            "title": "Manage dialog members"
        }, 
        {
            "location": "/javascript/dialogs/#unread-message-count", 
            "text": "To get unread message count of each dialog, use  unreadMessageCount  property of the a dialog object.  const   unreadMessageCount   =   dialog . unreadMessageCount", 
            "title": "Unread Message Count"
        }, 
        {
            "location": "/javascript/dialogs/#get-total-unread-message-count-of-all-dialogs", 
            "text": "af . getTotalUnreadMessageCount (( unreadCount )   =   { \n   // returns the number of unread messages  });", 
            "title": "Get total unread message count of all dialogs"
        }, 
        {
            "location": "/javascript/dialogs/#clear-dialog-unread-count", 
            "text": "After you enter a dialog, you can clear the unread count by:  dialog . markAsRead ();", 
            "title": "Clear dialog unread count"
        }, 
        {
            "location": "/javascript/messaging/", 
            "text": "Sending Messages\n\n\nSending a message to dialog requires a dialog object. You can get dialog object by fetching all dialogs or creating one. For details on dialogs, please see \nDialogs\n.\n\n\nSending text:\n\n\naf\n.\nDialog\n.\nsendTextMessage\n(\n\n      \ndialog\n,\n          \n// dialog object\n\n      \ntext\n,\n            \n// text to be sent\n\n      \ncustomData\n,\n      \n// optional, custom data, you can send a string with your message\n\n      \nrequireReceipt\n,\n  \n// if the message require receipt, default is false\n\n      \nmentionUsers\n,\n    \n// optional, an array of user ids of users who you want to mention in the message\n\n      \nsendPush\n,\n        \n// optional, if a message should trigger a push notification. Default is is true\n\n      \n(\nmessage\n)\n \n=\n \n{\n\n          \n// this is a callback, after the message is sent.\n\n      \n}\n\n\n);\n\n\n\n\n\n\nSending an image:\n\n\naf\n.\nDialog\n.\nsendTextMessage\n(\n\n      \ndialog\n,\n          \n// dialog object\n\n      \nimageURL\n,\n        \n// full image url\n\n      \nthumbnailURL\n,\n    \n// thumbnail image url\n\n      \ncustomData\n,\n      \n// optional, custom data, you can send a string with your message\n\n      \nrequireReceipt\n,\n  \n// if the message require receipt, default is false\n\n      \nmentionUsers\n,\n    \n// optional, an array of user ids of users who you want to mention in the message\n\n      \nsendPush\n,\n        \n// optional, if a message should trigger a push notification. Default is is true\n\n      \n(\nmessage\n)\n \n=\n \n{\n\n          \n// this is a callback, after the message is sent.\n\n      \n}\n\n\n);\n\n\n\n\n\n\nSending a video:\n\n\naf\n.\nDialog\n.\nsendTextMessage\n(\n\n      \ndialog\n,\n          \n// dialog object\n\n      \nvideoStreamURL\n,\n  \n// video stream url\n\n      \nthumbnailURL\n,\n    \n// thumbnail image url\n\n      \ncustomData\n,\n      \n// optional, custom data, you can send a string with your message\n\n      \nrequireReceipt\n,\n  \n// if the message require receipt, default is false\n\n      \nmentionUsers\n,\n    \n// optional, an array of user ids of users who you want to mention in the message\n\n      \nsendPush\n,\n        \n// optional, if a message should trigger a push notification. Default is is true\n\n      \n(\nmessage\n)\n \n=\n \n{\n\n          \n// this is a callback, after the message is sent.\n\n      \n}\n\n\n);\n\n\n\n\n\n\nSending a gif\n\n\naf\n.\nDialog\n.\nsendTextMessage\n(\n\n      \ndialog\n,\n          \n// dialog object\n\n      \ngifURL\n,\n          \n// gif url\n\n      \ncustomData\n,\n      \n// optional, custom data, you can send a string with your message\n\n      \nrequireReceipt\n,\n  \n// if the message require receipt, default is false\n\n      \nmentionUsers\n,\n    \n// optional, an array of user ids of users who you want to mention in the message\n\n      \nsendPush\n,\n        \n// optional, if a message should trigger a push notification. Default is is true\n\n      \n(\nmessage\n)\n \n=\n \n{\n\n          \n// this is a callback, after the message is sent.\n\n      \n}\n\n\n);\n\n\n\n\n\n\nMentioning Users\n\n\nYou can mention other users by referencing their IDs in the message you compose.\n\n\naf\n.\nDialog\n.\nsendTextMessage\n(\n\n      \ndialog\n,\n          \n// dialog object\n\n      \ngifURL\n,\n          \n// gif url\n\n      \ncustomData\n,\n      \n// optional, custom data, you can send a string with your message\n\n      \nrequireReceipt\n,\n  \n// if the message require receipt, default is false\n\n      \nmentionUsers\n,\n    \n// optional, an array of user ids of users who you want to mention in the message\n\n      \nsendPush\n,\n        \n// optional, if a message should trigger a push notification. Default is is true\n\n      \n(\nmessage\n)\n \n=\n \n{\n\n          \n// this is a callback, after the message is sent.\n\n      \n}\n\n\n);", 
            "title": "Messaging"
        }, 
        {
            "location": "/javascript/messaging/#sending-messages", 
            "text": "Sending a message to dialog requires a dialog object. You can get dialog object by fetching all dialogs or creating one. For details on dialogs, please see  Dialogs .", 
            "title": "Sending Messages"
        }, 
        {
            "location": "/javascript/messaging/#sending-text", 
            "text": "af . Dialog . sendTextMessage ( \n       dialog ,            // dialog object \n       text ,              // text to be sent \n       customData ,        // optional, custom data, you can send a string with your message \n       requireReceipt ,    // if the message require receipt, default is false \n       mentionUsers ,      // optional, an array of user ids of users who you want to mention in the message \n       sendPush ,          // optional, if a message should trigger a push notification. Default is is true \n       ( message )   =   { \n           // this is a callback, after the message is sent. \n       }  );", 
            "title": "Sending text:"
        }, 
        {
            "location": "/javascript/messaging/#sending-an-image", 
            "text": "af . Dialog . sendTextMessage ( \n       dialog ,            // dialog object \n       imageURL ,          // full image url \n       thumbnailURL ,      // thumbnail image url \n       customData ,        // optional, custom data, you can send a string with your message \n       requireReceipt ,    // if the message require receipt, default is false \n       mentionUsers ,      // optional, an array of user ids of users who you want to mention in the message \n       sendPush ,          // optional, if a message should trigger a push notification. Default is is true \n       ( message )   =   { \n           // this is a callback, after the message is sent. \n       }  );", 
            "title": "Sending an image:"
        }, 
        {
            "location": "/javascript/messaging/#sending-a-video", 
            "text": "af . Dialog . sendTextMessage ( \n       dialog ,            // dialog object \n       videoStreamURL ,    // video stream url \n       thumbnailURL ,      // thumbnail image url \n       customData ,        // optional, custom data, you can send a string with your message \n       requireReceipt ,    // if the message require receipt, default is false \n       mentionUsers ,      // optional, an array of user ids of users who you want to mention in the message \n       sendPush ,          // optional, if a message should trigger a push notification. Default is is true \n       ( message )   =   { \n           // this is a callback, after the message is sent. \n       }  );", 
            "title": "Sending a video:"
        }, 
        {
            "location": "/javascript/messaging/#sending-a-gif", 
            "text": "af . Dialog . sendTextMessage ( \n       dialog ,            // dialog object \n       gifURL ,            // gif url \n       customData ,        // optional, custom data, you can send a string with your message \n       requireReceipt ,    // if the message require receipt, default is false \n       mentionUsers ,      // optional, an array of user ids of users who you want to mention in the message \n       sendPush ,          // optional, if a message should trigger a push notification. Default is is true \n       ( message )   =   { \n           // this is a callback, after the message is sent. \n       }  );", 
            "title": "Sending a gif"
        }, 
        {
            "location": "/javascript/messaging/#mentioning-users", 
            "text": "You can mention other users by referencing their IDs in the message you compose.  af . Dialog . sendTextMessage ( \n       dialog ,            // dialog object \n       gifURL ,            // gif url \n       customData ,        // optional, custom data, you can send a string with your message \n       requireReceipt ,    // if the message require receipt, default is false \n       mentionUsers ,      // optional, an array of user ids of users who you want to mention in the message \n       sendPush ,          // optional, if a message should trigger a push notification. Default is is true \n       ( message )   =   { \n           // this is a callback, after the message is sent. \n       }  );", 
            "title": "Mentioning Users"
        }, 
        {
            "location": "/javascript/social/", 
            "text": "Social API\n\n\nAppFriends offers social features to help you build applications to connect users and store their social relationship.\n\n\nFollow/Unfollow and Friends\n\n\nUser can follow/unfollow one another.\nTo follow a user:\n\n\n// userID is target user id\n\n\naf\n.\nUser\n.\nfollowUser\n(\nuserID\n,\n \n(\nresponse\n,\n \nerror\n)\n \n=\n \n{\n\n  \n// callback function\n\n\n});\n\n\n\n\n\n\nTo unfollow a user\n\n\n// userID is target user id\n\n\naf\n.\nUser\n.\nunfollowUser\n(\nuserID\n,\n \n(\nresponse\n,\n \nerror\n)\n \n=\n \n{\n\n  \n// callback function\n\n\n});\n\n\n\n\n\n\nTo get a list of the followers of the current user\n\n\naf\n.\nUser\n.\ngetFollowers\n(\nuserID\n,\n \nfunction\n \n(\nusers\n,\n \nerror\n)\n \n{\n\n  \n// callback function\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle\n\n  \n}\n \nelse\n \n{\n\n    \n// you get a array of user objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nTo get a list of users that the current user is following\n\n\naf\n.\nUser\n.\ngetFollowings\n(\nuserID\n,\n \nfunction\n \n(\nusers\n,\n \nerror\n)\n \n{\n\n  \n// callback function\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle\n\n  \n}\n \nelse\n \n{\n\n    \n// you get a array of user objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nIn AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:\n\n\naf\n.\nUser\n.\ngetFriends\n(\nuserID\n,\n \nfunction\n \n(\nusers\n,\n \nerror\n)\n \n{\n\n  \n// callback function\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \n// handle\n\n  \n}\n \nelse\n \n{\n\n    \n// you get a array of user objects\n\n  \n}\n\n\n});\n\n\n\n\n\n\nBlock/Unblock\n\n\nAn user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:\n\n\naf\n.\nUser\n.\nblockUser\n(\nuserID\n,\n \nfunction\n \n(\nresponse\n,\n \nerror\n)\n \n{\n\n  \n// callback function\n\n\n});\n\n\n\n\n\n\nUnblock a user:\n\n\naf\n.\nUser\n.\nunBlockUser\n(\nuserID\n,\n \nfunction\n \n(\nresponse\n,\n \nerror\n)\n \n{\n\n  \n// callback function\n\n\n});", 
            "title": "Social"
        }, 
        {
            "location": "/javascript/social/#social-api", 
            "text": "AppFriends offers social features to help you build applications to connect users and store their social relationship.", 
            "title": "Social API"
        }, 
        {
            "location": "/javascript/social/#followunfollow-and-friends", 
            "text": "User can follow/unfollow one another.\nTo follow a user:  // userID is target user id  af . User . followUser ( userID ,   ( response ,   error )   =   { \n   // callback function  });   To unfollow a user  // userID is target user id  af . User . unfollowUser ( userID ,   ( response ,   error )   =   { \n   // callback function  });   To get a list of the followers of the current user  af . User . getFollowers ( userID ,   function   ( users ,   error )   { \n   // callback function \n   if   ( error )   { \n     // handle \n   }   else   { \n     // you get a array of user objects \n   }  });   To get a list of users that the current user is following  af . User . getFollowings ( userID ,   function   ( users ,   error )   { \n   // callback function \n   if   ( error )   { \n     // handle \n   }   else   { \n     // you get a array of user objects \n   }  });   In AppFriends, when two users follow one another, they become friends. To get a list of friends of the current user, you can use:  af . User . getFriends ( userID ,   function   ( users ,   error )   { \n   // callback function \n   if   ( error )   { \n     // handle \n   }   else   { \n     // you get a array of user objects \n   }  });", 
            "title": "Follow/Unfollow and Friends"
        }, 
        {
            "location": "/javascript/social/#blockunblock", 
            "text": "An user can block other users. If user A blocks user B, B will no longer be able to send any private message to A.\nYou can block a user by:  af . User . blockUser ( userID ,   function   ( response ,   error )   { \n   // callback function  });   Unblock a user:  af . User . unBlockUser ( userID ,   function   ( response ,   error )   { \n   // callback function  });", 
            "title": "Block/Unblock"
        }, 
        {
            "location": "/api/request_auth/", 
            "text": "Authentication of API Requests\n\n\nWhen you access AppFriends REST API via our SDK, you only need to provide the correct \nApp_ID\n and \nApp_Secret\n when you initialize the SDK. However, when you want to make direct REST API requests using a http client, the requests need to be structured correctly and signed by the appropriate secret. \nadmin secret\n can be used for all APIs, but you should only use it on your server to keep it secret. \napp secret\n is for you to use inside your app, and it can only give access to application APIs.\n\n\nRequest Header\n\n\nIn the request http header, These fields need to be present:\n\n\nAPP_ID\n - Your App_ID. You can find it in the admin panel after your app is created there.\n\n\nTOKEN\n - When you are sending the requests on a user's behave, the user's auth token should be included here. Auth token is returned after the user signup or login to AppFriends. See \nuser authentication\n.\n\n\nAuthorization\n - Your request signature. See \nsignature creation\n.\n\n\nNonce\n - A random integer.\n\n\nTimestamp\n - system timestamp\n\n\nSample Request Header\n\n\nYour http header can contain other fields, but they need to include:\n\n\nAPP_ID: \nSVXJKXjXUGOkEFBWDK8NCwtt\n\nTOKEN: \nBE82LbEu_bGNnwXmy5KObw\n\nTimestamp: \n1462117651\n\nNonce: \nrandom integer\n\nAuthorization: Bearer \nsignature token\n\n\n\n\n\n\nApp ID and Secrets\n\n\nFor each application you create on AppFriends, there's going to an \nApp_ID\n, an \nApp_Secret\n and an \nAdmin_Secret\n.\n\n\nApp_ID\n is used to identify your application.\n\n\nApp_Secret\n is the secret used to sign the requests coming from your application.\n\n\nAdmin_Secret\n is the secret used to sign the requests coming directly from your server. For example, your server can send a request via AppFriends REST API to update a user's token or you can export all the social graph data with your admin secret.\n\n\nThese values play very important role in authenticating your requests, so please keep them away from the bad guys.\n\n\nSignature Creation\n\n\nThe signature is creation is using JSON Web Tokens \n(JWT)\n, which is an open, industry standard \nRFC 7519\n method for representing claims securely between two parties. You can use \nthis website\n to verify your signature.\n\n\n//signature creation\n\n\nHMACSHA256\n(\n\n  \nbase64UrlEncode\n(\nJWT\n \nheader\n)\n \n+\n \n.\n \n+\n\n  \nbase64UrlEncode\n(\npayload\n),\n\n  \nyour\n \nsecret\n \nhere\n\n\n)\n\n\n\n\n\n\nThe signature created here will be used in the Authorization header using the Bearer schema.\n\n\nAuthorization: Bearer \nsignature token\n\n\n\n\n\n\nJWT Header\n\n\nJWT header is not your request http header. It is used just to sign the request. The JWT header will look like this:\n\n\n{\n\n  \nalg\n:\n \nHS256\n,\n\n  \ntyp\n:\n \nJWT\n\n\n}\n\n\n\n\n\n\nJWT Payload\n\n\nPut timestamp (seconds) in your payout\n\n\n{\n\n  \ntimestamp\n:\n \n1462117651\n,\n\n  \ntoken\n:\n \nthe user token\n\n\n}\n\n\n\n\n\n\n\n\nAbove: JWT example on \njwt.io", 
            "title": "Request Authentication"
        }, 
        {
            "location": "/api/request_auth/#authentication-of-api-requests", 
            "text": "When you access AppFriends REST API via our SDK, you only need to provide the correct  App_ID  and  App_Secret  when you initialize the SDK. However, when you want to make direct REST API requests using a http client, the requests need to be structured correctly and signed by the appropriate secret.  admin secret  can be used for all APIs, but you should only use it on your server to keep it secret.  app secret  is for you to use inside your app, and it can only give access to application APIs.", 
            "title": "Authentication of API Requests"
        }, 
        {
            "location": "/api/request_auth/#request-header", 
            "text": "In the request http header, These fields need to be present:  APP_ID  - Your App_ID. You can find it in the admin panel after your app is created there.  TOKEN  - When you are sending the requests on a user's behave, the user's auth token should be included here. Auth token is returned after the user signup or login to AppFriends. See  user authentication .  Authorization  - Your request signature. See  signature creation .  Nonce  - A random integer.  Timestamp  - system timestamp", 
            "title": "Request Header"
        }, 
        {
            "location": "/api/request_auth/#sample-request-header", 
            "text": "Your http header can contain other fields, but they need to include:  APP_ID:  SVXJKXjXUGOkEFBWDK8NCwtt \nTOKEN:  BE82LbEu_bGNnwXmy5KObw \nTimestamp:  1462117651 \nNonce:  random integer \nAuthorization: Bearer  signature token", 
            "title": "Sample Request Header"
        }, 
        {
            "location": "/api/request_auth/#app-id-and-secrets", 
            "text": "For each application you create on AppFriends, there's going to an  App_ID , an  App_Secret  and an  Admin_Secret .  App_ID  is used to identify your application.  App_Secret  is the secret used to sign the requests coming from your application.  Admin_Secret  is the secret used to sign the requests coming directly from your server. For example, your server can send a request via AppFriends REST API to update a user's token or you can export all the social graph data with your admin secret.  These values play very important role in authenticating your requests, so please keep them away from the bad guys.", 
            "title": "App ID and Secrets"
        }, 
        {
            "location": "/api/request_auth/#signature-creation", 
            "text": "The signature is creation is using JSON Web Tokens  (JWT) , which is an open, industry standard  RFC 7519  method for representing claims securely between two parties. You can use  this website  to verify your signature.  //signature creation  HMACSHA256 ( \n   base64UrlEncode ( JWT   header )   +   .   + \n   base64UrlEncode ( payload ), \n   your   secret   here  )   The signature created here will be used in the Authorization header using the Bearer schema.  Authorization: Bearer  signature token", 
            "title": "Signature Creation"
        }, 
        {
            "location": "/api/request_auth/#jwt-header", 
            "text": "JWT header is not your request http header. It is used just to sign the request. The JWT header will look like this:  { \n   alg :   HS256 , \n   typ :   JWT  }", 
            "title": "JWT Header"
        }, 
        {
            "location": "/api/request_auth/#jwt-payload", 
            "text": "Put timestamp (seconds) in your payout  { \n   timestamp :   1462117651 , \n   token :   the user token  }    Above: JWT example on  jwt.io", 
            "title": "JWT Payload"
        }, 
        {
            "location": "/api/applicationapi/", 
            "text": "Application API\n\n\nAppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. Application API's can only be accessed via the SDK, using the application secret.\n\n\nREST APIs\n\n\nPlease see our application REST APIs \nhere\n.\n\n\nError Codes\n\n\n\n\n\n\n\n\nError Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n9000\n\n\noperation not allowed\n\n\n\n\n\n\n10000\n\n\nparameter required\n\n\n\n\n\n\n10001\n\n\nneed to login\n\n\n\n\n\n\n10002\n\n\nmissing app ID\n\n\n\n\n\n\n10003\n\n\ninvalid app ID\n\n\n\n\n\n\n10004\n\n\nno permission\n\n\n\n\n\n\n10005\n\n\nadmin user not found\n\n\n\n\n\n\n10007\n\n\nno Authorization header found\n\n\n\n\n\n\n10008\n\n\ninvalid Authorization header found\n\n\n\n\n\n\n10009\n\n\ninvalid request path or method\n\n\n\n\n\n\n10010\n\n\ninvalid params\n\n\n\n\n\n\n10011\n\n\nadmin server api secret required\n\n\n\n\n\n\n20005\n\n\ndialog not found\n\n\n\n\n\n\n30007\n\n\nexceed max import users per request\n\n\n\n\n\n\n50000\n\n\nserver is under maintenance", 
            "title": "Application APIs"
        }, 
        {
            "location": "/api/applicationapi/#application-api", 
            "text": "AppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. Application API's can only be accessed via the SDK, using the application secret.", 
            "title": "Application API"
        }, 
        {
            "location": "/api/applicationapi/#rest-apis", 
            "text": "Please see our application REST APIs  here .", 
            "title": "REST APIs"
        }, 
        {
            "location": "/api/applicationapi/#error-codes", 
            "text": "Error Code  Description      9000  operation not allowed    10000  parameter required    10001  need to login    10002  missing app ID    10003  invalid app ID    10004  no permission    10005  admin user not found    10007  no Authorization header found    10008  invalid Authorization header found    10009  invalid request path or method    10010  invalid params    10011  admin server api secret required    20005  dialog not found    30007  exceed max import users per request    50000  server is under maintenance", 
            "title": "Error Codes"
        }, 
        {
            "location": "/api/adminapi/", 
            "text": "Application API\n\n\nAppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. The admin api's can be accessed via any http client, using the admin secret.\n\n\nREST APIs\n\n\nPlease see our admin REST APIs \nhere\n.", 
            "title": "Admin APIs"
        }, 
        {
            "location": "/api/adminapi/#application-api", 
            "text": "AppFriends API can be used to authenticate user, send messages, search for user, update user information, create social relationship and etc. The admin api's can be accessed via any http client, using the admin secret.", 
            "title": "Application API"
        }, 
        {
            "location": "/api/adminapi/#rest-apis", 
            "text": "Please see our admin REST APIs  here .", 
            "title": "REST APIs"
        }
    ]
}